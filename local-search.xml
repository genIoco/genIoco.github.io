<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo图床图片不显示</title>
    <link href="/2024/07/12/Hexo%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <url>/2024/07/12/Hexo%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Hexo图床图片不显示"><a href="#Hexo图床图片不显示" class="headerlink" title="Hexo图床图片不显示"></a>Hexo图床图片不显示</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>​最近刚搭好Hexo博客，想上传个笔记试试来着，发现图床图片根本不显示，看了一下控制台，一堆报错，这里记录一下解决方案，希望能帮助到遇到同样问题的同学。</p><p><img src="https://img-blog.csdnimg.cn/direct/e91bc8dcedf445dcafd6b90f201f768e.png" alt="image-20240712101539674"></p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ul><li><p>首先确定一下具体问题缘由</p><ul><li><p>检查一下图床链接是否正常</p></li><li><p>检查浏览器控制台报错信息</p><p>我这里报错403，应该是网络资源被拒绝了</p></li></ul></li><li><p>解决方案：</p><p>只需要在markdown文章开头添加一个<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code>即可正常显示图片。</p></li></ul><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><ul><li><p>HTML的 标签提供了 HTML 文档的元数据。元数据不会显示在客户端，但是会被浏览器解析。这也是为什么加在mardown文章里不会看到这段代码的原因。</p></li><li><p>HTML 的 name 属性规定了元数据的名称，这里我们用到的是referer属性，这个属性的作用是让服务器判断来源页面，即用户是从哪来的，很多时候referer被当做防盗链来使用，服务器根据你的访问来源判断是否应该让你下载这个资源，如果你的来源不和规范，比如是个恶意爬虫，那么就会产生403错误。通过浏览器查看请求数据，我们可以看到请求referer为<code>http://localhost:8080/</code>，被服务器直接给拦截了</p><p><img src="https://img-blog.csdnimg.cn/direct/575c48b7c76b47078f404d86d02e7dad.png" alt="image-20240712102058495"></p></li><li><p>到这里，<code>content=&quot;no-referrer&quot;</code>的意义就呼之欲出了，既然我们想拿到这个资源但被服务器认出来之后又被拒绝了，那么伪装一下，不告诉服务器不就行了？所以，这里content的no-referer就是表示不发送引用数据，隐藏自己的来源信息。这样，图片就能正常显示了。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>疑难杂症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>疑难杂症</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建</title>
    <link href="/2024/07/11/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/07/11/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-安装配置"><a href="#Hexo-安装配置" class="headerlink" title="Hexo 安装配置"></a>Hexo 安装配置</h2><h3 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h3><ul><li><p>Hexo配置需要<code>git</code>和<code>node.js</code>两个依赖组件，具体安装步骤可以直接去<a href="https://hexo.io/zh-cn/docs/">官方文档</a>查看。</p></li><li><p>安装Hexo后完成后，初始化Hexo：</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">hexo init <span class="hljs-symbol">&lt;folder&gt;</span><br><span class="hljs-keyword">cd</span> <span class="hljs-symbol">&lt;folder&gt;</span><br>npm install<br></code></pre></td></tr></table></figure><ul><li>初始化完成后，打开项目目录下的<code>_config.yml</code>，根据自己需求修改一下内容。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span>                      <span class="hljs-comment"># 必填，输入网站标题</span><br><span class="hljs-attr">subtitle:</span>                   <span class="hljs-comment"># 此处可不填，子标题</span><br><span class="hljs-attr">description:</span>                <span class="hljs-comment"># 此处可不填，网站简介</span><br><span class="hljs-attr">keywords:</span>                   <span class="hljs-comment"># 此处可不填，关键词</span><br><span class="hljs-attr">author:</span>                     <span class="hljs-comment"># 必填，作者名称</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>             <span class="hljs-comment"># 必填，使用的语言，这里应填为 `zh-CN` </span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>   <span class="hljs-comment"># 必填，时区，在国内建议选择上海时间</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://&lt;你的</span> <span class="hljs-string">Github</span> <span class="hljs-string">用户名&gt;.github.io</span>  <span class="hljs-comment"># 必填，Github Page 的地址</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure><ul><li>在项目目录下执行<code>hexo -g</code>将会生成网站静态文件，<code>hexo -s</code>则会打开本地服务器，此时即可访问<code>http://localhost:4000/</code>查看默认网站。</li></ul><h3 id="Hexo-Deploy-配置"><a href="#Hexo-Deploy-配置" class="headerlink" title="Hexo Deploy 配置"></a>Hexo Deploy 配置</h3><p>Hexo内置部署功能，可以很方便的部署到Github上去，并自动同步Github Page，首先安装<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>具体需在 <code>_config.yml</code> 文件下找到并修改如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy:<br>  type: git<br>  # 必填，Github 仓库地址<br>  repo: https:<span class="hljs-comment">//github.com/&lt;Github 用户名&gt;/&lt;Github 用户名&gt;.github.io.git </span><br>  branch: <span class="hljs-string">&#x27;master&#x27;</span>    # 决定上传到哪个节点下，这里默认选择 <span class="hljs-string">&#x27;main&#x27;</span><br>  token:            # Github认证Token<br></code></pre></td></tr></table></figure><p>字段功能如下表所示：</p><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">选项</td><td align="left">描述</td><td align="left">默认</td></tr><tr><td align="left"><code>repo</code></td><td align="left">目标存储库的 URL</td><td align="left"></td></tr><tr><td align="left"><code>branch</code></td><td align="left">分支名称</td><td align="left"><code>gh-pages</code> (GitHub) <code>coding-pages</code> (Coding.net) <code>master</code> (others)</td></tr><tr><td align="left"><code>message</code></td><td align="left">自定义提交信息</td><td align="left"><code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code></td></tr><tr><td align="left"><code>token</code></td><td align="left">可选的令牌值，用于认证 repo。 用 <code>$</code> 作为前缀从而从环境变量中读取令牌</td><td align="left"></td></tr></tbody></table><p>配置完成后执行<code>hexo d</code>即可上传至Github。</p><h3 id="Hexo-安装主题"><a href="#Hexo-安装主题" class="headerlink" title="Hexo 安装主题"></a>Hexo 安装主题</h3><ul><li><p>接下来，我们给他换个主题，可以在 <em><a href="https://link.zhihu.com/?target=https://hexo.io/themes/">https://hexo.io/themes/</a></em> 上寻找想要的主题，我们这里以Fluid主题介绍安装步骤：</p><ul><li><p>进入博客目录执行命令安装</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure></li><li><p>在博客目录下创建<code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml (opens new window)</a>内容复制过去。</p></li><li><p>博客目录下的<code>_config.fluid.yml</code>文件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid <span class="hljs-meta"># 请在此处修改主题名称，比如：fluid</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Fluid-主题配置"><a href="#Fluid-主题配置" class="headerlink" title="Fluid 主题配置"></a>Fluid 主题配置</h3><p>​Fluid主题配置来源于Fluid用户手册，这里只记录了本人所用到一些配置，详细配置转到<a href="https://fluid-dev.github.io/hexo-fluid-docs/">Hexo Fludi用户手册</a>。</p><blockquote><p>​Fluid主题配置文件一般指<code>theme/fluid/_config.yml</code>或者<code>_config.fluid.yml</code>，其中<code>_config.fluid.yml</code>优先级比较高。初始配置可以在博客目录下创建<code>_config.fluid.yml</code>文件，将<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">官方默认配置</a>复制进去即可。</p></blockquote><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><h5 id="页面顶部大图"><a href="#页面顶部大图" class="headerlink" title="页面顶部大图"></a>页面顶部大图</h5><p>​主题配置中，每个页面都有名为 <code>banner_img</code> 的属性，可以使用本地图片的相对路径，也可以为外站链接：</p><p>本地图片：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">banner_img: <span class="hljs-regexp">/img/</span>bg<span class="hljs-regexp">/example.jpg   # 对应存放在 /</span><span class="hljs-keyword">source</span><span class="hljs-regexp">/img/</span>bg/example.jpg<br></code></pre></td></tr></table></figure><p>外部链接：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">banner_img:</span> https:<span class="hljs-comment">//static.zkqiang.cn/example.jpg</span><br></code></pre></td></tr></table></figure><h5 id="网页统计功能"><a href="#网页统计功能" class="headerlink" title="网页统计功能"></a>网页统计功能</h5><p>fluid支持多种网页统计方式，下面的选择一个，填写上key即可。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">web_analytics:</span>  <span class="hljs-meta"># 网页访问统计</span><br><span class="hljs-symbol">  enable:</span> true <span class="hljs-meta"># 默认为false，启用网页统计改为true即可</span><br><span class="hljs-symbol">  baidu:</span>  <span class="hljs-meta"># 百度统计的Key，参见 https:<span class="hljs-comment">//tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376 代码获取中 hm.js? 后边的字符串</span></span><br><span class="hljs-symbol">  google:</span>  <span class="hljs-meta"># Google统计的Tracking ID，参见 https:<span class="hljs-comment">//analytics.google.com/analytics/web/</span></span><br><span class="hljs-symbol">  tencent:</span>  <span class="hljs-meta"># 腾讯统计的H5 App id，参见 https:<span class="hljs-comment">//mta.qq.com/h5/manage/ctr_app_manage (开启高级功能才有cid)</span></span><br><span class="hljs-symbol">    sid:</span><br><span class="hljs-symbol">    cid:</span><br><span class="hljs-symbol">  woyaola:</span>  <span class="hljs-meta"># 51.la站点统计ID，参见 https:<span class="hljs-comment">//www.51.la/user/site/index</span></span><br><span class="hljs-symbol">  cnzz:</span>  <span class="hljs-meta"># 友盟/cnzz站点统计web_id，参见 https:<span class="hljs-comment">//web.umeng.com/main.php?c=site&amp;a=show</span></span><br><span class="hljs-symbol">  leancloud:</span>  <span class="hljs-meta"># LeanCloud 计数统计，可用于 PV UV 展示，如果 web_analytics.enable 没有开启，PV UV 展示只会查询，不会增加</span><br><span class="hljs-symbol">    app_id:</span><br><span class="hljs-symbol">    app_key:</span><br><span class="hljs-symbol">    server_url:</span>  <span class="hljs-meta"># REST API 服务器地址，国际版不填</span><br></code></pre></td></tr></table></figure><h5 id="展示-PV-与-UV-统计"><a href="#展示-PV-与-UV-统计" class="headerlink" title="展示 PV 与 UV 统计"></a>展示 PV 与 UV 统计</h5><p>​PV与UV可以展示当前站点总访问量，总访客数，busuanzi似乎已经凉了。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">footer:</span><br><span class="hljs-symbol">  statistics:</span><br><span class="hljs-symbol">    enable:</span> true<br><span class="hljs-symbol">    source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>  <span class="hljs-meta"># 可选 leancloud | busuanzi  根据自己需求选择</span><br><span class="hljs-symbol">    pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-meta"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br><span class="hljs-symbol">    uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure><h4 id="文章相关配置"><a href="#文章相关配置" class="headerlink" title="文章相关配置"></a>文章相关配置</h4><h5 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h5><p>Front-matter 是文件开头的 YAML 或 JSON 代码块，用于配置写作设置。例如在博客MD文件开头，我们可以添加如下代码块指明文章基本信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">个人博客搭建</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">摘要</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024</span><span class="hljs-string">/7/11</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-attr">update:</span> <span class="hljs-number">2024</span><span class="hljs-string">/7/11</span> <span class="hljs-number">21</span><span class="hljs-string">:00:00</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">tags:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">教程文档</span><br><span class="hljs-attr">categories:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">博客搭建</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>字段及解释如下：</p><table><thead><tr><th align="left">设置</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/docs/configuration#Writing"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章的永久链接. 永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td align="left"><code>null</code></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。 使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left">false</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr><tr><td align="left"><code>published</code></td><td align="left">文章是否发布</td><td align="left">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td></tr></tbody></table><div class="note note-primary">            <p>值得注意的是分类和标签字段，在Hexo中，分类具有顺序性和层次性；而标签没有顺序和层次。在配置上需要注意，下面配置将为文章添加<code>Diary</code>和<code>Life</code>分类。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>如果需要为文章添加多个子分类，请使用以下列表格式：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure>          </div><h5 id="首页滚动标题"><a href="#首页滚动标题" class="headerlink" title="首页滚动标题"></a>首页滚动标题</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">index:</span><br><span class="hljs-symbol">  slogan:</span><br><span class="hljs-symbol">    enable:</span> true<br><span class="hljs-symbol">    text:</span> 这是一条 Slogan<br><span class="hljs-symbol">    api:</span><br><span class="hljs-symbol">      enable:</span> false<br><span class="hljs-symbol">      url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><br><span class="hljs-symbol">      method:</span> <span class="hljs-string">&quot;GET&quot;</span><br><span class="hljs-symbol">      headers:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">      keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]<br></code></pre></td></tr></table></figure><ul><li><p><code>api</code>字段可以指定首页标题内容来源</p><ul><li><p><code>url</code>: API 地址，必须返回的是一个 JSON 格式</p></li><li><p>method<code>: 请求方法，可选 </code>GET<code>、</code>POST<code>、</code>PUT</p></li><li><p><code>headers</code>: 请求头，如果接口需要传一些验证的头部信息，在这里设置</p></li><li><p><code>keys</code>指明从请求结果中获取名称，例如<code>[&#39;data&#39;,&#39;content&#39;]</code>表示获取json数据中<code>data</code>字段中的<code>content</code>值。</p></li></ul></li></ul><h5 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h5><p>  ​Fluid默认开启自动摘要：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>  也可以在MD文档中<code>Front-matter</code>手动指定摘要：</p>  <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> 文章题目<br><span class="hljs-symbol">excerpt:</span> 文章摘要<br></code></pre></td></tr></table></figure><h5 id="日期-字数-阅读时长-阅读数"><a href="#日期-字数-阅读时长-阅读数" class="headerlink" title="日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数"></a>日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数</h5><p>  ​显示在文章页大标题下的文章信息，除了作者和阅读次数，其他功能都是默认开启的。</p>  <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">post:</span><br><span class="hljs-symbol">  meta:</span><br><span class="hljs-symbol">    author:</span>  <span class="hljs-meta"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br><span class="hljs-symbol">      enable:</span> false<br><span class="hljs-symbol">    date:</span>  <span class="hljs-meta"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br><span class="hljs-symbol">      enable:</span> true<br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-meta"># 格式参照 ISO-8601 日期格式化</span><br><span class="hljs-symbol">    wordcount:</span>  <span class="hljs-meta"># 字数统计</span><br><span class="hljs-symbol">      enable:</span> true<br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-meta"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br><span class="hljs-symbol">    min2read:</span>  <span class="hljs-meta"># 阅读时间</span><br><span class="hljs-symbol">      enable:</span> true<br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br><span class="hljs-symbol">    views:</span>  <span class="hljs-meta"># 阅读次数</span><br><span class="hljs-symbol">      enable:</span> false<br><span class="hljs-symbol">      source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-meta"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span><br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure><h5 id="Tag插件"><a href="#Tag插件" class="headerlink" title="Tag插件"></a>Tag插件</h5><p>  在 markdown 中加入如下的代码来使用便签：</p>  <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"></span><br><span class="language-xml">文字 或者 `markdown` 均可</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><p>  <code>success</code>可更换为<code>primary</code>、<code>secondary</code>、<code>success</code>、<code>danger</code>、<code>warning</code>、<code>info</code>、<code>light</code>。</p>  <div class="note note-primary">            <p>我是便签。</p>          </div>  <div class="note note-secondary">            <p>我也是便签。</p>          </div>  <div class="note note-success">            <p>我还是便签。</p>          </div>  <div class="note note-danger">            <p>我当然是便签。</p>          </div>  <div class="note note-warning">            <p>我肯定是是便签。</p>          </div>  <div class="note note-warning">            <p>我不是便签吗？</p>          </div>  <div class="note note-light">            <p>我绝对是便签。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>教程文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cobalt Strike逆向教程</title>
    <link href="/2023/09/23/Cobalt%20Strike%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B/"/>
    <url>/2023/09/23/Cobalt%20Strike%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Cobalt-Strike逆向教程"><a href="#Cobalt-Strike逆向教程" class="headerlink" title="Cobalt Strike逆向教程"></a>Cobalt Strike逆向教程</h1><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>​这里采用的是Cobalt Strike 4.7原版进行逆向教程（因为我没找到最新版的原版程序），Cobalt Strike 4.7原版sha256校验码如下，其他版本校验码请访问校验码官网校验地址：<a href="https://verify.cobaltstrike.com/">https://verify.cobaltstrike.com/</a></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">cobaltstrike.jar sha<span class="hljs-number">256</span>:<br><br><span class="hljs-keyword">c</span><span class="hljs-number">1</span>cda<span class="hljs-number">82</span>b<span class="hljs-number">39</span>fda<span class="hljs-number">2</span>f<span class="hljs-number">77</span><span class="hljs-keyword">c</span><span class="hljs-number">811</span>f<span class="hljs-number">42</span>a<span class="hljs-number">7</span>a<span class="hljs-number">55987</span>adf<span class="hljs-number">37e06</span>a<span class="hljs-number">522</span>ed<span class="hljs-number">6</span>f<span class="hljs-number">28900</span>d<span class="hljs-number">77</span>bbd<span class="hljs-number">4409</span>f<br></code></pre></td></tr></table></figure><p>windows可使用以下命令获取校验码</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">certutil -hashfile 文件 [md5|<span class="hljs-type">sha1</span>|<span class="hljs-type">sha256</span>]<br></code></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="反编译程序"><a href="#反编译程序" class="headerlink" title="反编译程序"></a>反编译程序</h3><p>​我们原版获取到的<code>Cobalt_Strike</code>原版程序都是客户端与服务端合并在一起的，安装的使用重新进行解压，首先我们先将客户端程序提取出来。将<code>cs_bin</code>目录下的<code>Cobalt_Strike_4.7.jar</code>反编译并将反编译后的文件放在<code>cs_src</code>文件夹中，最终也是生成一个jar文件，不同的是此时jar文件中的<code>class</code>文件全部被反编译为<code>java</code>源程序文件。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java -cp java-decompiler<span class="hljs-selector-class">.jar</span> org<span class="hljs-selector-class">.jetbrains</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.main</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.ConsoleDecompiler</span> -dgs=true cs_bin\Cobalt_Strike_4.<span class="hljs-number">7</span><span class="hljs-selector-class">.jar</span> cs_src<br></code></pre></td></tr></table></figure><p>使用压缩软件直接解压反编译后的<code>jar</code>文件，其目录结构如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">E:.<br>│  cobaltstrike-client<span class="hljs-selector-class">.jar</span><br>│  cobaltstrike-client<span class="hljs-selector-class">.md5</span><br>│  cobaltstrike-client<span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.md5</span><br>│  TeamServerImage<br>│  TeamServerImage<span class="hljs-selector-class">.md5</span><br>│  TeamServerImage<span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.md5</span><br>│<br>├─cszip<br>│      CSExtract<span class="hljs-selector-class">.java</span><br>│<br>└─META-INF<br>        MANIFEST.MF<br></code></pre></td></tr></table></figure><p>​看到<code>TeamServerImage</code>是不是有点眼熟呢？<code>TeamServerImage</code>正是服务端的程序，<code>CSExtract.java</code>执行了一些解压操作，这里不做重点；反编译<code>cobaltstrike-client.jar</code>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java -cp java-decompiler<span class="hljs-selector-class">.jar</span> org<span class="hljs-selector-class">.jetbrains</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.main</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.ConsoleDecompiler</span> -dgs=true cs_src\Cobalt_Strike_4.<span class="hljs-number">7</span>\cobaltstrike-client<span class="hljs-selector-class">.jar</span> cs_src\cs_client_src\<br></code></pre></td></tr></table></figure><p>​打开idea，新建项目，创建好后，在项目根目录创建<code>decompiled_src</code>和<code>lib</code>文件夹，分别存放上一步反编译后的<code>cobaltstrike-client.jar</code>和原始未反编译的<code>cobaltstrike-client.jar</code>，将反编译后的<code>cobaltstrike-client.jar</code>解压，项目最终目录结构如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">│  .gitignore<br>│  CobaltStrikeCrack.iml<br>│<br>├─.idea<br>│      misc.<span class="hljs-keyword">xml</span><br><span class="hljs-title">│      modules</span>.<span class="hljs-keyword">xml</span><br><span class="hljs-title">│      vcs</span>.<span class="hljs-keyword">xml</span><br><span class="hljs-title">│      workspace</span>.<span class="hljs-keyword">xml</span><br><span class="hljs-title">│</span><br><span class="hljs-title">├─decompiled_src</span><br>│  │  cobaltstrike-client.jar<br>│  │<br>│  └─cobaltstrike-client<br>│      <br>├─lib<br>│      cobaltstrike-client.jar<br>│<br>└─src<br></code></pre></td></tr></table></figure><h3 id="添加项目依赖"><a href="#添加项目依赖" class="headerlink" title="添加项目依赖"></a>添加项目依赖</h3><p>选择<code>File-&gt;Project Structure-&gt;Modules</code>对<code>Dependencies</code>进行设置，点击+号选择<code>JARs or Directories...</code></p><p><img src="https://img-blog.csdnimg.cn/direct/8a776b37618f4990abefd61d2ab58d32.png" alt="image-20230923172941606"></p><p>选择<code>lib</code>中的<code>cobaltstrike-client.jar</code>，点击ok，确定<code>export</code>打勾，点击ok，程序反编译完成。</p><p><img src="https://img-blog.csdnimg.cn/direct/14852ed34e6f48069ce5162217b3ad71.png" alt="image-20230923173025005"></p><h3 id="构建工件"><a href="#构建工件" class="headerlink" title="构建工件"></a>构建工件</h3><p>打开<code>lib-&gt;META-INF-&gt;MANIFEST.MF</code>，可以看到Main Class，复制<code>aggressor.Aggressor</code></p><p><img src="https://img-blog.csdnimg.cn/direct/e44e20aa44d44027974fbee2b8d87006.png" alt="image-20230923202619073"></p><p>进入<code>File-&gt;Project Structure-&gt;Artifacts—&gt;JAR—&gt;From modules with dependencies</code>。</p><p><img src="https://img-blog.csdnimg.cn/direct/556abfe27a664bc6a376a732f2739e42.png" alt="image-20230923202314413"></p><p>在<code>Main Class</code>处内填写上面获得的主类名称，点击ok。</p><p><img src="https://img-blog.csdnimg.cn/direct/6346e5d49f404931a3bd0bd7952732d1.png" alt="image-20230923202341832"></p><p>​此时<code>src</code>目录下生成<code>META-INF</code>配置，打开<code>MANIFEST.MF</code>，将<code>decompiled_src/cobaltstrike-client/META-INF/MANIFEST.MF</code>的内容复制粘贴覆盖，至此工件构建配置完成。</p><h3 id="源码编译测试"><a href="#源码编译测试" class="headerlink" title="源码编译测试"></a>源码编译测试</h3><p>进入<code>ecompiled_src/cobaltstrike-client/aggressor/Aggressor.java</code>，右键选择<code>Refactor-&gt;Copy File</code>，在<code>src</code>目录中新建相同路径，即可将<code>Aggressor.java</code>至我们的项目中。</p><p><img src="https://img-blog.csdnimg.cn/direct/5178070bacb24a1da37b620dd854da16.png" alt="image-20230923203008559"></p><p>此时，可以通过<code>Build—&gt;Build Artifacts—&gt;Build</code>进行工件编译，点击<code>Run-&gt;Profile-&gt;Edit Configurations...</code>设置运行参数。</p><p>点击+号，选择<code>JAR Application</code>，名字自己定义；<code>Path to JAR</code>选项目生成的<code>jar</code>文件；<code>VM options</code>设置为<code>-XX:+AggressiveHeap -XX:+UseParallelGC</code>。</p><p><img src="https://img-blog.csdnimg.cn/direct/62474be440794507bd87fcd9aa15a89d.png" alt="image-20230923204356838"></p><p>此时，直接运行项目不报错，且弹框输出<code>Your authorization file is not vaild.</code>，证明项目运行成功。</p><h2 id="密钥文件生成"><a href="#密钥文件生成" class="headerlink" title="密钥文件生成"></a>密钥文件生成</h2><p>各版本key：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">27, <span class="hljs-string">-27</span>, <span class="hljs-string">-66</span>, 82, <span class="hljs-string">-58</span>, 37, 92, 51, 85, <span class="hljs-string">-114</span>, <span class="hljs-string">-118</span>, 28, <span class="hljs-string">-74</span>, 103, <span class="hljs-string">-53</span>, 6,        // 4.0 key<br><span class="hljs-string">-128</span>, <span class="hljs-string">-29</span>, 42, 116, 32, 96, <span class="hljs-string">-72</span>, <span class="hljs-string">-124</span>, 65, <span class="hljs-string">-101</span>, <span class="hljs-string">-96</span>, <span class="hljs-string">-63</span>, 113, <span class="hljs-string">-55</span>, <span class="hljs-string">-86</span>, 118,  // 4.1 key<br><span class="hljs-string">-78</span>, 13, 72, 122, <span class="hljs-string">-35</span>, <span class="hljs-string">-44</span>, 113, 52, 24, <span class="hljs-string">-14</span>, <span class="hljs-string">-43</span>, <span class="hljs-string">-93</span>, <span class="hljs-string">-82</span>, 2, <span class="hljs-string">-89</span>, <span class="hljs-string">-96</span>,       // 4.2 key<br>58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span>,     // 4.3 key<br>94, <span class="hljs-string">-104</span>, 25, 74, 1, <span class="hljs-string">-58</span>, <span class="hljs-string">-76</span>, <span class="hljs-string">-113</span>, <span class="hljs-string">-91</span>, <span class="hljs-string">-126</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-87</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-69</span>, <span class="hljs-string">-110</span>, <span class="hljs-string">-42</span>,   // 4.4 key<br><span class="hljs-string">-13</span>, <span class="hljs-string">-114</span>, <span class="hljs-string">-77</span>, <span class="hljs-string">-47</span>, <span class="hljs-string">-93</span>, 53, <span class="hljs-string">-78</span>, 82, <span class="hljs-string">-75</span>, <span class="hljs-string">-117</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-34</span>, <span class="hljs-string">-127</span>, <span class="hljs-string">-75</span>, 66, // 4.5 key<br><span class="hljs-string">-122</span>, 56, <span class="hljs-string">-75</span>, 17, <span class="hljs-string">-32</span>, 91, 85, 123, <span class="hljs-string">-7</span>, 112, <span class="hljs-string">-60</span>, 24, 53, 109, 68, <span class="hljs-string">-12</span>         // 4.7 key<br><span class="hljs-string">-118</span>, 9, <span class="hljs-string">-22</span>, <span class="hljs-string">-51</span>, <span class="hljs-string">-53</span>, 27, 95, 70, <span class="hljs-string">-99</span>, <span class="hljs-string">-54</span>, 53, 124, <span class="hljs-string">-9</span>, <span class="hljs-string">-7</span>, <span class="hljs-string">-26</span>, 74          // 4.8 key<br>// 4.9 key<br></code></pre></td></tr></table></figure><p><strong>cobaltstrike.auth</strong>认证密钥文件，rsa加密，大端存放，解密内容：</p><p>4.7</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>, //文件头<br>0, <span class="hljs-string">-54</span>,//后续长度<br>1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127, // 证书有效时间，永久有效<br>23, 80, 101, <span class="hljs-string">-22</span>, // watermask<br>47, // 版本号 47<br>16, 27, <span class="hljs-string">-27</span>, <span class="hljs-string">-66</span>, 82, <span class="hljs-string">-58</span>, 37, 92, 51, 85, <span class="hljs-string">-114</span>, <span class="hljs-string">-118</span>, 28, <span class="hljs-string">-74</span>, 103, <span class="hljs-string">-53</span>, 6,        // 4.0 key<br>16, <span class="hljs-string">-128</span>, <span class="hljs-string">-29</span>, 42, 116, 32, 96, <span class="hljs-string">-72</span>, <span class="hljs-string">-124</span>, 65, <span class="hljs-string">-101</span>, <span class="hljs-string">-96</span>, <span class="hljs-string">-63</span>, 113, <span class="hljs-string">-55</span>, <span class="hljs-string">-86</span>, 118,  // 4.1 key<br>16, <span class="hljs-string">-78</span>, 13, 72, 122, <span class="hljs-string">-35</span>, <span class="hljs-string">-44</span>, 113, 52, 24, <span class="hljs-string">-14</span>, <span class="hljs-string">-43</span>, <span class="hljs-string">-93</span>, <span class="hljs-string">-82</span>, 2, <span class="hljs-string">-89</span>, <span class="hljs-string">-96</span>,       // 4.2 key<br>16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span>,     // 4.3 key<br>16, 94, <span class="hljs-string">-104</span>, 25, 74, 1, <span class="hljs-string">-58</span>, <span class="hljs-string">-76</span>, <span class="hljs-string">-113</span>, <span class="hljs-string">-91</span>, <span class="hljs-string">-126</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-87</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-69</span>, <span class="hljs-string">-110</span>, <span class="hljs-string">-42</span>,   // 4.4 key<br>16, <span class="hljs-string">-13</span>, <span class="hljs-string">-114</span>, <span class="hljs-string">-77</span>, <span class="hljs-string">-47</span>, <span class="hljs-string">-93</span>, 53, <span class="hljs-string">-78</span>, 82, <span class="hljs-string">-75</span>, <span class="hljs-string">-117</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-34</span>, <span class="hljs-string">-127</span>, <span class="hljs-string">-75</span>, 66, // 4.5 key<br>0, 0, 0, 24, // watermask length<br>105, 100, 118, 121, 85, 97, 77, 68, 75, 117, 98, 87, 87, 52, 84, 76, 51, 105, 80, 106, 66, 119, 61, 61, // watermask ascii base64<br>16, <span class="hljs-string">-71</span>, <span class="hljs-string">-86</span>, 51, 8, 10, 90, <span class="hljs-string">-112</span>, 49, 62, <span class="hljs-string">-15</span>, <span class="hljs-string">-99</span>, <span class="hljs-string">-64</span>, 98, 125, 46, <span class="hljs-string">-95</span>, <br>28, <br>115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47, 115, 103, 118, 78, 97, 103, 61, 61, 113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104, <br>16, // 4.7 sleeve key length<br><span class="hljs-string">-122</span>, 56, <span class="hljs-string">-75</span>, 17, <span class="hljs-string">-32</span>, 91, 85, 123, <span class="hljs-string">-7</span>, 112, <span class="hljs-string">-60</span>, 24, 53, 109, 68, <span class="hljs-string">-12</span> // key<br></code></pre></td></tr></table></figure><h3 id="CobaltStrike-client破解"><a href="#CobaltStrike-client破解" class="headerlink" title="CobaltStrike client破解"></a>CobaltStrike client破解</h3><ul><li><p>在<code>aggressor/Aggressor.main</code>中调用<code>License.checkLicenseGUI(new Authorization());</code>开始证书验证。</p></li><li><p>&#96;&#96;Authorization<code>类中是</code>cobaltstrike.auth<code>文件的处理，读取文件内容,创建</code>AuthCrypto类<code>，对</code>cobaltstrike.auth<code>进行MD5验证，并使用</code>RSA&#x2F;ECB&#x2F;PKCS1Padding&#96;进行RSA解密。</p><p><img src="https://img-blog.csdnimg.cn/direct/1f023f4446a14303aadd97df9a9f7e30.png" alt="image-20231002131410814"></p></li><li><p>调用<code>AuthCrypto().decrypt</code>对内容进行处理：</p><p><img src="https://img-blog.csdnimg.cn/direct/ee04d9451809402fbc27dd0d9f59bc97.png" alt="image-20231002131104667"></p></li><li><p>前四个字节证书文件头，在<code>common.AutoCrypto.decrypt</code>进行验证（-889274181为3.x版本；-889274157为4.x版本），读取后两个字节作为<code>auth</code>长度，存入<code>var6</code>中并返回。</p><p><img src="https://img-blog.csdnimg.cn/direct/530af4d201444ae885f315e4babfb698.png" alt="image-20231002131134484"></p></li><li><p>从解密数据中获取<code>watermark</code>、版本号以及watermarkHash，并跳过之前版本的密钥。</p><p> <img src="https://img-blog.csdnimg.cn/direct/42014d01b09b4d358fe3556db4c48a03.png" alt="image-20231002132300627"></p></li><li><p>获取过期时间，29999999表示永久证书，并将key传入<code>SleevedResource.Setup</code>进行数据解密。</p><p><img src="https://img-blog.csdnimg.cn/direct/902974f11ef84eb39e6df3d8eb0481c5.png" alt="image-20231002132514771"></p></li><li><p>在<code>Authorization</code>类中调用<code>SleevedResource.Setup</code>方法对<code>arrayOfByte6</code>进行处理。在<code>this.A.registerKey</code>中把key设定为AES、HmacSHA256解密的秘钥，在<code>this.A</code>中的<code>this.A.decrypt(var3)</code>进行解密调用，解密的内容为<code>/sleeve/</code>中的dll文件：</p><p><img src="https://img-blog.csdnimg.cn/direct/a8342b6d47a64d68a96b2aedaf612f77.png" alt="image-20231002132855178"></p><p><img src="https://img-blog.csdnimg.cn/direct/85b0d2f85b1c4abebb68f3bf7d413372.png" alt="image-20231002132738793"></p><ul><li>整个密钥文件内容分析流程到此结束，可以知道比较关键的内容就是证书有效时间和解密key，解密key只能通过分析正版的auth文件获取。</li></ul></li></ul><p>可以直接使用使用大佬的代码生成密钥文件。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs subunit">import javax.crypto.BadPaddingException;<br>import javax.crypto.Cipher;<br>import javax.crypto.IllegalBlockSizeException;<br>import javax.crypto.NoSuchPaddingException;<br>import java.io.*;<br>import java.security.*;<br><br>public class RSAKeyPairGenerator &#123;<br>    private PrivateKey privateKey;<br>    private PublicKey publicKey;<br><br>    public RSAKeyPairGenerator() throws NoSuchAlgorithmException &#123;<br>        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(&quot;RSA&quot;);<br>        keyGen.initialize(2048);<br>        KeyPair pair = keyGen.generateKeyPair();<br>        this.privateKey = pair.getPrivate();<br>        this.publicKey = pair.getPublic();<br>    &#125;<br><br>    // 将byte 写入文件<br>    public void byte2File(String path, byte[] data) throws IOException &#123;<br>        File f = new File(path);<br>        f.getParentFile().mkdirs();<br><br>        FileOutputStream fos = new FileOutputStream(f);<br>        fos.write(data);<br>        fos.flush();<br>        fos.close();<br>    &#125;<br><br>    public PrivateKey getPrivateKey() &#123;<br>        return privateKey;<br>    &#125;<br><br>    public PublicKey getPublicKey() &#123;<br>        return publicKey;<br>    &#125;<br><br>    // 加密数据<br>    public byte[] encryptPri(byte[] data, PrivateKey privateKey) throws BadPaddingException, IllegalBlockSizeException, InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException &#123;<br>        Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);<br>        cipher.init(Cipher.ENCRYPT_MODE, this.privateKey);<br>        return cipher.doFinal(data);<br>    &#125;<br><br>    public static void main(String[] args) throws NoSuchAlgorithmException, IOException, IllegalBlockSizeException, InvalidKeyException, NoSuchPaddingException, BadPaddingException &#123;<br>        RSAKeyPairGenerator PairGenerator = new RSAKeyPairGenerator();<br>        //byte[] data = &#123;<span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>, 0, 77, 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127, 0, 0, 0, 1, 43, 16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span> &#125;;<br>        // byte[] data =&#123;<br>        //         <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>        //         0, 77, 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>,<br>        //         127,<br>        //         0, 0, 0, 1,<br>        //         43,<br>        //         16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        //         16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        //         16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        //         16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span><br>        // &#125;; // 4.3<br>        byte[] data=&#123;<br>                <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>                0, <span class="hljs-string">-54</span>,<br>                1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127,<br>                23, 80, 101, <span class="hljs-string">-22</span>,<br>                47,<br>                16, 27, <span class="hljs-string">-27</span>, <span class="hljs-string">-66</span>, 82, <span class="hljs-string">-58</span>, 37, 92, 51, 85, <span class="hljs-string">-114</span>, <span class="hljs-string">-118</span>, 28, <span class="hljs-string">-74</span>, 103, <span class="hljs-string">-53</span>, 6,<br>                16, <span class="hljs-string">-128</span>, <span class="hljs-string">-29</span>, 42, 116, 32, 96, <span class="hljs-string">-72</span>, <span class="hljs-string">-124</span>, 65, <span class="hljs-string">-101</span>, <span class="hljs-string">-96</span>, <span class="hljs-string">-63</span>, 113, <span class="hljs-string">-55</span>, <span class="hljs-string">-86</span>, 118,<br>                16, <span class="hljs-string">-78</span>, 13, 72, 122, <span class="hljs-string">-35</span>, <span class="hljs-string">-44</span>, 113, 52, 24, <span class="hljs-string">-14</span>, <span class="hljs-string">-43</span>, <span class="hljs-string">-93</span>, <span class="hljs-string">-82</span>, 2, <span class="hljs-string">-89</span>, <span class="hljs-string">-96</span>,<br>                16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span>,<br>                16, 94, <span class="hljs-string">-104</span>, 25, 74, 1, <span class="hljs-string">-58</span>, <span class="hljs-string">-76</span>, <span class="hljs-string">-113</span>, <span class="hljs-string">-91</span>, <span class="hljs-string">-126</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-87</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-69</span>, <span class="hljs-string">-110</span>, <span class="hljs-string">-42</span>,<br>                16, <span class="hljs-string">-13</span>, <span class="hljs-string">-114</span>, <span class="hljs-string">-77</span>, <span class="hljs-string">-47</span>, <span class="hljs-string">-93</span>, 53, <span class="hljs-string">-78</span>, 82, <span class="hljs-string">-75</span>, <span class="hljs-string">-117</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-34</span>, <span class="hljs-string">-127</span>, <span class="hljs-string">-75</span>, 66,<br>                0, 0, 0, 24,<br>                105, 100, 118, 121, 85, 97, 77, 68, 75, 117, 98, 87, 87, 52, 84, 76, 51, 105, 80, 106, 66, 119, 61, 61,<br>                16, <span class="hljs-string">-71</span>, <span class="hljs-string">-86</span>, 51, 8, 10, 90, <span class="hljs-string">-112</span>, 49, 62, <span class="hljs-string">-15</span>, <span class="hljs-string">-99</span>, <span class="hljs-string">-64</span>, 98, 125, 46, <span class="hljs-string">-95</span>,<br>                28, 115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47, 115, 103, 118, 78, 97, 103, 61, 61, 113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104,<br>                16, <span class="hljs-string">-122</span>, 56, <span class="hljs-string">-75</span>, 17, <span class="hljs-string">-32</span>, 91, 85, 123, <span class="hljs-string">-7</span>, 112, <span class="hljs-string">-60</span>, 24, 53, 109, 68, <span class="hljs-string">-12</span><br>        &#125;; // 4.7<br>        byte[] rsaByte = PairGenerator.encryptPri(data, PairGenerator.getPrivateKey());<br>        PairGenerator.byte2File(&quot;RSA/cobaltstrike.auth&quot;, rsaByte);<br>        PairGenerator.byte2File(&quot;RSA/authkey.private&quot;, PairGenerator.getPrivateKey().getEncoded());<br>        PairGenerator.byte2File(&quot;RSA/authkey.pub&quot;, PairGenerator.getPublicKey().getEncoded());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​将<code>RSA</code>目录下的密钥，复制到<code>src/resources</code>目录下，同时将<code>decompiled_src/cobaltstrike-client/common/AuthCrypto.java</code>复制到<code>src/common/AuthCrypto</code>，计算<code>authkey.pub</code>的md5，并替换<code>src/common/AuthCrypto</code>第28行的数值。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">certutil</span> -hashfile authkey.pub MD5<br></code></pre></td></tr></table></figure><p>最后将<code>RSA/cobaltstrike.auth</code>复制到<code>out</code>文件下，和编译好的jar包同一目录。</p><h3 id="CobaltStrike-server-破解"><a href="#CobaltStrike-server-破解" class="headerlink" title="CobaltStrike server 破解"></a>CobaltStrike server 破解</h3><p>​与CobaltStrike client类似，CobaltStrike server端同样需要替换<code>authkey.pub</code>文件和<code>authkey.pub</code>的MD5，由于CobaltStrike 4.7版本以后，为了防破解，CobaltStrike server端变成了二进制文件<code>TeamServerImage</code>，因此我们可以使用<code>winhex</code>或者<code>010 Editor</code>直接对二进制文件进行修改。</p><ul><li><p>修改<code>authkey.pub</code>。从CobaltStrike client中提取官方<code>resources/authkey.pub</code>，使用<code>winhex</code>或者<code>010 Editor</code>复制二进制数据并在<code>TeamServerImage</code>全局搜索（大概位置在<code>0x48F2570</code>附近），例如CobaltStrike 4.7的<code>authkey.pub</code>的数据如下，将其修改为上面自己认证的<code>authkey.pub</code>内容即可。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">30820122300d</span>06092A8648<span class="hljs-number">86F70D0101</span>.....<br></code></pre></td></tr></table></figure></li><li><p>修改<code>authkey.pub</code>的MD5，从CobaltStrike client中的<code>/common/AuthCrypto</code>提取第28行的原始MD5数值，使用<code>winhex</code>或者<code>010 Editor</code>复制二进制数据并在<code>TeamServerImage</code>全局搜索（大概位置在0x3e08120附近），例如CobaltStrike 4.7的<code>authkey.pub</code>的数据为<code>8bb4df00c120881a1945a43e2bb2379e</code>，将其修改为上面自己认证的<code>authkey.pub</code>的MD5即可。</p></li><li><p>可以使用以下python脚本一键替换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CalcMD5</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>):<br>    md5 = hashlib.md5()<br>    md5.update(data)<br>    <span class="hljs-keyword">return</span> md5.hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReplaceData</span>(<span class="hljs-params">data, original_data, replacement_data</span>):<br>    pos = data.find(original_data)<br>    <span class="hljs-keyword">while</span> pos != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(replacement_data)):<br>            data[pos+i] = replacement_data[i]<br>        pos = data.find(original_data)<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Crack</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./TeamServerImage&#x27;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f1, <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./TeamServerImageCrack&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<span class="hljs-keyword">as</span> f2:<br>        dataSrc = src.read()<br>        dataDst = dst.read()<br>        md5Src = CalcMD5(dataSrc)<br>        md5Dst = CalcMD5(dataDst)<br>        data = <span class="hljs-built_in">bytearray</span>(f1.read())<br><br>        ReplaceData(data, md5Src.encode(), md5Dst.encode())<br>        ReplaceData(data, dataSrc, dataDst)<br>        f2.write(data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parseArgs</span>():<br>    parser = ArgumentParser(<br>        prog=<span class="hljs-string">&#x27;crack.py&#x27;</span>, description=<span class="hljs-string">&#x27;Crack TeamServerImage&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;--src&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;origin authkey.pub file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-d&#x27;</span>, <span class="hljs-string">&#x27;--dst&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;crack authkey.pub file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-t&#x27;</span>, <span class="hljs-string">&#x27;--target&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;crack TeamServerImage file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    args = parseArgs()<br>    Crack(args.src, args.dst)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">./crack.py -s authkey_orign.<span class="hljs-keyword">pub</span> -d authkey_crack.<span class="hljs-keyword">pub</span> -t <span class="hljs-type">TeamServerImage</span><br># authkey_orign.<span class="hljs-keyword">pub</span> 官方原版公钥aythkey.<span class="hljs-keyword">pub</span><br># authkey_crack.<span class="hljs-keyword">pub</span> 子签证公钥aythkey.<span class="hljs-keyword">pub</span><br># <span class="hljs-type">TeamServerImage</span> 官方原版<span class="hljs-type">TeamServerImage</span><br># output <span class="hljs-type">TeamServerImageCrack</span><br></code></pre></td></tr></table></figure></li><li><p>服务端程序启动方法：创建bash脚本，启动即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Start Cobalt Strike Team Server</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># make pretty looking messages (thanks Carlos)</span><br><span class="hljs-keyword">function</span> print_good () &#123;<br>    echo -e <span class="hljs-string">&quot;\x1B[01;32m[+]\x1B[0m $1&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> print_error () &#123;<br>    echo -e <span class="hljs-string">&quot;\x1B[01;31m[-]\x1B[0m $1&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> print_info () &#123;<br>    echo -e <span class="hljs-string">&quot;\x1B[01;34m[*]\x1B[0m $1&quot;</span><br>&#125;<br><br><span class="hljs-comment"># check that we&#x27;re r00t</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$UID</span> -ne <span class="hljs-number">0</span> ]; then<br>print_error <span class="hljs-string">&quot;Superuser privileges are required to run the team server&quot;</span><br><span class="hljs-keyword">exit</span><br>fi<br><br><span class="hljs-comment"># check if java is available...</span><br><span class="hljs-keyword">if</span> [ $(command -v java) ]; then<br>true<br><span class="hljs-keyword">else</span><br>print_error <span class="hljs-string">&quot;java is not in \$PATH&quot;</span><br>echo <span class="hljs-string">&quot;    is Java installed?&quot;</span><br><span class="hljs-keyword">exit</span><br>fi<br><br><span class="hljs-comment"># check if keytool is available...</span><br><span class="hljs-keyword">if</span> [ $(command -v keytool) ]; then<br>true<br><span class="hljs-keyword">else</span><br>print_error <span class="hljs-string">&quot;keytool is not in \$PATH&quot;</span><br>echo <span class="hljs-string">&quot;    install the Java Developer Kit&quot;</span><br><span class="hljs-keyword">exit</span><br>fi<br><br><span class="hljs-comment"># generate a certificate</span><br><span class="hljs-comment"># naturally you&#x27;re welcome to replace this step with your own permanent certificate.</span><br><span class="hljs-comment"># just make sure you pass -Djavax.net.ssl.keyStore=&quot;/path/to/whatever&quot; and</span><br><span class="hljs-comment"># -Djavax.net.ssl.keyStorePassword=&quot;password&quot; to java. This is used for setting up</span><br><span class="hljs-comment"># an SSL server socket. Also, the SHA-1 digest of the first certificate in the store</span><br><span class="hljs-comment"># is printed so users may have a chance to verify they&#x27;re not being owned.</span><br><span class="hljs-keyword">if</span> [ -e ./cobaltstrike.store ]; then<br>print_info <span class="hljs-string">&quot;Will use existing X509 certificate and keystore (for SSL)&quot;</span><br><span class="hljs-keyword">else</span><br>print_info <span class="hljs-string">&quot;Generating X509 certificate and keystore (for SSL)&quot;</span><br>keytool -keystore ./cobaltstrike.store -storepass <span class="hljs-number">123456</span> -keypass <span class="hljs-number">123456</span> -genkey -keyalg RSA -alias cobaltstrike -dname <span class="hljs-string">&quot;CN=Microsoft IT TLS CA 5, OU=Microsoft IT, O=Microsoft Corporation, L=Redmond, S=Washington, C=US&quot;</span><br>fi<br><br>.<span class="hljs-regexp">/TeamServerImage -Dcobaltstrike.server_port=43681 -Dcobaltstrike.server_bindto=0.0.0.0 -Djavax.net.ssl.keyStore=./</span>cobaltstrike.store -Djavax.net.ssl.keyStorePassword=<span class="hljs-number">123456</span> teamserver $*<br></code></pre></td></tr></table></figure></li></ul><h3 id="CobaltStrike-4-9破解说明"><a href="#CobaltStrike-4-9破解说明" class="headerlink" title="CobaltStrike 4.9破解说明"></a>CobaltStrike 4.9破解说明</h3><p>​在<code>CobaltStrike破解</code>中，我们介绍了<code>CobaltStrike</code>破解过程，该方法正对<code>CobaltStrike 4.9</code>之前的版本是完全成功的，但在<code>CobaltStrike 4.9 server</code>版本中<code>server</code>端加入更多验证，需要额外的一些操作，因此有了本节<code>CobaltStrike server 4.9补充破解</code>，<strong>注意，本节需要在<code>CobaltStrike</code>破解过程的基础上进行</strong>。</p><ul><li>使用IDA打开<code>TeamServerImage</code>，定位到<code>0x0000000000BC8DE7</code>，可以看到<code>Arrays_copyOfRange</code>函数的参数为256和512，表示取<code>cobaltstrike.auth</code>文件的256到512字节，通过<code>common_AuthCrypto_decrypt2</code>进行解密处理，<code>common_AuthCrypto_decrypt2</code>的解密逻辑暂时还未破解成功，因此。我们直接<code>nop</code>掉就行，直接从<code>cobaltstrike.auth</code>文件中读取解密后的内容即可。</li></ul><p><img src="https://img-blog.csdnimg.cn/direct/7350b52f29f540b8a901b4f91a8e34c3.png" alt="image-20231023183422779"></p><p><img src="https://img-blog.csdnimg.cn/direct/f88598e8b22041e6a03550162a9ed235.png" alt="image-20231023183730904"></p><p>​这里我也写了一个python脚本，一键破解原版TeamServeImage：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> re<br><br><br>authkey_b64 = <span class="hljs-string">&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkgtvDimGFGRAs2rwqZ7EOnLJknr4LNtQwZ1n8PiXEegmnP//rdXal4VenANymQXZ1F6Ln3+98oFTWNQrxpDrau3NR5lMoELx41SxA46p/+ljNBqQ8+HMkxDlueImMbNgizI4uT9XV+UPB0mhv31v1FT+dMMKS/UKKhz/r9yoEgwmXTIfTGLUS6+GTfyvrjotN3xsJlx3aHtO1yL3bz0h4Jxz8v6DanuqBkz2K0T1r++ECqNopH0vtvWihLrmkDYm0ST+/NXLhd5djyYQuaEc9nYrip/iefs9BVFGBuKMUmSoT9+1bHp4GXWhloEq/5+w+UlYLI0pNNqVJVEgAtdiRwIDAQAB&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CalcMD5</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>):<br>    md5 = hashlib.md5()<br>    md5.update(data)<br>    <span class="hljs-keyword">return</span> md5.hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReplaceData</span>(<span class="hljs-params">data, original_data, replacement_data</span>):<br>    pos = data.find(original_data)<br>    <span class="hljs-keyword">while</span> pos != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(replacement_data)):<br>            data[pos+i] = replacement_data[i]<br>        pos = data.find(original_data)<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Crack</span>(<span class="hljs-params">dst</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./TeamServerImage&#x27;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f1, <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./TeamServerImageCrack&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<span class="hljs-keyword">as</span> f2:<br>        dataSrc = base64.b64decode(authkey_b64)<br>        dataDst = dst.read()<br>        md5Src = CalcMD5(dataSrc)<br>        md5Dst = CalcMD5(dataDst)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(dataSrc))+<span class="hljs-string">&quot; &quot;</span>+md5Src)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(dataSrc))+<span class="hljs-string">&quot; &quot;</span>+md5Dst)<br>        data = <span class="hljs-built_in">bytearray</span>(f1.read())<br><br>        ReplaceData(data, md5Src.encode(), md5Dst.encode())<br>        ReplaceData(data, dataSrc, dataDst)<br>        ReplaceData(data,<span class="hljs-string">b&quot;\xE8\x36\x1d\x00\x00&quot;</span>,<span class="hljs-string">b&quot;\x90\x90\x90\x90\x90&quot;</span>)<br>        f2.write(data)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Crack TeamServerImage success.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parseArgs</span>():<br>    parser = ArgumentParser(<br>        prog=<span class="hljs-string">&#x27;crack.py&#x27;</span>, description=<span class="hljs-string">&#x27;Crack TeamServerImage&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;--src&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;origin authkey.pub file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">False</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-d&#x27;</span>, <span class="hljs-string">&#x27;--dst&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;crack authkey.pub file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-t&#x27;</span>, <span class="hljs-string">&#x27;--target&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;crack TeamServerImage file&#x27;</span>,<br>                        <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    args = parseArgs()<br>    Crack(args.dst)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><ul><li><p>密钥文件生成代码也需要进行稍微修改</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs subunit">import javax.crypto.BadPaddingException;<br>import javax.crypto.Cipher;<br>import javax.crypto.IllegalBlockSizeException;<br>import javax.crypto.NoSuchPaddingException;<br>import java.io.*;<br>import java.nio.file.Files;<br>import java.nio.file.Path;<br>import java.security.*;<br>import java.security.spec.InvalidKeySpecException;<br>import java.security.spec.PKCS8EncodedKeySpec;<br>import java.security.spec.X509EncodedKeySpec;<br><br>public class RSAKeyPairGenerator &#123;<br>    private PrivateKey privateKey;<br>    private PublicKey publicKey;<br>    public boolean chunk;<br><br>    public RSAKeyPairGenerator() throws NoSuchAlgorithmException &#123;<br>        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(&quot;RSA&quot;);<br>        keyGen.initialize(4096);<br>        KeyPair pair = keyGen.generateKeyPair();<br>        this.privateKey = pair.getPrivate();<br>        this.publicKey = pair.getPublic();<br>    &#125;<br><br>    public RSAKeyPairGenerator(String publicKeyPath, String privateKeyPath)<br>            throws NoSuchAlgorithmException, InvalidKeySpecException &#123;<br><br>        byte[] publicKeyByte = byteFromFile(publicKeyPath);<br>        byte[] privateKeyByte = byteFromFile(privateKeyPath);<br>        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);<br>        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyByte);<br>        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyByte);<br>        this.publicKey = keyFactory.generatePublic(publicKeySpec);<br>        this.privateKey = keyFactory.generatePrivate(privateKeySpec);<br><br>    &#125;<br><br>    // 将byte 写入文件<br>    public void byte2File(String path, byte[] data) throws IOException &#123;<br>        File f = new File(path);<br>        f.getParentFile().mkdirs();<br><br>        FileOutputStream fos = new FileOutputStream(f);<br>        fos.write(data);<br>        fos.flush();<br>        fos.close();<br>    &#125;<br><br>    // 从文件种读取bye<br>    public byte[] byteFromFile(String path) &#123;<br><br>        Path filePath = Path.of(path);<br><br>        try &#123;<br>            byte[] data = Files.readAllBytes(filePath);<br>            return data;<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        return new byte[1];<br><br>    &#125;<br><br>    public PrivateKey getPrivateKey() &#123;<br>        return privateKey;<br>    &#125;<br><br>    public PublicKey getPublicKey() &#123;<br>        return publicKey;<br>    &#125;<br><br>    public static byte[] subByte(byte[] original, int from, int to) &#123;<br>        int newLength = to - from;<br>        if (newLength &lt; 0)<br>            throw new IllegalArgumentException(from + &quot; &gt; &quot; + to);<br>        byte[] copy = new byte[newLength];<br>        System.arraycopy(original, from, copy, 0,<br>                Math.min(original.length - from, newLength));<br>        return copy;<br>    &#125;<br><br>    public static byte[] mergerByte(byte[] original1, byte[] original2) &#123;<br>        byte[] copy = new byte[original1.length + original2.length];<br>        System.arraycopy(original1, 0, copy, 0, original1.length);<br>        System.arraycopy(original2, 0, copy, original1.length, original2.length);<br>        return copy;<br>    &#125;<br><br>    // 加密数据<br>    public byte[] encryptPri(byte[] data, PrivateKey privateKey) throws BadPaddingException, IllegalBlockSizeException,<br>            InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, IOException &#123;<br>        Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);<br>        cipher.init(Cipher.ENCRYPT_MODE, this.privateKey);<br>        if (!this.chunk)<br>            return cipher.doFinal(data);<br>        int inputLen = data.length;<br>        int offLen = 0;<br>        ByteArrayOutputStream bops = new ByteArrayOutputStream();<br>        int i = 0;<br>        while (inputLen - offLen &gt; 0) &#123;<br>            byte[] cache;<br>            if (inputLen - offLen &gt; 245) &#123;<br>                cache = cipher.doFinal(data, offLen, 245);<br>            &#125; else &#123;<br>                cache = cipher.doFinal(data, offLen, inputLen - offLen);<br>            &#125;<br>            bops.write(cache);<br>            i++;<br>            offLen = 245 * i;<br>        &#125;<br><br>        return bops.toByteArray();<br>    &#125;<br><br>    // 解密数据<br>    public byte[] decryptPub(byte[] data, PublicKey publicKey) throws BadPaddingException, IllegalBlockSizeException,<br>            InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, IOException,<br>            InvalidKeySpecException &#123;<br><br>        Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);<br>        cipher.init(2, this.publicKey);<br>        return cipher.doFinal(data);<br>    &#125;<br><br>    public static void main(String[] args) throws NoSuchAlgorithmException, IOException, IllegalBlockSizeException,<br>            InvalidKeyException, NoSuchPaddingException, BadPaddingException, InvalidKeySpecException &#123;<br>        File file = new File(&quot;RSA/authkey.private&quot;);<br>        RSAKeyPairGenerator PairGenerator;<br>        if (file.exists())<br>            PairGenerator = new RSAKeyPairGenerator(&quot;RSA/authkey.pub&quot;, &quot;RSA/authkey.private&quot;);<br>        else &#123;<br>            PairGenerator = new RSAKeyPairGenerator();<br>            PairGenerator.byte2File(&quot;RSA/authkey.private&quot;,<br>                    PairGenerator.getPrivateKey().getEncoded());<br>            PairGenerator.byte2File(&quot;RSA/authkey.pub&quot;,<br>                    PairGenerator.getPublicKey().getEncoded());<br>        &#125;<br>        // byte[] data = &#123;<span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>, 0, 77, 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127, 0, 0, 0, 1, 43,<br>        // 16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span><br>        // &#125;;<br>        // byte[] data =&#123;<br>        // <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>        // 0, 77, 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>,<br>        // 127,<br>        // 0, 0, 0, 1,<br>        // 43,<br>        // 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        // 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        // 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,<br>        // 16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span><br>        // &#125;; // 4.3<br>        // byte[] data=&#123;<br>        // <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>        // 0, <span class="hljs-string">-54</span>,<br>        // 1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127,<br>        // 23, 80, 101, <span class="hljs-string">-22</span>,<br>        // 47,<br>        // 16, 27, <span class="hljs-string">-27</span>, <span class="hljs-string">-66</span>, 82, <span class="hljs-string">-58</span>, 37, 92, 51, 85, <span class="hljs-string">-114</span>, <span class="hljs-string">-118</span>, 28, <span class="hljs-string">-74</span>, 103, <span class="hljs-string">-53</span>, 6,<br>        // 16, <span class="hljs-string">-128</span>, <span class="hljs-string">-29</span>, 42, 116, 32, 96, <span class="hljs-string">-72</span>, <span class="hljs-string">-124</span>, 65, <span class="hljs-string">-101</span>, <span class="hljs-string">-96</span>, <span class="hljs-string">-63</span>, 113, <span class="hljs-string">-55</span>, <span class="hljs-string">-86</span>,<br>        // 118,<br>        // 16, <span class="hljs-string">-78</span>, 13, 72, 122, <span class="hljs-string">-35</span>, <span class="hljs-string">-44</span>, 113, 52, 24, <span class="hljs-string">-14</span>, <span class="hljs-string">-43</span>, <span class="hljs-string">-93</span>, <span class="hljs-string">-82</span>, 2, <span class="hljs-string">-89</span>, <span class="hljs-string">-96</span>,<br>        // 16, 58, 68, 37, 73, 15, 56, <span class="hljs-string">-102</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-61</span>, 18, <span class="hljs-string">-67</span>, <span class="hljs-string">-41</span>, 88, <span class="hljs-string">-83</span>, 43, <span class="hljs-string">-103</span>,<br>        // 16, 94, <span class="hljs-string">-104</span>, 25, 74, 1, <span class="hljs-string">-58</span>, <span class="hljs-string">-76</span>, <span class="hljs-string">-113</span>, <span class="hljs-string">-91</span>, <span class="hljs-string">-126</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-87</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-69</span>, <span class="hljs-string">-110</span>,<br>        // <span class="hljs-string">-42</span>,<br>        // 16, <span class="hljs-string">-13</span>, <span class="hljs-string">-114</span>, <span class="hljs-string">-77</span>, <span class="hljs-string">-47</span>, <span class="hljs-string">-93</span>, 53, <span class="hljs-string">-78</span>, 82, <span class="hljs-string">-75</span>, <span class="hljs-string">-117</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-34</span>, <span class="hljs-string">-127</span>,<br>        // <span class="hljs-string">-75</span>, 66,<br>        // 0, 0, 0, 24,<br>        // 105, 100, 118, 121, 85, 97, 77, 68, 75, 117, 98, 87, 87, 52, 84, 76, 51, 105,<br>        // 80, 106, 66, 119, 61, 61,<br>        // 16, <span class="hljs-string">-71</span>, <span class="hljs-string">-86</span>, 51, 8, 10, 90, <span class="hljs-string">-112</span>, 49, 62, <span class="hljs-string">-15</span>, <span class="hljs-string">-99</span>, <span class="hljs-string">-64</span>, 98, 125, 46, <span class="hljs-string">-95</span>,<br>        // 28, 115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47,<br>        // 115, 103, 118, 78, 97, 103, 61, 61, 113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104,<br>        // 16, <span class="hljs-string">-122</span>, 56, <span class="hljs-string">-75</span>, 17, <span class="hljs-string">-32</span>, 91, 85, 123, <span class="hljs-string">-7</span>, 112, <span class="hljs-string">-60</span>, 24, 53, 109, 68, <span class="hljs-string">-12</span><br>        // &#125;; // 4.7<br><br>        byte[] data = &#123;<br>                <span class="hljs-string">-54</span>, <span class="hljs-string">-2</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-45</span>,<br>                0, <span class="hljs-string">-11</span>,<br>                16, <span class="hljs-string">-1</span>, 12, <span class="hljs-string">-6</span>, 65, 7, <span class="hljs-string">-47</span>, 91, 48, 17, 61, 29, 43, <span class="hljs-string">-99</span>, <span class="hljs-string">-23</span>, 21, 109,<br>                34, <span class="hljs-string">-96</span>, 55, 34, <span class="hljs-string">-9</span>, 88, 123, <span class="hljs-string">-79</span>, 80, 106, <span class="hljs-string">-125</span>, <span class="hljs-string">-118</span>, 85, <span class="hljs-string">-85</span>, 2, <span class="hljs-string">-46</span>, 23, 65, 48, 102, <span class="hljs-string">-102</span>, <span class="hljs-string">-20</span>, <span class="hljs-string">-2</span>,<br>                <span class="hljs-string">-79</span>, <span class="hljs-string">-124</span>, <span class="hljs-string">-24</span>, <span class="hljs-string">-67</span>, <span class="hljs-string">-116</span>, 50, <span class="hljs-string">-96</span>, 4, 19, <span class="hljs-string">-57</span>, <span class="hljs-string">-125</span>, 76,<br>                49,<br>                1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127,<br>                58, <span class="hljs-string">-34</span>, 104, <span class="hljs-string">-79</span>,<br>                0, 0, 0, 24,<br>                78, 116, 90, 79, 86, 54, 74, 122, 68, 114, 57, 81, 107, 69, 110, 88, 54, 98, 111, 98, 80, 103, 61, 61,<br>                28, 115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47, 115, 103, 118, 78, 97, 103,<br>                61, 61, 113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104,<br>                <span class="hljs-string">-6</span>, <span class="hljs-string">-89</span>, 53, <span class="hljs-string">-104</span>, <span class="hljs-string">-110</span>, 84, <span class="hljs-string">-33</span>, 40, <span class="hljs-string">-58</span>, <span class="hljs-string">-6</span>, 77, 38, <span class="hljs-string">-11</span>, <span class="hljs-string">-106</span>, <span class="hljs-string">-63</span>, 78, <span class="hljs-string">-60</span>, 85, 78, 104, 120, 7,<br>                <span class="hljs-string">-94</span>, 68, 45, <span class="hljs-string">-23</span>, <span class="hljs-string">-118</span>, 111, 91, 26, <span class="hljs-string">-125</span>, <span class="hljs-string">-52</span>, 113, <span class="hljs-string">-113</span>, 57, 90, 63, <span class="hljs-string">-124</span>, <span class="hljs-string">-88</span>, 71, <span class="hljs-string">-81</span>, 22, <span class="hljs-string">-4</span>, 6,<br>                <span class="hljs-string">-37</span>, <span class="hljs-string">-32</span>, <span class="hljs-string">-61</span>, 96, 27, <span class="hljs-string">-20</span>, <span class="hljs-string">-120</span>, 111, 70, 106, 16, 59, 88, <span class="hljs-string">-47</span>, <span class="hljs-string">-13</span>, <span class="hljs-string">-118</span>, 37, <span class="hljs-string">-48</span>, <span class="hljs-string">-103</span>, <span class="hljs-string">-128</span>, <span class="hljs-string">-47</span>, 6,<br>                25, <span class="hljs-string">-123</span>, 8, <span class="hljs-string">-126</span>, 10, <span class="hljs-string">-12</span>, 112, <span class="hljs-string">-84</span>, <span class="hljs-string">-97</span>, 126, <span class="hljs-string">-62</span>, 90, 105, <span class="hljs-string">-64</span>, <span class="hljs-string">-119</span>, <span class="hljs-string">-10</span>, 68, <span class="hljs-string">-128</span>, <span class="hljs-string">-121</span>, 95, 82,<br>                <span class="hljs-string">-110</span>, <span class="hljs-string">-25</span>, <span class="hljs-string">-31</span>, 40, <span class="hljs-string">-27</span>, 59, <span class="hljs-string">-89</span>, 71, <span class="hljs-string">-60</span>, 127, 91, <span class="hljs-string">-51</span>, <span class="hljs-string">-8</span>, 63, 9, 35, <span class="hljs-string">-55</span>, 60, 124, 49, <span class="hljs-string">-6</span>, <span class="hljs-string">-123</span>, <span class="hljs-string">-92</span>,<br>                79, <span class="hljs-string">-21</span>, 37, <span class="hljs-string">-13</span>, <span class="hljs-string">-23</span>, 76, <span class="hljs-string">-42</span>, 74, <span class="hljs-string">-111</span>, <span class="hljs-string">-4</span>, <span class="hljs-string">-24</span>,<br>                // 4, 5, 33, 0, <span class="hljs-string">-35</span>, <span class="hljs-string">-94</span>, <span class="hljs-string">-25</span>, <span class="hljs-string">-37</span>, 60, <span class="hljs-string">-88</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-15</span>,<br>                // 64, 74, <span class="hljs-string">-11</span>, <span class="hljs-string">-84</span>, <span class="hljs-string">-86</span>, <br><br>                // 120, 39, <span class="hljs-string">-110</span>, 119, // TeamServerImage header<br>                // 0, <span class="hljs-string">-56</span>,<br>                50, 66, 104, <span class="hljs-string">-29</span>, 106, 19, <span class="hljs-string">-15</span>, 10, <span class="hljs-string">-88</span>, <span class="hljs-string">-38</span>, 50, <span class="hljs-string">-113</span>, 50, <span class="hljs-string">-124</span>, <span class="hljs-string">-108</span>, 127, 107, <span class="hljs-string">-35</span>, 105, 20, <span class="hljs-string">-47</span>, 48, 68, 91, 86, 69, <span class="hljs-string">-110</span>, 6, 16, <span class="hljs-string">-97</span>, <span class="hljs-string">-124</span>, 113, <span class="hljs-string">-103</span>, <span class="hljs-string">-48</span>, <span class="hljs-string">-73</span>, 124, <span class="hljs-string">-6</span>, <span class="hljs-string">-21</span>, <span class="hljs-string">-24</span>, 66, 11, <span class="hljs-string">-104</span>, 51, 35, 59, <span class="hljs-string">-45</span>, 52, <span class="hljs-string">-122</span>, 7, 50, 80,<br><br>                1, <span class="hljs-string">-55</span>, <span class="hljs-string">-61</span>, 127,<br>                58, <span class="hljs-string">-34</span>, 104, <span class="hljs-string">-79</span>,<br>                49,<br>                0, 0, 0, 24,<br>                78, 116, 90, 79, 86, 54, 74, 122, 68, 114, 57, 81, 107, 69, 110, 88, 54, 98, 111, 98, 80, 103, 61, 61,<br>                28, 115, 53, 57, 108, 53, 105, 113, 49, 101, 106, 90, 51, 79, 81, 100, 47, 115, 103, 118, 78, 97, 103,<br>                61, 61,<br>                113, <span class="hljs-string">-112</span>, <span class="hljs-string">-42</span>, 104,<br>                16, <span class="hljs-string">-1</span>, 12, <span class="hljs-string">-6</span>, 65, 7, <span class="hljs-string">-47</span>, 91, 48, 17, 61, 29, 43, <span class="hljs-string">-99</span>, <span class="hljs-string">-23</span>, 21, 109,<br>                34, 65, <span class="hljs-string">-7</span>, <span class="hljs-string">-74</span>, 111, 41, <span class="hljs-string">-12</span>, 41, <span class="hljs-string">-53</span>, <span class="hljs-string">-85</span>, <span class="hljs-string">-120</span>, <span class="hljs-string">-19</span>, <span class="hljs-string">-60</span>, 107, <span class="hljs-string">-108</span>, 65, 65, 25, <span class="hljs-string">-84</span>, 73, 56, <span class="hljs-string">-126</span>, <span class="hljs-string">-18</span>, <span class="hljs-string">-37</span>, <span class="hljs-string">-113</span>, 38, 19, 115, <span class="hljs-string">-24</span>, <span class="hljs-string">-90</span>, <span class="hljs-string">-105</span>, <span class="hljs-string">-30</span>, 127, <span class="hljs-string">-17</span>, <span class="hljs-string">-105</span>, 87, <span class="hljs-string">-94</span>, <span class="hljs-string">-102</span>, 37, 22, <span class="hljs-string">-26</span>, 34, <br>                <br>                <br>                84, 7, 46, <span class="hljs-string">-84</span>, <span class="hljs-string">-88</span>, <span class="hljs-string">-75</span>, <span class="hljs-string">-10</span>, 30, 75, <span class="hljs-string">-45</span>, 69, <span class="hljs-string">-31</span>, 70, <span class="hljs-string">-104</span>, <span class="hljs-string">-53</span>, 91,<br>                1, <span class="hljs-string">-67</span>, <span class="hljs-string">-87</span>, 4, 6, <span class="hljs-string">-33</span>, <span class="hljs-string">-64</span>, <span class="hljs-string">-115</span>, 50, 79, <span class="hljs-string">-13</span>, 39, <span class="hljs-string">-85</span>, 44, 27, <span class="hljs-string">-33</span>, <span class="hljs-string">-54</span>, <span class="hljs-string">-112</span>, <span class="hljs-string">-21</span>, <span class="hljs-string">-56</span>, <span class="hljs-string">-84</span>, 77, <span class="hljs-string">-46</span>,<br>                <span class="hljs-string">-58</span>, <span class="hljs-string">-62</span>, <span class="hljs-string">-107</span>, 50, <span class="hljs-string">-55</span>, 56, <span class="hljs-string">-53</span>, 35, <span class="hljs-string">-56</span>, 96, 95, 86, 117, <span class="hljs-string">-107</span>, <span class="hljs-string">-103</span>, <span class="hljs-string">-1</span>, <span class="hljs-string">-89</span>, <span class="hljs-string">-58</span>, <span class="hljs-string">-92</span>, <span class="hljs-string">-63</span>, <span class="hljs-string">-6</span>, 20,<br>                91, 120, <span class="hljs-string">-26</span>, 25, 54, 17, <span class="hljs-string">-107</span>, 99, <span class="hljs-string">-4</span>, <span class="hljs-string">-109</span>, <span class="hljs-string">-39</span>, <span class="hljs-string">-89</span>, 125, <span class="hljs-string">-105</span>, <span class="hljs-string">-14</span>, <span class="hljs-string">-99</span>, <span class="hljs-string">-73</span>, <span class="hljs-string">-15</span>, 59,<br>        &#125;; // 4.9<br><br>        PairGenerator.chunk = true;<br>        System.out.println(data.length);<br>        byte[] rsaByte = PairGenerator.encryptPri(subByte(data,0,245), PairGenerator.getPrivateKey());<br>        System.out.println(rsaByte.length);<br>        PairGenerator.byte2File(&quot;RSA/cobaltstrike.auth&quot;, mergerByte(rsaByte,subByte(data, 245, 245<span class="hljs-string">+256</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://github.com/atomxw/cobaltstrike4.5_cdf">https://github.com/atomxw/cobaltstrike4.5_cdf</a></p><h2 id="去除反调试"><a href="#去除反调试" class="headerlink" title="去除反调试"></a>去除反调试</h2><p>​cs的反调试代码主要就是遍历运行参数，查看是否包含<code>-javaagent:</code>，因此直接注释掉此处代码即可，可以直接全局文件内容搜索<code>-javaagent:</code>，以下为所有包含反调试代码的函数。</p><ul><li><code>aggressor.Aggressor.A(String[])</code></li><li><code>aggressor.dialogs.ConnectDialog.A()</code></li><li><code>aggressor.dialogs.ExportReportDialog.dialogAction</code></li><li><code>aggressor.dialogs.GoldenTicketDialog.B</code></li><li><code>aggressor.dialogs.PayloadGeneratorDialog.E</code></li><li><code>aggressor.dialogs.ScListenerDialog.C()</code></li><li><code>aggressor.windows.CortanaConsole.CortanaConsole</code></li><li><code>aggressor.windows.ScriptManager.actionPerformed</code></li><li><code>aggressor.windows.SOCKSBroser.actionPerformed</code></li><li><code>commom.BaseArtifactUtils.A</code></li></ul><h2 id="去除文件完整性验证"><a href="#去除文件完整性验证" class="headerlink" title="去除文件完整性验证"></a>去除文件完整性验证</h2><p><strong>第一次验证</strong></p><p>​Aggressor首先<code>checkui</code>校验完整性，主要是对几个加密函数的完整性校验；<code>checkLicenseGUI</code>用于检测认证文件的可用性，包括证书是否合法、是否过期等。</p><p><img src="https://img-blog.csdnimg.cn/direct/20f2654a7eb54883ad6bd2121166d99e.png" alt="image-20230925155240513"></p><p><code>checkui</code>关键函数为<code>commom.Starter.initializeStarter</code>函数校验完整性，。</p><p><img src="https://img-blog.csdnimg.cn/direct/4e9ee1f5215c40508cebb47d5c5a4a8d.png" alt="image-20230925155440119"></p><p>在<code>A</code>函数中，Var5为crc校验码，var4为校验class，其实现主要是在<code>Initializer.isOK(var1, var3, var4, var5, true)</code>。</p><p><img src="https://img-blog.csdnimg.cn/direct/512b4089f6b247acbd37768a994efc7a.png" alt="image-20230925155703184"></p><p><code>Initializer.isFileOK(var1, var4, var5, true)</code>函数中通过获取zipfile（jar包通过zip格式压缩）也就是本jar包内的文件获取crc并比较最开始的crc来确保文件未更改。所有校验的文件包括：</p><ul><li><code>common/AuthCrypto.class</code></li><li><code>resources/authkey.pub</code></li><li><code>common/License.class</code></li><li><code>common/Authorization.class</code></li><li><code>common/SleevedResource.class</code></li><li><code>common/AggressorInfo.class</code></li><li><code>dns/SleeveSecurity.class</code></li><li><code>common/BaseArtifactUtils.class</code></li><li><code>common/BaseResourceUtils.class</code></li><li><code>aggressor/dialogs/PayloadGeneratorDialog.class</code></li></ul><p>​如果对上述文件有所修改的话，请同时修改<code>initializeStarter</code>函数中的crc验证码，或者直接<code>initializeStarter</code>函数返回值设为true，一劳永逸。</p><p><strong>第二次验证</strong></p><p>​第二次完整性验证位于<code>aggressor.ui.UseLookAndFeel.A(Class var0)</code>，这里是base64解码字符串，字符串为校验的文件名，再用crc校验进行文件的二次校验，使用反射动态调用函数<code>common.CommonUtils.validClassIntegrity()</code>，此处验证文件包括：</p><ul><li><code>common.CommonUtils</code></li><li><code>common.Authorization</code></li><li><code>common.AuthCrypto</code></li><li><code>common.DataParser</code></li><li><code>common.SleevedResource</code></li><li><code>dns.SleeveSecurity</code></li><li><code>aggressor.Aggressor</code></li><li><code>common.AggressorInfo</code></li><li><code>common.Starter</code></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/5fffa0d83154442b985bf6dec1f937e5.png" alt="image-20230925162610451"></p><p>同样的，可以直接暴力注释掉。</p><p><strong>第三次验证</strong></p><p>第三次完整性验证位于<code>aggressor.Aggressor</code>，此处验证与第一次验证函数调用相同，都是调用<code>commom.Starter.initializeStarter</code>，因此无需其他修改。</p><p><img src="https://img-blog.csdnimg.cn/direct/7310a58f963742eaa3ef060a02ca4802.png" alt="image-20230925162839842"></p><p><strong>第四次验证</strong></p><p>在<code>ConnectDialog</code>处，还存在第四处完整性校验，<code>ConnectDialog</code>初始化时调用<code>initialize</code>进行校验。</p><p><img src="https://img-blog.csdnimg.cn/direct/6947b419be274e609d2fc65c34b9b722.png" alt="image-20230925161514874"></p><p><img src="https://img-blog.csdnimg.cn/direct/f3129d96b1a54cf1bcea5e199381936e.png" alt="image-20230925161609042"></p><p>此处校验代码位于<code>commom.Starter2.A(Class var1)</code>，与第一次校验类似，同样是验证crc码，唯一不同是crc码位于<code>commom.Starter2.A(Object var1)</code>，此处验证文件包括：</p><ul><li><code>common/Starter.class</code></li><li><code>common/Initializer.class</code></li><li><code>aggressor/Aggressor.class</code></li><li><code>common/AggressorInfo.class</code></li></ul><p><img src="https://img-blog.csdnimg.cn/direct/9dbc77ded89e4b41936944bfe9235ab2.png" alt="image-20230925161955593"></p><h3 id="完整性验证文件列表"><a href="#完整性验证文件列表" class="headerlink" title="完整性验证文件列表"></a>完整性验证文件列表</h3><p>实际上类似的验证非常多，因此我们可以在整个项目中搜索<code>system.exit(1)</code>，查看与之相关的验证，以下罗列了部分验证位置：</p><ul><li><code>conslole.StatusBar.A(Class var0)</code></li><li><code>aggressor.Prefs.A(Class var0)</code></li><li><code>common.Helper.startHelper</code></li></ul><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.52pojie.cn/thread-1702583-1-1.html">https://www.52pojie.cn/thread-1702583-1-1.html</a></p><h2 id="CobaltStrike-生成ShellCode"><a href="#CobaltStrike-生成ShellCode" class="headerlink" title="CobaltStrike 生成ShellCode"></a>CobaltStrike 生成ShellCode</h2><p>​CS是使用Swing进行UI开发的，我们可以直接在<code>aggressor\dialogs</code>文件夹中直接找对话框对应操作类，例如<code>aggressor\dialogs\WindowsExecutableDialog.java</code>就是<code>Windows stage payload</code>的操作类。</p><p><code>dialogAction()</code>即为点击生成按钮后的触发函数，可以看到<code>dialogAction()</code>获取到架构，通过<code>ListenerUtils.getListener</code>获取监听器，之后通过<code>getPayloadStager()</code>获取payload，最后通过<code>sanveFile()</code>保存文件。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">protected</span> byte[] stager;<br><br><span class="hljs-keyword">public</span> WindowsExecutableDialog(AggressorClient var1) &#123;<br>   <span class="hljs-keyword">this</span>.client = var1;<br>&#125;<br><br><span class="hljs-keyword">public</span> void dialogAction(ActionEvent var1, Map var2) &#123;<br>   <span class="hljs-keyword">this</span>.options = var2;<br>   boolean var3 = DialogUtils.bool(var2, <span class="hljs-string">&quot;x64&quot;</span>);<br>   String var4 = DialogUtils.string(var2, <span class="hljs-string">&quot;listener&quot;</span>);<br>   ScListener var5 = ListenerUtils.getListener(<span class="hljs-keyword">this</span>.client, var4);<br>   <span class="hljs-keyword">if</span> (var5 == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.dialog.setVisible(<span class="hljs-literal">true</span>);<br>      DialogUtils.showError(<span class="hljs-string">&quot;A listener was not selected&quot;</span>);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">this</span>.stager = var5.getPayloadStager(var3 ? <span class="hljs-string">&quot;x64&quot;</span> : <span class="hljs-string">&quot;x86&quot;</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.stager.length == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">this</span>.dialog.setVisible(<span class="hljs-literal">true</span>);<br>         DialogUtils.showError(<span class="hljs-string">&quot;No &quot;</span> + (var3 ? <span class="hljs-string">&quot;x64&quot;</span> : <span class="hljs-string">&quot;x86&quot;</span>) + <span class="hljs-string">&quot; stager for &quot;</span> + var4);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         String var6 = var2.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;output&quot;</span>) + <span class="hljs-string">&quot;&quot;</span>;<br>         String var7 = <span class="hljs-string">&quot;&quot;</span>;<br>         <span class="hljs-keyword">if</span> (var6.indexOf(<span class="hljs-string">&quot;EXE&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>            var7 = <span class="hljs-string">&quot;artifact.exe&quot;</span>;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var6.indexOf(<span class="hljs-string">&quot;DLL&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>            var7 = <span class="hljs-string">&quot;artifact.dll&quot;</span>;<br>         &#125;<br><br>         SafeDialogs.saveFile((JFrame)<span class="hljs-literal">null</span>, var7, <span class="hljs-keyword">this</span>);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>getPayloadStager()</code>方法调用<code>aggressor\DataUtils.shellcode()</code>，最终在<code>stagers\Stagers.shellcode()</code>根据监听器类型动态生成<code>Stager</code>类，例如Beacon http监听器的<code>Stager</code>类为<code>BeaconHTTPStagerX64</code>，其继承自相应的<code>GenericHTTPStager</code>，并由<code>generate() </code>生成shellcode。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> byte[] getPayloadStager(String var1) &#123;<br>   <span class="hljs-keyword">return</span> Stagers.shellcode(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.getPayload(), var1);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> byte[] <span class="hljs-title function_">shellcode</span>(<span class="hljs-params"><span class="hljs-title class_">ScListener</span> var0, <span class="hljs-title class_">String</span> var1, <span class="hljs-title class_">String</span> var2</span>) &#123;<br>   <span class="hljs-title class_">GenericStager</span> var3 = A.<span class="hljs-title function_">resolve</span>(var0, var1, var2);<br>   <span class="hljs-keyword">return</span> var3 != <span class="hljs-literal">null</span> ? var3.<span class="hljs-title function_">generate</span>() : <span class="hljs-keyword">new</span> byte[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>GenericHTTPStager.generate()</code>中，程序读取<code>resources/httpstager64.bin</code>，并根据监听器的host和port等值组合为Packer，最终替换到多个X、Y占位的bin文件中，最后返回bytes[] 类型的shellcode。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">   <span class="hljs-keyword">public</span> byte[] generate() &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>         InputStream var1 = CommonUtils.resource(<span class="hljs-keyword">this</span>.getStagerFile());<br>         byte[] var2 = CommonUtils.readAll(var1);<br>         String var3 = CommonUtils.bString(var2);<br>         var1.close();<br>         var3 = var3 + <span class="hljs-keyword">this</span>.getListener().getStagerHost() + <span class="hljs-string">&#x27;\u0000&#x27;</span>;<br>         Packer var4 = new Packer();<br>         var4.little();<br>         var4.addShort(<span class="hljs-keyword">this</span>.getListener().getPort());<br>         AssertUtils.TestPatchS(var2, <span class="hljs-number">4444</span>, <span class="hljs-keyword">this</span>.getPortOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getPortOffset());<br>         var4 = new Packer();<br>         var4.little();<br>         var4.addInt(<span class="hljs-number">1453503984</span>);<br>         AssertUtils.TestPatchI(var2, <span class="hljs-number">1453503984</span>, <span class="hljs-keyword">this</span>.getExitOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getExitOffset());<br>         var4 = new Packer();<br>         var4.little();<br>         var4.addShort(<span class="hljs-keyword">this</span>.getStagePreamble());<br>         AssertUtils.TestPatchS(var2, <span class="hljs-number">5555</span>, <span class="hljs-keyword">this</span>.getSkipOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getSkipOffset());<br>         var4 = new Packer();<br>         var4.little();<br>         var4.addInt(<span class="hljs-keyword">this</span>.getConnectionFlags());<br>         AssertUtils.TestPatchI(var2, <span class="hljs-keyword">this</span>.isSSL() ? -<span class="hljs-number">2069876224</span> : -<span class="hljs-number">2074082816</span>, <span class="hljs-keyword">this</span>.getFlagsOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getFlagsOffset());<br>         String var5;<br>         <span class="hljs-keyword">if</span> (CommonUtils.isin(CommonUtils.repeat(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">303</span>), var3)) &#123;<br>            var5 = <span class="hljs-keyword">this</span>.getConfig().pad(<span class="hljs-keyword">this</span>.getHeaders() + <span class="hljs-string">&#x27;\u0000&#x27;</span>, <span class="hljs-number">303</span>);<br>            var3 = CommonUtils.replaceAt(var3, var5, var3.indexOf(CommonUtils.repeat(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">127</span>)));<br>         &#125;<br><br>         int var6 = var3.indexOf(CommonUtils.repeat(<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-number">79</span>), <span class="hljs-number">0</span>);<br>         var5 = <span class="hljs-keyword">this</span>.getConfig().pad(<span class="hljs-keyword">this</span>.getURI() + <span class="hljs-string">&#x27;\u0000&#x27;</span>, <span class="hljs-number">79</span>);<br>         var3 = CommonUtils.replaceAt(var3, var5, var6);<br>         <span class="hljs-keyword">return</span> CommonUtils.toBytes(var3 + <span class="hljs-keyword">this</span>.getConfig().getWatermark());<br>      &#125; <span class="hljs-keyword">catch</span> (IOException var7) &#123;<br>         MudgeSanity.logException(<span class="hljs-string">&quot;HttpStagerGeneric: &quot;</span> + <span class="hljs-keyword">this</span>.getStagerFile(), var7, <span class="hljs-literal">false</span>);<br>         <span class="hljs-keyword">return</span> new byte[<span class="hljs-number">0</span>];<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CVE-2022-39197"><a href="#CVE-2022-39197" class="headerlink" title="CVE-2022-39197"></a>CVE-2022-39197</h2><p>CVE-2022-39197是由于xss引起的，因此我们可以才采用转义手段，将传入的字符串及进行转义，避免xss攻击。</p><p>修改位置<code>common.BeaconEntry.update</code></p><p><img src="https://img-blog.csdnimg.cn/direct/abeca3947c3d49c7b35c2f1a7380fd3a.png" alt="image-20231001135114168"></p><p>提取自cs 4.8的转义代码<code>common.CommonHTMLUtils</code></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> common;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHTMLUtils</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">potentialXSS</span><span class="hljs-params">(String var0)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (var0 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&lt;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&gt;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&amp;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&#x27;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> var0.<span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-string">&quot;\&quot;&quot;</span>)</span></span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">potentialUserNameXSS</span><span class="hljs-params">(String var0)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (var0 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&lt;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&gt;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var0.contains(<span class="hljs-string">&quot;&amp;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> var0.<span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-string">&quot;\&quot;&quot;</span>)</span></span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function">String <span class="hljs-title">escapeHtml</span><span class="hljs-params">(String var0)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (var0 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> var1 = var0.length();<br>            <span class="hljs-keyword">int</span> var2 = (<span class="hljs-keyword">int</span>)((<span class="hljs-keyword">double</span>)var1 * <span class="hljs-number">1.3</span>);<br>            StringBuilder var3 = <span class="hljs-keyword">new</span> StringBuilder(var2);<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var4 = <span class="hljs-number">0</span>; var4 &lt; var1; ++var4) &#123;<br>                <span class="hljs-keyword">char</span> var5 = var0.charAt(var4);<br>                <span class="hljs-keyword">if</span> (var5 == <span class="hljs-string">&#x27;&lt;&#x27;</span>) &#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;lt;&quot;</span>);<br>                &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(var5 == <span class="hljs-string">&#x27;&gt;&#x27;</span>)</span> </span>&#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;gt;&quot;</span>);<br>                &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(var5 == <span class="hljs-string">&#x27;&quot;&#x27;</span>)</span> </span>&#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;quot;&quot;</span>);<br>                &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(var5 == <span class="hljs-string">&#x27;&amp;&#x27;</span>)</span> </span>&#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;amp;&quot;</span>);<br>                &#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(var5 &gt;= <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; var5 != <span class="hljs-string">&#x27;\&#x27;&#x27;</span>)</span> </span>&#123;<br>                    <span class="hljs-keyword">int</span> var6 = var5 &amp; <span class="hljs-string">&#x27;\uffff&#x27;</span>;<br>                    <span class="hljs-keyword">if</span> (var6 &gt; <span class="hljs-number">127</span>) &#123;<br>                        var3.append(<span class="hljs-string">&quot;&amp;#&quot;</span>).append(var6).append(<span class="hljs-string">&#x27;;&#x27;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        var3.append(var5);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    var3.append(<span class="hljs-string">&quot;&amp;#&quot;</span>).append(var5).append(<span class="hljs-string">&#x27;;&#x27;</span>);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">return</span> var3.<span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://cloud.tencent.com/developer/article/2220765">https://cloud.tencent.com/developer/article/2220765</a></p><h2 id="CobaltStrike-profile参数介绍"><a href="#CobaltStrike-profile参数介绍" class="headerlink" title="CobaltStrike profile参数介绍"></a>CobaltStrike profile参数介绍</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><ul><li><code>set sample_name &quot;name&quot;；</code>：设置配置文件名称，此处会显示在输出的报告中。</li><li><code>set sleeptime &quot;45000&quot;;</code>：设置休眠时间，单位毫秒。</li><li><code>set jitter &quot;49&quot;;</code>：设置抖动频率，单位%。</li><li><code>set data_jitter &quot;100&quot;;</code>：设置请求数据抖动大小，单位字节。</li><li><code>set useragent &quot;agent&quot;;</code>：设置请求的UA。</li></ul><h3 id="http-get"><a href="#http-get" class="headerlink" title="http-get"></a>http-get</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>​Beacon在执行后会通过get请求不断请求c2服务器以表明Beacon存活状态，http-get代码块中，client代表Beacon向服务器请求规则，server代表服务器向beacon端的响应规则，下面我们详细介绍个字段：</p><ul><li><p><code>set url &lt;url&gt;</code>：设置http-get通信所使用的url，如果设置多个，Beacon每次都会随机选择一个进行通信。</p></li><li><p><code>client</code>：Beacon向服务器请求规则。</p><ul><li><p><code>header</code>：设置http请求头</p></li><li><p><code>metadata</code>：设置元数据编码规则。</p><ul><li><p>CobaltStrike支持5中编码方案。RSA加密后的元数据经过编码处理后，可以方便地在网络协议中传输，CobaltStrike支持地编码方案为Base64、Base64url、Mask、NetBIOS、NetBIOSU，在<code>metadata</code>可以设置多种编码方案，每行一种，CobaltStrike会按照顺序依次进行编码。</p></li><li><p><code>prepend</code>：将指定字符串加载头部。</p></li><li><p><code>append</code>：将指定字符串附加在末尾。</p></li><li><p><code>header</code>：编码完成数据最终存放位置，例如<code>header &quot;Cookie&quot;</code>表示存放在请求头地<code>Cookie</code>字段，我们使用<code>c2lint</code>可以查看具体访问信息。实际上<code>header</code>这种关键字在CobaltStrike中被称为终止关键字，其他详细信息见终止关键字一节。</p><p>  ![image-20231102161129064](Cobalt Strike逆向&#x2F;images&#x2F;image-20231102161129064.png)</p></li></ul></li></ul></li><li><p><code>server</code>：server代表服务器向beacon端的响应规则，配置与<code>client</code>类似，这里不展开介绍。</p></li></ul><h3 id="http-post"><a href="#http-post" class="headerlink" title="http-post"></a>http-post</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>​Beacon在执行时一般会先通过http get请求与c2服务器建立连接，如果c2想要在Beacon中执行命令，会在get请求返回包中发送任务，其中包括此任务地id和任务的具体内容。Beacon在执行完任务后会通过http post请求回传结果，post请求中包括任务id和执行结果，因此在http-post规则配置中要比http-get多一个关于任务id的控制块。</p><ul><li>client<ul><li>id：配置任务id规则。<ul><li><code>parameter</code>：将数据存放在指定url参数中，例如<code>parameter &quot;id&quot;;</code>代表将任务id放在url参数中<code>?id=id</code>中。</li><li><code>output</code>：任务执行结果规则，例如<code>output &#123;base64;print;&#125;</code>表示将执行结果base64编码后存储在body中，<code>print</code>表示编码结束并指定数据存放位置。</li></ul></li></ul></li><li>server</li></ul><h3 id="其他规则"><a href="#其他规则" class="headerlink" title="其他规则"></a>其他规则</h3><h4 id="终止关键字"><a href="#终止关键字" class="headerlink" title="终止关键字"></a>终止关键字</h4><p>​数据编码完成后由终止关键字表明后续不要其他编码并指定存放位置，CobaltStrike支持的终止关键字有：</p><ul><li><code>header &quot;header&quot;</code>：将数据存放在指定HTTP请求头中。</li><li><code>parameter &quot;key&quot;</code>：将数据存放在指定URL请求参数中。</li><li><code>print</code>：将数据存放在http body中。</li><li><code>uri-append</code>：将数据直接拼接到URL后面</li></ul><blockquote><p><code>http-get.client.metadata</code>不能使用<code>print</code>，不在范围内。</p><p><code>http-get.server.output</code>、<code>http-post.server.output</code>、<code>http-stager.server.output</code>只能使用<code>print</code>终止关键字。</p></blockquote><h3 id="参考链接-3"><a href="#参考链接-3" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://wbglil.gitbook.io/cobalt-strike/cobalt-strikekuo-zhan/malleable-c2">Malleable C2</a></p><p><a href="https://blog.csdn.net/weixin_40412037/article/details/126208502">Cobalt Strike 的 Profile 文件解析</a></p><h2 id="Artifact-Kit安装"><a href="#Artifact-Kit安装" class="headerlink" title="Artifact Kit安装"></a>Artifact Kit安装</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​Artifact Kit 是一个制作免杀 EXE、DLL 和 Service EXE 的源代码框架，在 Cobalt Strike 的 <code>Help --&gt; Arsenal</code> 处可下载 Artifact Kit。</p><p>Cobalt Strike在生成木马时会自动调用Artifact Kit。</p><h3 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h3><ul><li>修改配置，在<code>/Arsenal/arsenal_kit.config</code>可以修改构建配置，默认只构建<code>artifact_kit</code>。</li><li>安装编译环境：<code>sudo apt-get install mingw-w64</code>。</li><li>构建工件：执行<code>/Arsenal/build_arsenal_kit.sh</code>，不报错的话会在<code>/Arsenal/</code>生成构建好的工件。</li><li>Load 加载 <code>/Arsenal/artifact/dist-peek/artifact.cna</code> 插件，之后在 <code>Attacks -&gt; Packages -&gt; Windows Executable</code> 中生成木马文件。</li><li>之后在<code>payloads -&gt; Windows Stager payload</code>正常生成木马即可，脚本会自动进行替换，当然可以在<code>Cobalt Strike -&gt; Script Console</code>查看到替换日志输出。</li></ul><h3 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h3><p>使用<code>Artifact Kit</code>生成的Stagerless马，竟然能够直接免杀火绒、360，上线直接没反应，啊这。。。。。</p><p><img src="https://img-blog.csdnimg.cn/direct/d58ce23f370140c98c77a60c1cbdf327.png" alt="image-20231029094155837"></p><p><img src="https://img-blog.csdnimg.cn/direct/9c7718b9bd1945cfb05e7bb60689d760.png" alt="image-20231029101609991"></p><p><img src="https://img-blog.csdnimg.cn/direct/cf7834605e184a28830e99e302b29b3b.png" alt="image-20231029101624166"></p><h3 id="疑似bug"><a href="#疑似bug" class="headerlink" title="疑似bug"></a>疑似bug</h3><p>​<code>kits/artifact/build.sh</code>似乎存在bug，报错<code>语法错误：无效的算术运算符</code>，按理说官方文件不应该会出现这种问题，可能是我linux环境有问题，大家各自构建一下，不报错就没问题，如果大家遇到同样的问题，可以将下面的函数替换掉<code>kits/artifact/build.sh</code>的同名函数。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros">function check_alignment () &#123;<br>   # This will check the file size <span class="hljs-keyword">and</span> <span class="hljs-built_in">print</span> an <span class="hljs-built_in">error</span> when the<br>   # size is <span class="hljs-keyword">not</span> a multiple of 4-bytes.<br>   # Same as the following command:<br>   #    ls -l dist-pipe | grep -v cna | awk <span class="hljs-string">&#x27;($5 % 4) != 0 &#123;print $5 &quot;\t&quot; $9 &quot;\t Is not 4-byte aligned.&quot;&#125;&#x27;</span><br>   <span class="hljs-attribute">files</span>=$(ls -l <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span> | egrep -v <span class="hljs-string">&quot;cna|total&quot;</span>)<br>   <span class="hljs-attribute">i</span>=-2;<br>   <span class="hljs-attribute">size</span>=0;<br>   <span class="hljs-attribute">file</span>=<span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;files&#125;</span> ; <span class="hljs-keyword">do</span><br>      <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> -lt 0 ] ; then<br>         # 前两次迭代跳过<br>         <span class="hljs-attribute">i</span>=$((i + 1))<br>         continue<br>      fi<br>      <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;i&#125;</span> == 4 ] ; then<br>         <span class="hljs-attribute">size</span>=<span class="hljs-variable">$&#123;f&#125;</span><br>      elif [ <span class="hljs-variable">$&#123;i&#125;</span> == 8 ] ; then<br>         <span class="hljs-attribute">file</span>=<span class="hljs-variable">$&#123;f&#125;</span><br>         <span class="hljs-keyword">if</span> [ $((<span class="hljs-variable">$&#123;size&#125;</span> % 4)) != 0 ] ; then<br>            print_warning <span class="hljs-string">&quot;[OPSEC] <span class="hljs-variable">$&#123;f&#125;</span> is not 4-byte aligned. Check the compiler options.&quot;</span><br>         fi<br>         <span class="hljs-attribute">i</span>=-8<br>      fi<br>      <span class="hljs-attribute">i</span>=$(($i + 1))<br>   done<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CobaltStrike通信过程详解"><a href="#CobaltStrike通信过程详解" class="headerlink" title="CobaltStrike通信过程详解"></a>CobaltStrike通信过程详解</h2><p>CobaltStrike通信流程一般步骤为：</p><ul><li>使用内置公钥加密aes密钥和beacon基础信息发送至服务端</li><li>服务端通过私钥解密后，通过获取到的aes密钥进行后续加密通信。</li></ul><p>这里我们直接先介绍beacon使用公钥加密的数据内容。</p><p>当服务端收到来自beacon的数据请求时，会将原始数据发送至<code>beacon.BeaconC2.process_beacon_metadata</code>函数进行处理：</p><p><img src="https://img-blog.csdnimg.cn/direct/4139400d240b4f54b0906f85d6945ed2.png" alt="image-20231203195958163"></p><p><code>this.getAsymmetricCrypto().decrypt(var3)</code>为私钥解密过程，跟进查看</p><p><img src="https://img-blog.csdnimg.cn/direct/3aebebb4b2a448f7ba2e177da3a3e36c.png" alt="image-20231203200137114"></p><p>这里展示的是CS4.5版本的<code>this.getAsymmetricCrypto().decrypt(var3)</code>，因为4.5版本后，CS就没有现成的服务端源码了，基本逻辑也大差不差，问题倒不是很大，可以看到经过<code>this.cipher.doFinal</code>解密数据存放在<code>var2</code>中，后续判断<code>Magic number</code>，以及读取了后续相应内容。</p><p>综上所诉，CS首次通信内容格式如下所示：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs abnf">struct &#123;<br>DWORD MagicNum<span class="hljs-comment">; // Magic Num, 默认48879</span><br>DWORD DataLen<span class="hljs-comment">;  // 接下来数据长度</span><br>BYTE [<span class="hljs-number">20</span>]<span class="hljs-comment">;</span><br>DWORD ClientID<span class="hljs-comment">;</span><br>DWORD ProcessID<span class="hljs-comment">;</span><br>WORD Port<span class="hljs-comment">;</span><br>BYTE Flag<span class="hljs-comment">; // 8bit，每bit代表含义如下（/前表示该比特为0表示含义）：/ / / / hith_pric:no/yes is64:no/yes barch:x86/x64 /</span><br>BYTE MajorVersion<span class="hljs-comment">;</span><br>BYTE MinorVersion<span class="hljs-comment">;</span><br>WORD Build<span class="hljs-comment">;</span><br>BYTE Base[<span class="hljs-number">4</span>]<span class="hljs-comment">;</span><br>BYTE Gmh[<span class="hljs-number">4</span>]<span class="hljs-comment">;</span><br>BYTE Gpa[<span class="hljs-number">4</span>]<span class="hljs-comment">;</span><br>DWORD IP<span class="hljs-comment">; // 小端存放，其余为大端存放</span><br><br>BYTE [] <span class="hljs-operator">=</span><span class="hljs-string">&quot;&lt;&lt;hostname&gt;&gt;\t&lt;&lt;user&gt;&gt;\t&lt;&lt;processName&gt;&gt;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TeamServerImage-逆向"><a href="#TeamServerImage-逆向" class="headerlink" title="TeamServerImage 逆向"></a>TeamServerImage 逆向</h2><p>​从CS4.5开始，CS服务端便使用Graalvm进行的加密处理，虽然Graalvm将大部分符号都进行了处理，但是函数的逻辑相对变化不大，因此我们可以通过client源代码判断部分函数特征，这里记录了原始函数对应的判断特征：</p><h3 id="common-AuthCrypto-decrypt"><a href="#common-AuthCrypto-decrypt" class="headerlink" title="common.AuthCrypto.decrypt"></a>common.AuthCrypto.decrypt</h3><p>在<code>common.AuthCrypto.decrypt</code>存在强特征，直接在<code>ida</code>中搜索<code>BB C0 FE CA</code>（-889274181对应的小端16进制）或<code>D3 C0 FE CA</code>（-889274157对应的小端16进制），存在<code>cmp</code>指令即为该处。</p><p><img src="https://img-blog.csdnimg.cn/direct/a16d9639fbf64560a5801f936478cfca.png" alt="image-20231203202921523"></p><p><img src="https://img-blog.csdnimg.cn/direct/b41fc02727784cd5b677b5277eee2743.png" alt="image-20231203203207426"></p><h3 id="dns-AsymmetricCrypto-decrypt"><a href="#dns-AsymmetricCrypto-decrypt" class="headerlink" title="dns.AsymmetricCrypto.decrypt"></a>dns.AsymmetricCrypto.decrypt</h3><p>在<code>dns.AsymmetricCrypto.decrypt</code>存在<code>Magic number</code>强特征，直接在<code>ida</code>中搜索<code>EF BE 00 00</code>（48879对应的小端16进制），存在<code>cmp</code>指令即为该处。</p><p><img src="https://img-blog.csdnimg.cn/direct/c265299c704d404dbe21bcddd98e0841.png" alt="image-20231203201622035"></p><p><img src="https://img-blog.csdnimg.cn/direct/43ae1d75ef6b465fafda059e48ca944e.png" alt="image-20231203201829001"></p><p>由于，服务端与客户端代码基本类似，因此我们可以以该函数为起点，逆向分析其他功能函数，做相应修改即可。</p><blockquote><p>实际上，存在更加简单方法，我们直接搜索替换二进制文件的RAS密钥就破解完成了，哈哈，偷鸡成功。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>渗透工具</category>
      
      <category>逆向</category>
      
      <category>教程文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cobalt Strike</tag>
      
      <tag>逆向破解</tag>
      
      <tag>教程</tag>
      
      <tag>渗透工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker构建教程</title>
    <link href="/2022/12/18/Docker%E6%9E%84%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2022/12/18/Docker%E6%9E%84%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Docker构建教程"><a href="#Docker构建教程" class="headerlink" title="Docker构建教程"></a>Docker构建教程</h1><h2 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h2><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>Docker运行所依赖的文件系统。对于Liunx而言，内核启动后会挂在<code>root</code>文件系统，而Docker镜像就相当于一个<code>root</code>文件系统，每个容器依赖的镜像不同，其内的文件系统也有所有不同。与传统镜像不同的是，Docker镜像除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些<strong>配置参数</strong>（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建后也不会被改变。此外，Docker镜像在构成上与普通镜像也有所不同，Docker镜像充分利用Union FS技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 <code>ISO</code> 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。这就是docker的分层结构。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>​容器可以理解为Docker镜像的运行状态，镜像是静态的定义，容器是镜像运行的实体。容器的实质是进程，但与普通进程不同的是：容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。</p><p>​容器跟Docker镜像一样都是采用的分层存储，每一个容器运行时，会以Docker镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。所有的文件写入操作，都应该使用 <a href="">数据卷（Volume）</a>、或者 <a href="">绑定宿主目录</a>，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><h2 id="Dockerfile定制镜像"><a href="#Dockerfile定制镜像" class="headerlink" title="Dockerfile定制镜像"></a>Dockerfile定制镜像</h2><p>虽然我们可以使用<code>docker commit</code>保存某个容器的存储层为镜像，但是上一层的镜像修改无法被下一层所读取，这就导致后期维护的困难，因为始终不知道上一层究竟做了什么操作，因此，我们可以把每一层的修改命令都写入一个脚本，用这个脚本来构建、定制镜像，上述问题就迎刃而解了。这个脚本就是<code>Dockerfile</code></p><h3 id="Dockerfile脚本运行示例"><a href="#Dockerfile脚本运行示例" class="headerlink" title="Dockerfile脚本运行示例"></a>Dockerfile脚本运行示例</h3><p><code>Dockerfile </code>是一个文本文件，其内包含了一条条的 **指令(Instruction)**，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>这里以构建一个简单的网页为例：</p><ul><li>创建<code>Dockerfile</code>文件；</li></ul><p>首先，在一个空白目录中，<strong>注意一定要是空目录，具体原因后面会介绍</strong>创建一个文本文件，并命名为<code>Dockerfile</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> mynginx<br><span class="hljs-built_in">cd</span> mynginx<br><span class="hljs-built_in">touch</span> Dockerfile<br></code></pre></td></tr></table></figure><p>其内容为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> httpd<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello,World!!&lt;/h1&gt;&#x27;</span> &gt; /usr/local/apache2/htdocs/index.html</span><br></code></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><p>这里我们使用了<code>docker build</code>命令进行镜像构建，命令格式：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">docker <span class="hljs-keyword">build</span> &lt;<span class="hljs-keyword">option</span>&gt; &lt;<span class="hljs-keyword">path</span>/URL&gt;<br></code></pre></td></tr></table></figure><p>在<code>Dockerfile</code>文件所在目录执行：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">docker build -<span class="hljs-built_in">t</span> myapac<span class="hljs-symbol">he:v1</span> .<br>-<span class="hljs-built_in">t</span> 指定镜像名称<br></code></pre></td></tr></table></figure><p>可以看到，这里命令中使用的路径是<code>.</code>。<code>.</code>的意思并不是指的<code>Dockerfile</code>的文件位置，而是Docker上下文。在<code>Dockerfile</code>的编写过程中，我们经常会使用<code>COPY</code>、<code>add</code>指令包含外部文件，那么Docker引擎如何获得这些外部文件呢？就是通过Docker上下文。在Docker构建开始，Docker引擎会将所有Docker上下文内容复制到引擎中，这样我们在构架的时候也就可以直接使用<code>CPOY</code>和<code>ADD</code>命令了，如果Docker上下文文件夹内有很多内容，势必会导致Docker引擎复制太多东西，严重影响效率，这也就是我们需要在空白目录操作的原因。</p><ul><li>启动容器</li></ul><p>经过前两步我们已经成功构建镜像，现在我们启动个容器试一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker run -dit <span class="hljs-attr">--rm</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> <span class="hljs-attr">--name</span> running-apache myapache:v1<br></code></pre></td></tr></table></figure><p>成功运行。</p><h3 id="Dockerfile指令集"><a href="#Dockerfile指令集" class="headerlink" title="Dockerfile指令集"></a><code>Dockerfile</code>指令集</h3><p><code>dockerfile</code>主要组成部分：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">基础镜像信息 <span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">6.8</span><br>制作镜像操作指令<span class="hljs-keyword">RUN</span><span class="language-bash"> yum install openssh-server \ -y</span><br>容器启动时执行指令 <span class="hljs-keyword">CMD</span><span class="language-bash"> \[<span class="hljs-string">&quot;/bin/bash&quot;</span>\]</span><br></code></pre></td></tr></table></figure><p><code>dockerfile</code>常用指令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> 这个镜像的妈妈是谁？（指定基础镜像）<br> <span class="hljs-keyword">MAINTAINER</span> 告诉别人，谁负责养它？（指定维护者信息，可以没有）<br> <span class="hljs-keyword">RUN</span><span class="language-bash"> 你想让它干啥（在命令前面加上RUN即可）</span><br> <span class="hljs-keyword">ADD</span><span class="language-bash"> 给它点创业资金（COPY文件，会自动解压）</span><br> <span class="hljs-keyword">WORKDIR</span><span class="language-bash"> 我是<span class="hljs-built_in">cd</span>,今天刚化了妆（设置当前工作目录）</span><br> <span class="hljs-keyword">VOLUME</span><span class="language-bash"> 给它一个存放行李的地方（设置卷，挂载主机目录）</span><br> <span class="hljs-keyword">EXPOSE</span> 它要打开的门是啥（指定对外的端口）<br> <span class="hljs-keyword">CMD</span><span class="language-bash"> 奔跑吧，兄弟！（指定容器启动后的要干的事情）</span><br></code></pre></td></tr></table></figure><p><code>dockerfile</code>其他命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> 复制文件</span><br><span class="hljs-keyword">ENV</span>  环境变量<br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash">  容器启动后执行的命令</span><br></code></pre></td></tr></table></figure><h4 id="COPY-文件复制指令"><a href="#COPY-文件复制指令" class="headerlink" title="COPY 文件复制指令"></a>COPY 文件复制指令</h4><p>格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">COPY [--chown=<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">src</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dest</span>&gt;</span>]<br>COPY [--chown=<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span>] [&quot;<span class="hljs-tag">&lt;<span class="hljs-name">src</span>&gt;</span>&quot;,... &quot;<span class="hljs-tag">&lt;<span class="hljs-name">dest</span>&gt;</span>&quot;]<br></code></pre></td></tr></table></figure><p><code>CPOY</code>指令将从构建上下文目录中<code>&lt;src&gt;</code>复制到新一层的镜像内的<code>&lt;dest&gt;</code>的目录内。<code>&lt;src&gt;</code>可以是多个，但是必须为上下文目录下的内容，支持通配符，通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match"><code>filepath.Match</code></a> 规则；<code>&lt;dest&gt;</code>可以是容器内的绝对路径，也可以是工作目录（WORKDIR指定的目录）的相对路径，目标路径目录不存在会自行创建缺失目录。关于<strong>权限</strong>问题，<code>COPY</code>指令会保留源文件的权限设置，如需要手动设置则需指定<code>[--chown=&lt;user&gt;:&lt;group&gt;]</code>。如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> package.json /tmp</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package* /tmp</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --<span class="hljs-built_in">chown</span>=55:mygroup package.json /tmp</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --<span class="hljs-built_in">chown</span>=bin package.json /tmp</span><br></code></pre></td></tr></table></figure><p>​在使用<code>COPY</code>指令时，UID和GUI默认为0，等同于<code>COPY --chown=0:0 &lt;src&gt; &lt;dest&gt;</code>，我们可以利用<code>--chown</code>指定文件的用户ID和组ID，也可以直接指定用户名和组名，当然如果容器内根本不存在用户和组信息时，<code>--chown</code>指定的<code>COPY</code>指令会导致运行失败。</p><p><strong>注：</strong></p><ul><li>如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。</li><li>–chown只适用于构建Liunx类型的容器，由于Windows容器权限概念的不同，–chown无法正常使用。</li><li><code>&lt;src&gt;</code>以相对路径指定文件，文件必须在当前上下文之内，不能使用COPY <code>../path/path</code></li></ul><p><strong>COPY增强语意  –link</strong></p><p><code>COPY --link</code>会将复制的文件放在一个空目录中，并将此目录转换为一个独立的层，并链接到上一阶段的构建中。比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> httpd<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --<span class="hljs-built_in">link</span> index.html &gt; /usr/local/apache2/htdocs/index.html</span><br></code></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">FROM</span> httpd<br><br><span class="hljs-keyword">FROM</span> scratch<br><span class="hljs-keyword">COPY</span> <span class="hljs-keyword">index</span>.html &gt; /usr/<span class="hljs-keyword">local</span>/apache2/htdocs/<span class="hljs-keyword">index</span>.html<br></code></pre></td></tr></table></figure><p>当不使用<code>--link</code>时，Docker每一层构建都需要包含上一层的文件，也就是说当前层的构建需要上层完全文件系统。而使用<code>--link</code>时，情况就发生了变化，因为<code>--link</code>是创建的独立的一层，在这层中仅包含复制的文件，并未包含上一层的文件系统，只有在最终容器启动时，Docker引擎才会下载上层文件系统并合并复制的层。</p><p><strong>参考链接：</strong><a href="https://www.howtogeek.com/devops/how-to-accelerate-docker-builds-and-optimize-caching-with-copy-link/">How to Accelerate Docker Builds and Optimize Caching With “COPY –link”</a></p><h4 id="ADD-高级文件复制指令"><a href="#ADD-高级文件复制指令" class="headerlink" title="ADD 高级文件复制指令"></a>ADD 高级文件复制指令</h4><p><code>ADD</code>与<code>COPY</code>极其相似，可以理解为<code>COPY</code>命令的升级版，<code>ADD</code>有一个非常常用的功能：如果<code>&lt;src&gt;</code>为一个<code>tar</code>压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;dest&gt;</code> 去。在某些情况下这个功能非常有用。</p><p>但是<code>ADD</code>指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p><h4 id="CMD-容器启动指令"><a href="#CMD-容器启动指令" class="headerlink" title="CMD 容器启动指令"></a>CMD 容器启动指令</h4><p><code>CMD</code>指令的格式和<code>RUN</code>指令类似，也是两种格式：</p><ul><li><code>shell</code>格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code>格式：<code>CMD [&quot;可执行文件&quot;,&quot;参数1&quot;，&quot;参数2&quot;...]</code></li><li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li></ul><p>简单而言，<code>CMD</code>就是指定容器主程序启动执行的默认命令，实际命令会当作<code>sh -c</code>的参数执行。比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> 123</span><br></code></pre></td></tr></table></figure><p>在实际执行时，会变为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;echo 123&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>在这里我们可以看出，容器实际运行主程序为<code>sh</code>，而容器是一个进程的概念，这与虚拟机不太一样的，虚拟机可以理解为一个操作系统进程的概念，如果操作系统进程停止了，那么虚拟机也停止了；而容器本身就是一个<code>sh</code>进程，我们使用<code>CMD</code>指定<code>sh</code>的参数，因此我们不能让<code>sh</code>进程退出，这就要求我们指定的参数必须一直位于前台运行。比如：</p><p>我们正常启动<code>ngimx</code>命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service nginx <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>但我们不能在<code>CMD</code>命令中这样用，因为该命令执行完后，进程就会退出，<code>nginx</code>后台运行，而在容器中这就意味着<code>CMD</code>指令退出了，容器也就停止了，根本就不存在<code>nginx</code>后台运行，正确的做法是将<code>nginx</code>作为前台运行，且终端不退出。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br></code></pre></td></tr></table></figure><blockquote><p>  此外，也可以设置CMD [“sleep”,”infinity”]让当前shell永久处于睡眠模式，目的是让容器不要退出。</p></blockquote><p><strong>注意：如果容器中存在多个<code>CMD</code>指令，只有最后一个 <code>CMD</code> 指令会生效，即它会成为容器启动时执行的默认命令。每个 Dockerfile 只允许有一个 <code>CMD</code> 指令，后面 <code>CMD</code> 指令会覆盖前面 <code>CMD</code> 指令，</strong></p><h4 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h4><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ENTRYPOINT</span>&gt;</span> &quot;<span class="hljs-tag">&lt;<span class="hljs-name">CMD</span>&gt;</span>&quot;<br></code></pre></td></tr></table></figure><p>因此，<code>ENTRYPOINT</code>和<code>CMD</code>经常配合使用，例如，需要在镜像里面通过<code>java -jar</code>的方式启动一个java工程，就可以采用下面的方式，默认启动的时候 <strong>commcon.jar</strong> 这个工程：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">ENTRYPOINT <span class="hljs-selector-attr">[<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>]</span><br> <br>CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;common.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>如果我们不想启动这个 <strong>common.jar</strong> 的工程了，我们在启动容器的时候更换下命令就可以了，如下所示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> 容器名称 xxxx.jar<br></code></pre></td></tr></table></figure><h4 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h4><p>格式有两种：</p><ul><li><code>ENV  &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><h4 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h4><p>构建参数和<code>ENV</code>效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量（可以理解为<code>Dockerfile</code>的环境变量，只在<code>Dockerfile</code>里使用），在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p><p>ARG 指令有生效范围，如果在 <code>FROM</code> 指令之前指定，那么只能用于 <code>FROM</code> 指令中。要想在其他指令中使用该变量，你必须在 <code>FROM</code> 之后再次指定 <code>ARG</code>。对于多阶段构建，也是一样，Dockerfile 多个 <code>FROM</code> 指令都可以使用 <code>$&#123;DOCKER_USERNAME&#125;</code>，对于在各个阶段中使用的变量都必须在每个阶段分别指定：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ARG <span class="hljs-attribute">DOCKER_USERNAME</span>=library<br><br><span class="hljs-keyword">FROM</span> <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine<br><br><span class="hljs-comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span><br>ARG <span class="hljs-attribute">DOCKER_USERNAME</span>=library<br><br><span class="hljs-built_in">RUN</span> <span class="hljs-built_in">set</span> -x ; echo <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span><br><br><span class="hljs-keyword">FROM</span> <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine<br><br><span class="hljs-comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span><br>ARG <span class="hljs-attribute">DOCKER_USERNAME</span>=library<br><br><span class="hljs-built_in">RUN</span> <span class="hljs-built_in">set</span> -x ; echo <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span><br></code></pre></td></tr></table></figure><h4 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h4><p>格式为：</p><ul><li><p><code>VOLUME [&quot;&lt;路径1&gt;&quot;，&quot;&lt;路径2&gt;&quot;]</code></p></li><li><p><code>VOLUME &lt;路径&gt;</code></p></li></ul><p>我知道通过Docker可以将我们的软件运行环境和基于运行环境开发的软件打包成镜像，而镜像运行伴随着容器，内部数据文件的生命周期也同容器的生命周期。如果容器运行过程中有些数据我们需要保存该怎么办呢？因此于是容器卷技术便孕育而生，简单理解容器卷就是一个外置硬盘。<code>VOLUME &lt;路径&gt;</code>指定容器内的<code>&lt;路径&gt;</code>目录为匿名卷，该目录下所有修改都将被保存，不会随着容器的删除而消失，并且可以再次指定其他容器挂载。</p><p><strong>使用命令添加挂载卷</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 命令挂载卷</span><br>docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -v mydata:/data nginx</span><br></code></pre></td></tr></table></figure><p>在这条命令中就使用<code>-v</code>指定 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 匿名挂载卷</span><br>docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -v /etc/nginx nginx</span><br></code></pre></td></tr></table></figure><p>这条命令中<code>-v</code>没有指定挂载卷名字，是一个匿名挂载卷，挂载到<code>/etc/nginx</code>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 挂载本地目录</span><br>docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -v /home/nginx:/etc/nginx nginx</span><br></code></pre></td></tr></table></figure><p>这条指令将本地目录挂载到<code>/etc/nginx</code>目录下，<code>/etc/nginx</code>目录所有修改都将同步到本地。</p><h4 id="EXPOSE暴露端口"><a href="#EXPOSE暴露端口" class="headerlink" title="EXPOSE暴露端口"></a>EXPOSE暴露端口</h4><p>格式为：</p><ul><li><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></li></ul><p><code>EXPOSE</code> 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。在 <code>Dockerfile </code>中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p><h4 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h4><p><code>WORKDIR</code>用于设定容器构建和工作时的目录（当前目录），由于容器是一种分层结构，每层结构都是一个子容器，而<code>WORKDIR</code>则可以设置子容器的工作目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p><p><code>WORKDIR</code>支持绝对路径和相对路径，在相对路径设置时，<code>WORKDIR</code>的设置当前工作目录有关，新设置得<code>WORKDIR</code>都是基于原有的<code>WORKDIR</code>设置的，默认的<code>WORKDIR</code>为根目录比如：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">WORKDIR /a<br><span class="hljs-meta prompt_">...</span><br>WORKDIR b<br><span class="hljs-meta prompt_">...</span><br>WORKDIR a<br><span class="hljs-meta prompt_">...</span><br></code></pre></td></tr></table></figure><p>最后的工作目录为<code>/a/b/c</code>。</p><h4 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h4><p><code>USER</code>用于指定<code>RUN</code>，<code>CMD</code>，<code>ENTRYPOINT</code>这类命令的运行身份，<code>USER</code>与<code>WORKDIR</code>一样，都会改变运行状态并影响以后的层。当然，运行<code>USER</code>之前，必须先创建相应的用户。</p><p>如果以 <code>root</code> 执行的脚本，在执行期间希望改变身份，一般不会使用使用 <code>su</code> 或者 <code>sudo</code>，建议使用 <a href="https://github.com/tianon/gosu"><code>gosu</code></a>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="hljs-comment"># 下载 gosu</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget -O /usr/local/bin/gosu <span class="hljs-string">&quot;https://github.com/tianon/gosu/releases/download/1.12/gosu-amd64&quot;</span> \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">chmod</span> +x /usr/local/bin/gosu \</span><br><span class="language-bash">    &amp;&amp; gosu nobody <span class="hljs-literal">true</span></span><br><span class="hljs-comment"># 设置 CMD，并以另外的用户执行</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [ <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;gosu&quot;</span>, <span class="hljs-string">&quot;redis&quot;</span>, <span class="hljs-string">&quot;redis-server&quot;</span> ]</span><br></code></pre></td></tr></table></figure><h4 id="SHELL指令"><a href="#SHELL指令" class="headerlink" title="SHELL指令"></a>SHELL指令</h4><p>格式：</p><ul><li><code>SHELL [&quot;executable&quot;, &quot;parameters&quot;]</code></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">SHELL</span> 指令可以指定 <span class="hljs-keyword">RUN</span> ENTRYPOINT CMD 指令的 <span class="hljs-keyword">shell</span>，Linux 中默认为 [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="Dockerfile多阶段构建"><a href="#Dockerfile多阶段构建" class="headerlink" title="Dockerfile多阶段构建"></a><code>Dockerfile</code>多阶段构建</h3><p>某些情况下，我们希望Docker将我们的源代码编译安装，但是并不希望保留编译相关的组件，只需要最后的可执行程序，为了实现这种功能，<code>Dcokerfile</code>提供了多阶段构建的功能，<code>Dockerfile</code>多阶段构建，可以构建Docker多个阶段，但只保留最后的阶段，这样在构建过程中生成的不必要的组件不会存在最后的阶段。</p><p><strong>构建时从其他镜像或阶段复制文件</strong></p><p>只需要使用<code>COPY --from=阶段序号/阶段名称/镜像 &lt;源路径&gt; &lt;目标路劲&gt;</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">COPY</span> --<span class="hljs-keyword">from</span>=<span class="hljs-number">0</span> <span class="hljs-regexp">/etc/</span>demo .<br><span class="hljs-keyword">COPY</span> --<span class="hljs-keyword">from</span>=nginx:latest <span class="hljs-regexp">/etc/</span>demo .<br></code></pre></td></tr></table></figure><p><code>Dockerfile</code>多阶段构建示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> gcc:<span class="hljs-number">4.9</span> as frontend<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;#include&lt;stdio.h&gt;\nint main()&#123;printf(&quot;Hello,World!!&quot;);return 0;&#125;&#x27;</span> &gt; main.c \</span><br><span class="language-bash">    &amp;&amp; gcc main.c -o main</span><br><br><span class="hljs-keyword">FROM</span> ubuntu<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=frontend /app/main .</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="hljs-string">&quot;/bin/bash&quot;</span> ]</span><br></code></pre></td></tr></table></figure><p>上面<code>Dockerfile</code>的意思就是，在<code>gcc</code>生成<code>main.c</code>文件并编译为可执行文件<code>main</code>，而基于<code>ubuntu</code>镜像，创建一个新的仅包含可执行程序<code>main</code>的镜像，这样的大大减少了镜像的大小。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">docker build -t helloword .<br></code></pre></td></tr></table></figure><p>我们查看<code>helloword</code>镜像大小，基本与<code>ubuntu</code>镜像相同。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><p>我们直接运行<code>helloworld</code>容器，可以看到可执行程序能正常运行。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--rm helloword</span><br></code></pre></td></tr></table></figure><p>当然我们也可以单独构建某一阶段镜像</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker build <span class="hljs-comment">--target frontend -t mygcc .</span><br></code></pre></td></tr></table></figure><p><strong>Python多阶段构建Python环境</strong></p><p>如下为Dockerfile代码。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.8</span>-buster as builder-image<br><br><span class="hljs-comment">### install requirements</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip3 install --no-cache-dir -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><br><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.8</span>-slim-buster<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder-image /usr/local/bin /usr/local/bin</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder-image /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/code</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python3&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>首先，使用<code>python:3.8-buster</code>作为下载python组件的镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FROM</span> python:<span class="hljs-number">3</span>.<span class="hljs-number">8</span>-buster as builder-image<br></code></pre></td></tr></table></figure><p>因为是第一阶段，需要安装很多包，所以要选择一个较为完整的python环境。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">slim</span>:通常只安装运行特定工具所需的最小包<br><span class="hljs-attribute">Alphine</span>: 专门为容器构建的操作系统，比其他的操作系统更小，但是其上会缺少很多软件包并且使用的 glibc 等都是阉割版<br><span class="hljs-attribute">buster</span>: 表示使用debian <span class="hljs-number">10</span>的系统，与之对应的是stretch， debian <span class="hljs-number">9</span>的系统， jessie， debian <span class="hljs-number">8</span> 的系统<br></code></pre></td></tr></table></figure><p>其次，安装python模块</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">COPY</span> requirements.txt .<br><span class="hljs-keyword">RUN</span> pip3 install --<span class="hljs-keyword">no</span>-cache-<span class="hljs-keyword">dir</span> -r requirements.txt -i https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br></code></pre></td></tr></table></figure><p>pip安装python包，<code>--no-cache-dir</code>的作用是不缓存下载的包，-i 指定国内的镜像源。</p><p>然后，选择3.8-slim-buster版本，因为用不到python中所有的功能，可以选择一个稍微小一点的基础镜像。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FROM</span> python:<span class="hljs-number">3</span>.<span class="hljs-number">8</span>-slim-buster<br></code></pre></td></tr></table></figure><p>最后，把第一阶段的python安装的包都copy过来，此时镜像就包含了python以及需要安装的python模块。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">COPY</span> --<span class="hljs-keyword">from</span>=builder-image <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin /u</span>sr<span class="hljs-regexp">/local/</span>bin<br><span class="hljs-keyword">COPY</span> --<span class="hljs-keyword">from</span>=builder-image <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>python3.<span class="hljs-number">8</span><span class="hljs-regexp">/site-packages /u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/python3.8/</span>site-packages<br></code></pre></td></tr></table></figure><p>剩下的就是启动程序的操作，这个就因人而异了。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/code</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python3&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="Dockerfile发布镜像"><a href="#Dockerfile发布镜像" class="headerlink" title="Dockerfile发布镜像"></a><code>Dockerfile</code>发布镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t geniotic/tor_zeronet_nodes:latest .<br>docker push geniotic/tor_zeronet_nodes:latest<br></code></pre></td></tr></table></figure><p><strong>指定镜像多个标签</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">tag</span> <span class="hljs-title">geniotic</span>/tor_zeronet_nodes:latest geniotic/tor_zeronet_nodes:v1<br></code></pre></td></tr></table></figure><h3 id="Docker离线镜像"><a href="#Docker离线镜像" class="headerlink" title="Docker离线镜像"></a>Docker离线镜像</h3><p>打包镜像为离线包</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">docker <span class="hljs-built_in">save</span> geniotic/tor_zeronet_nodes:offline mysql:latest &gt; <span class="hljs-built_in">image</span>.tar<br>docker <span class="hljs-built_in">save</span> geniotic/tor_zeronet_nodes:offline mysql:latest - <span class="hljs-built_in">image</span>.tar<br></code></pre></td></tr></table></figure><p>恢复离线镜像</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">docker <span class="hljs-built_in">load</span> &lt; <span class="hljs-built_in">image</span>.tar<br>或<br>docker <span class="hljs-built_in">load</span> -i <span class="hljs-built_in">image</span>.tar<br></code></pre></td></tr></table></figure><h2 id="Docker其他技巧"><a href="#Docker其他技巧" class="headerlink" title="Docker其他技巧"></a>Docker其他技巧</h2><h3 id="crontab定时任务"><a href="#crontab定时任务" class="headerlink" title="crontab定时任务"></a>crontab定时任务</h3><p>Docker中可以添加crontab以启动定时任务，可以使用cronfile进行配置，示例如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">HOME=/app<br>* * * * * <span class="hljs-regexp">/bin/</span>echo <span class="hljs-string">&quot;0&quot;</span> &gt; <span class="hljs-regexp">/app/</span>done<br><span class="hljs-number">0</span> <span class="hljs-number">1</span> * * * <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>python3 <span class="hljs-regexp">/app/</span>detection.py -t ALL <br><span class="hljs-number">0</span> * * * * <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>python3 <span class="hljs-regexp">/app/</span>detection.py -t Zeronet<br></code></pre></td></tr></table></figure><blockquote><p>  HOME变量指定了在执行命令或者脚本时使用的主目录</p></blockquote><p>当然需要首先安装并启动cron服务。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 安装cron dos2unix</span><br>apt-<span class="hljs-built_in">get</span> install -y <span class="hljs-comment">--no-install-recommends cron dos2unix</span><br><span class="hljs-comment"># 将windows下回车替换成linux回车</span><br>dos2unix /app/cronfile<br><span class="hljs-comment"># 读取cronfile文件</span><br>crontab cronfile<br><span class="hljs-comment"># 后台运行</span><br>service cron <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p><strong>值得注意的是，</strong>crontab缺省用户profile文件中的环境变量参数, 导致手工执行脚本成功,但是到crontab中无法执行。可以使用以下命令导入环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span> &gt;&gt; /etc/default/locale<br></code></pre></td></tr></table></figure><h3 id="mysql初始化数据库"><a href="#mysql初始化数据库" class="headerlink" title="mysql初始化数据库"></a>mysql初始化数据库</h3><p><code>docker</code>版的<code>mysql</code>支持一键导出指定数据库的内容，且能够在创建新的数据库是自动导入，这极大地方便了数据库迁移操作。</p><p><strong><code>mysql</code>导出数据</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> exec node_mysql_1 sh -c <span class="hljs-string">&#x27;exec mysqldump nodes -uroot -p&quot;<span class="hljs-variable">$MYSQL_ROOT_PASSWORD</span>&quot;&#x27;</span> &gt; da.sql<br></code></pre></td></tr></table></figure><p><strong><code>mysql</code>导入数据</strong></p><p><code>mysql</code>的<code>docker</code>中已经设定了<code>ENTRYPOINT</code>，里面会调用<code>/entrypoint.sh</code>这个脚本，我们把mysql:5.5这个镜像pull到本地，再用<code>docker run</code>启动起来，看看里面的<code>entrypoint.sh</code>这个脚本的内容，有一段内容就是从固定目录下遍历所有的<code>.sh</code>和.<code>sql</code>后缀的文件，然后执行。因此我们只需要将<code>mysql</code>导出的<code>sql</code>文件映射到<code>/docker-entrypoint-initdb.d/</code>目录下即可。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">web</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">geniotic/tor_zeronet_nodes:offline</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">9999:9999</span><br>    <span class="hljs-attribute">x-environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-comment"># 全局共享变量,mysql数据库默认密码，离线版本请勿修改数据库密码</span><br>      <span class="hljs-attribute">&amp;shareEnvironment</span><br><span class="hljs-attribute">      MYSQL_ROOT_PASSWORD</span><span class="hljs-punctuation">:</span> <span class="hljs-string">thereisnopassword</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">&lt;&lt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">*shareEnvironment</span><br>      <span class="hljs-comment">#HTTP_PROXY: socks5://172.17.0.1:10808</span><br>      <span class="hljs-comment">#HTTPS_PROXY: socks5://172.17.0.1:10808</span><br>    <span class="hljs-attribute">depends_on</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attribute">links</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br><br>  <span class="hljs-attribute">mysql</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-comment">#- mysql-data:/var/lib/mysql</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./init/:/docker-entrypoint-initdb.d/</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">MYSQL_DATABASE</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nodes</span><br>      <span class="hljs-attribute">&lt;&lt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">*shareEnvironment</span><br><span class="hljs-comment"># volumes:</span><br><span class="hljs-comment">#   mysql-data:</span><br></code></pre></td></tr></table></figure><h3 id="docker容器后台挂起运行"><a href="#docker容器后台挂起运行" class="headerlink" title="docker容器后台挂起运行"></a>docker容器后台挂起运行</h3><p>某些时候我们需要容器后台挂起运行，因此需要一些特殊命令，例如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">sleep</span> infinite<br><span class="hljs-meta"># 这是linux命令，表示永久睡眠，可以在dockerfile中的CMD执行，也可以在bash脚本中执行。</span><br></code></pre></td></tr></table></figure><p><strong>参考链接</strong></p><blockquote><p><a href="https://stackoverflow.com/questions/31870222/how-can-i-keep-a-container-running-on-kubernetes">https://stackoverflow.com/questions/31870222/how-can-i-keep-a-container-running-on-kubernetes</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
      <category>教程文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
